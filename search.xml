<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS 6.5编译Rsyslog 8.1903.0</title>
    <url>/2019/04/03/CentOS-6-5-%E7%BC%96%E8%AF%91-Rsyslog-8-1903-0/</url>
    <content><![CDATA[<p>源码下载参考我的另外一片博文：<a href="https://www.zhangjc.com/2019/04/03/CentOS-7-3-%E7%BC%96%E8%AF%91-Rsyslog-8-1903-0/">CentOS 7.3 编译 Rsyslog 8.1903.0</a>。</p>
<p>本篇博文从创建构建环境开始填坑&#x2F;(ㄒoㄒ)&#x2F;~~。通过上一篇博文可以解决的问题此处不再赘述。</p>
<p>执行配置时出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./configure --enable-omhttp</span></span><br><span class="line">configure: error: cannot find install-sh or install.sh <span class="keyword">in</span> <span class="string">&quot;.&quot;</span> <span class="string">&quot;./..&quot;</span> <span class="string">&quot;./../..&quot;</span></span><br></pre></td></tr></table></figure>

<p>先执行<code>autogen.sh</code>出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh autogen.sh</span></span><br><span class="line">checking <span class="keyword">for</span> LIBESTR... configure: error: Package requirements (libestr &gt;= 0.1.9) were not met:</span><br><span class="line">No package <span class="string">&#x27;libestr&#x27;</span> found</span><br></pre></td></tr></table></figure>

<p>检查没有安装libestr库，所以重新安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install libestr libestr-devel</span></span><br></pre></td></tr></table></figure>

<p>再次执行<code>autogen.sh</code>问题依旧o(╯□╰)o。需要编译安装libestr。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://libestr.adiscon.com/files/download/libestr-0.1.9.tar.gz</span></span><br><span class="line"><span class="comment"># tar xzvf libestr-0.1.9.tar.gz</span></span><br><span class="line"><span class="comment"># ./configure CC=&quot;gcc -m64&quot; --prefix=/usr --libdir=/usr/lib64</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<p>安装完成后重新执行<code>autogen.sh</code>问题解决。</p>
<p>问题逐一解决后执行自动配置成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># autoreconf -fvi</span></span><br></pre></td></tr></table></figure>

<p>执行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./configure --enable-omhttp</span></span><br></pre></td></tr></table></figure>

<p>配置过程中出现以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">make[3]: Entering directory `/data/kafka/rsyslog-8.1903.0/grammar&#x27;</span><br><span class="line">  LEX    lexer.c</span><br><span class="line">make[3]: *** [lexer.c] 错误 1</span><br><span class="line">make[3]: Leaving directory `/data/kafka/rsyslog-8.1903.0/grammar&#x27;</span><br><span class="line">make[2]: *** [all] 错误 2</span><br><span class="line">make[2]: Leaving directory `/data/kafka/rsyslog-8.1903.0/grammar&#x27;</span><br><span class="line">make[1]: *** [all-recursive] 错误 1</span><br><span class="line">make[1]: Leaving directory `/data/kafka/rsyslog-8.1903.0&#x27;</span><br><span class="line">make: *** [all] 错误 2</span><br></pre></td></tr></table></figure>

<p>安装flex：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install flex</span><br></pre></td></tr></table></figure>

<p>安装后执行<code>autogen.sh</code>，再次执行configure，然后执行make成功。进入omhttp目录执行make出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd contrib/omhttp</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">  CC     omhttp_la-omhttp.lo</span><br><span class="line">omhttp.c: 在函数‘curlPostSetup’中:</span><br><span class="line">omhttp.c:1554: 错误：‘CURLOPT_TCP_KEEPALIVE’未声明(在此函数内第一次使用)</span><br><span class="line">omhttp.c:1554: 错误：(即使在一个函数内多次出现，每个未声明的标识符在其</span><br><span class="line">omhttp.c:1554: 错误：所在的函数内也只报告一次。)</span><br><span class="line">omhttp.c:1554: 警告：在‘_curl_opt’的声明中，类型默认为‘int’</span><br><span class="line">omhttp.c:1558: 错误：‘CURLOPT_TCP_KEEPIDLE’未声明(在此函数内第一次使用)</span><br><span class="line">omhttp.c:1558: 警告：在‘_curl_opt’的声明中，类型默认为‘int’</span><br><span class="line">omhttp.c:1562: 错误：‘CURLOPT_TCP_KEEPINTVL’未声明(在此函数内第一次使用)</span><br><span class="line">omhttp.c:1562: 警告：在‘_curl_opt’的声明中，类型默认为‘int’</span><br><span class="line">make: *** [omhttp_la-omhttp.lo] 错误 1</span><br></pre></td></tr></table></figure>

<p>经过Google后发现CURLOPT_TCP_KEEPALIVE是在<code>libcurl 7.25.0</code>之后才定义的。使用以下命令检查系统当前libcurl版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -q libcurl</span></span><br><span class="line">    </span><br><span class="line">libcurl-7.19.7-52.el6.x86_64</span><br></pre></td></tr></table></figure>

<p>所以需要升级curl版本，参考：<a href="https://www.jianshu.com/p/14f5f145453e">https://www.jianshu.com/p/14f5f145453e</a>。升级完成后创建以下软连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ln -s /usr/local/curl/include/curl/ /usr/include/curl</span></span><br></pre></td></tr></table></figure>

<p>再次执行编译omhttp，出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">make[2]: Entering directory `/data/kafka/rsyslog-8.1903.0/contrib/omhttp&#x27;</span><br><span class="line">  CC     omhttp_la-omhttp.lo</span><br><span class="line">omhttp.c: 在函数‘checkConn’中:</span><br><span class="line">omhttp.c:470: 警告：此函数中的‘healthUrl’在使用前可能未初始化</span><br><span class="line">  CCLD   omhttp.la</span><br><span class="line">/usr/bin/ld: cannot find -lcurl</span><br><span class="line">collect2: ld returned 1 exit status</span><br><span class="line">make[2]: *** [omhttp.la] 错误 1</span><br><span class="line">make[2]: Leaving directory `/data/kafka/rsyslog-8.1903.0/contrib/omhttp&#x27;</span><br><span class="line">make[1]: *** [all-recursive] 错误 1</span><br><span class="line">make[1]: Leaving directory `/data/kafka/rsyslog-8.1903.0&#x27;</span><br><span class="line">make: *** [all] 错误 2</span><br></pre></td></tr></table></figure>

<p>创建以下软连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib64</span><br><span class="line"><span class="comment"># ln -s /usr/local/curl/lib/libcurl.so.4.5.0 libcurl.so</span></span><br><span class="line"><span class="comment"># ln -s /usr/local/curl/lib/libcurl.so.4.5.0 libcurl.so.4</span></span><br></pre></td></tr></table></figure>

<p>再次编译omhttp成功！！终于大功告成O(∩_∩)O哈哈~</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Rsyslog</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6.8 安装 Nginx</title>
    <url>/2019/03/27/CentOS-6-8-%E5%AE%89%E8%A3%85-Nginx/</url>
    <content><![CDATA[<p>提前安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum install yum-utils</span></span><br></pre></td></tr></table></figure>

<p>一般情况下这个工具系统已经安装。</p>
<p>创建文件&#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo，输入内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br></pre></td></tr></table></figure>

<p>注意，根据自己服务器的情况替换参数<code>$releasever</code>和<code>$basearch</code>。</p>
<p>一般默认使用稳定安装包。如果想使用主线安装包则运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum-config-manager --enable nginx-mainline</span></span><br></pre></td></tr></table></figure>

<p>运行以下命令安装Nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum install nginx</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.3编译Rsyslog 8.1903.0</title>
    <url>/2019/04/03/CentOS-7-3-%E7%BC%96%E8%AF%91-Rsyslog-8-1903-0/</url>
    <content><![CDATA[<p>源码下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/rsyslog/rsyslog/archive/v8.1903.0.tar.gz</span></span><br><span class="line"><span class="comment"># tar xzvf v8.1903.0.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>创建构建环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># autoreconf -fvi</span></span><br></pre></td></tr></table></figure>

<p>创建过程中出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">configure.ac:46: error: possibly undefined macro: AC_DISABLE_STATIC</span><br><span class="line">      If this token and others are legitimate, please use m4_pattern_allow.</span><br><span class="line">      See the Autoconf documentation.</span><br><span class="line">configure.ac:49: error: possibly undefined macro: AC_LIBTOOL_DLOPEN</span><br><span class="line">configure.ac:52: error: possibly undefined macro: AC_PROG_LIBTOOL</span><br><span class="line">autoreconf: /usr/bin/autoconf failed with exit status: 1</span><br></pre></td></tr></table></figure>

<p>原因是缺少libtool，执行以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install libtool</span></span><br></pre></td></tr></table></figure>

<p>执行配置，可以自定义选项，我是因为要编译omhttp模块，所以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./configure --enable-omhttp</span></span><br></pre></td></tr></table></figure>

<p>执行过程汇总出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">checking for LIBESTR... no</span><br><span class="line">configure: error: Package requirements (libestr &gt;= 0.1.9) were not met:</span><br><span class="line"></span><br><span class="line">No package &#x27;libestr&#x27; found</span><br></pre></td></tr></table></figure>

<p>使用以下命令检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -q libestr</span></span><br><span class="line">libestr-0.1.9-2.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>安装开发包后解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install libestr-devel</span></span><br></pre></td></tr></table></figure>

<p>再次执行配置出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">checking for LIBFASTJSON... no</span><br><span class="line">configure: error: Package requirements (libfastjson &gt;= 0.99.8) were not met:</span><br><span class="line"></span><br><span class="line">No package &#x27;libfastjson&#x27; found</span><br></pre></td></tr></table></figure>

<p>检查系统安装的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -q libfastjson</span></span><br><span class="line">libfastjson-0.99.4-3.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>安装新版本。源码下载：<a href="http://download.rsyslog.com/libfastjson/">http://download.rsyslog.com/libfastjson/</a>。下载<code>libfastjson-0.99.8.tar.gz</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget http://download.rsyslog.com/libfastjson/libfastjson-0.99.8.tar.gz</span></span><br><span class="line"><span class="comment"># tar xzvf libfastjson-0.99.8.tar.gz</span></span><br><span class="line"><span class="comment"># cd libfastjson-0.99.8/</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr CC=&quot;gcc -m64&quot; PKG_CONFIG_PATH=&quot;/usr/lib64/pkgconfig&quot; --libdir=/usr/lib64</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<p>再次执行配置出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">checking for LIBUUID... no</span><br><span class="line">configure: error: Package requirements (uuid) were not met:</span><br><span class="line"></span><br><span class="line">No package &#x27;uuid&#x27; found</span><br></pre></td></tr></table></figure>

<p>安装libuuid：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install libuuid libuuid-devel</span></span><br></pre></td></tr></table></figure>

<p>再次执行配置出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">configure: error: in `/data/rsyslog/rsyslog-8.1903.0&#x27;:</span><br><span class="line">configure: error: libgcrypt-config not found in PATH</span><br></pre></td></tr></table></figure>

<p>安装libgcrypt模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install libgcrypt libgcrypt-devel</span></span><br></pre></td></tr></table></figure>

<p>再次执行配置成功。^_^</p>
<p>执行编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make</span></span><br></pre></td></tr></table></figure>

<p>编译过程出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">make[2]: 进入目录“/data/rsyslog/rsyslog-8.1903.0/grammar”</span><br><span class="line">  YACC     grammar.c</span><br><span class="line">../ylwrap:行178: yacc: 未找到命令</span><br><span class="line">make[2]: *** [grammar.c] 错误 127</span><br><span class="line">make[2]: 离开目录“/data/rsyslog/rsyslog-8.1903.0/grammar”</span><br><span class="line">make[1]: *** [all-recursive] 错误 1</span><br><span class="line">make[1]: 离开目录“/data/rsyslog/rsyslog-8.1903.0”</span><br><span class="line">make: *** [all] 错误 2</span><br></pre></td></tr></table></figure>

<p>安装byacc：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install byacc</span></span><br></pre></td></tr></table></figure>

<p>再次编译出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make  all-am</span><br><span class="line">make[3]: 进入目录“/data/rsyslog/rsyslog-8.1903.0/grammar”</span><br><span class="line">  CC       libgrammar_la-grammar.lo</span><br><span class="line">  LEX      lexer.c</span><br><span class="line">  CC       libgrammar_la-lexer.lo</span><br><span class="line">gcc: error: ./lexer.c: No such file or directory</span><br><span class="line">gcc: fatal error: no input files</span><br></pre></td></tr></table></figure>

<p>这是因为在make前需要执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh autogen.sh</span></span><br></pre></td></tr></table></figure>

<p>编译omhttp模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># contrib/omhttp</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">    CC       omhttp_la-omhttp.lo</span><br><span class="line">    CCLD     omhttp.la</span><br></pre></td></tr></table></figure>

<p>执行完成后再次make，生成的<code>omhttp.so</code>文件在<code>contrib/omhttp/.libs</code>目录下。</p>
<p>至此，大功告成！！O(∩_∩)O哈哈~</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Rsyslog</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title>DOS命令</title>
    <url>/2025/10/27/DOS%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><ol>
<li>dir</li>
</ol>
<ul>
<li>无参数： 查看当前所在目录的文件和文件夹。</li>
<li>&#x2F;s： 查看当前目录已及其所有子目录的文件和文件夹。</li>
<li>&#x2F;a： 查看包括隐藏文件的所有文件。</li>
<li>&#x2F;ah： 只显示出隐含文件。</li>
<li>&#x2F;w： 以紧凑方式（一行显示3个文件）显示文件和文件夹。</li>
<li>&#x2F;p： 以分页方式（显示一页之后会自动暂停）显示。</li>
</ul>
<ol start="2">
<li>cd</li>
</ol>
<ul>
<li>cd 目录名： 进入特定的目录。</li>
<li>cd \： 退回到根目录。</li>
<li>cd ..： 退回到上一级目录。</li>
</ul>
<ol start="3">
<li>md</li>
</ol>
<p>md 目录名： 建立特定的文件夹。</p>
<ol start="4">
<li>rd</li>
</ol>
<p>rd 目录名： 删除特定的文件夹。</p>
<ol start="5">
<li>cls</li>
</ol>
<p>清除屏幕。</p>
<ol start="6">
<li>copy</li>
</ol>
<p>copy 路径\文件名 路径\文件名： 把一个文件拷贝到另一个地方。</p>
<ol start="7">
<li>move</li>
</ol>
<p>move 路径\文件名 路径\文件名： 把一个文件移动到另一个地方。</p>
<ol start="8">
<li>del</li>
</ol>
<p>del不能删除文件夹。</p>
<ul>
<li>del 文件名： 删除一个文件。</li>
<li>del *.*： 删除当前文件夹下所有文件。</li>
</ul>
<ol start="9">
<li>deltree</li>
</ol>
<p>删除文件夹和它下面的所有子文件夹还有文件。</p>
<ol start="10">
<li>format</li>
</ol>
<p>format x: x代表盘符，格式化一个分区。在dos下是用fat文件系统格式化的，在windows2000安装的时候会问你要不要转换为ntfs。</p>
<ol start="11">
<li>type</li>
</ol>
<p>type 文本文件名： 显示出文本文件的内容。</p>
<ol start="12">
<li>ren</li>
</ol>
<p>ren 旧文件名 新文件名： 改文件名。</p>
<h1 id="关于网络的常用命令"><a href="#关于网络的常用命令" class="headerlink" title="关于网络的常用命令"></a>关于网络的常用命令</h1><ol>
<li>ping</li>
</ol>
<ul>
<li>ping 主机ip或名字： 向目标主机发送4个icmp数据包，测试对方主机是否收到并响应，一般常用于做普通网络是否通畅的测试。但是ping不同不代表网络不通，有可能是目标主机装有防火墙并且阻止了icmp响应。</li>
<li>ping -t： 不停的发送数据包。当然都很小，不能称作攻击。有些人自己写了一些类似于ping命令的程序，不停的发送很大的数据包，以阻塞目标主机的网络连接。</li>
</ul>
<ol start="2">
<li>net</li>
</ol>
<p>建议是用 net &#x2F;? 获取具体帮助信息。实在是有很多参数，参数下面还有参数。常用：net view \主机 来看共享，net start&#x2F;stop 服务来启动和停止服务。</p>
<ol start="3">
<li>netstat</li>
</ol>
<p>netstat 主机： 查看主机当前的 tcp&#x2F;ip 连接状态，如端口的状态。</p>
<ol start="4">
<li>nbtstat</li>
</ol>
<p>查看主机使用的 NetBIOS name。使用 nbtstat &#x2F;? 查看帮助。</p>
<ol start="5">
<li>tracert</li>
</ol>
<p>tracert 主机： 查看从你自己到目标主机到底经过了那些路径。如： tracert <a href="http://www.baidu.com/">www.baidu.com</a> 然后等待。。。 就会看到你经过的一个个路由节点，一般大一点的路由器，如电信的主干路由，除了ip以外，都有英文标示的。</p>
<ol start="6">
<li>pathping</li>
</ol>
<p>pathping 主机： 类似tracert，但可以显示一些tracert不能显示出来的信息。</p>
<ol start="7">
<li>ftp</li>
</ol>
<p>字符方式的 ftp 。</p>
<ol start="8">
<li>telnet</li>
</ol>
<p>字符方式的远程登录程序，是网络人员极其爱用的远程登录程序。一般可以用来测试主机端口是否可用：<br>telnet 主机IP 端口号</p>
<ol start="9">
<li>ipconfig</li>
</ol>
<p>非常有用的网络配置、排错命令。</p>
<ul>
<li>不加参数： 显示当前机器的网络接口状态。</li>
<li>&#x2F;all： 显示详细的信息。</li>
<li>&#x2F;release： 释放当前ip。</li>
<li>&#x2F;renew： 重新申请ip。</li>
<li>&#x2F;flushdns： 刷新dns缓存。</li>
<li>&#x2F;registerdns： 重新在dns服务器上注册自己。</li>
</ul>
<ol start="10">
<li>arp</li>
</ol>
<p>操作当前的arp缓存。</p>
<ul>
<li>arp -a： 显示arp缓存。</li>
<li>arp -d： 删除一条缓存纪录。</li>
<li>arp -s： 添加一条缓存纪录。</li>
</ul>
<ol start="11">
<li>nslookup</li>
</ol>
<p>排除dns错误的利器。是一个交互的工具。使用之前请先努力弄清楚dns的作用以及dns的工作原理。</p>
<ol start="12">
<li>route</li>
</ol>
<p>一般用来查看路由表或者添加静态路由：</p>
<ul>
<li>route print： 打印路由</li>
<li>route add： 添加路由</li>
</ul>
<p>添加路由参考以下示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route ADD 157.0.0.0 MASK 255.0.0.0  157.55.80.1</span><br></pre></td></tr></table></figure>

<p>如果想每次开机保留该路由，则添加 -p 参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route ADD 157.0.0.0 MASK 255.0.0.0  157.55.80.1 -p</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 23.10安装Docker</title>
    <url>/2025/05/30/Deepin-23-10%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<p>Deepin 是基于 Debian 的国产 Linux 发行版，安装 Docker Desktop 可能会遇到兼容性问题，因为 Docker Desktop 官方主要支持 Ubuntu&#x2F;Debian&#x2F;Red Hat&#x2F;Fedora&#x2F;Arch 等主流发行版，所以选择安装 Docker Engine。</p>
<ol>
<li>卸载旧版本（如有）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove docker.io docker-doc docker-compose podman-docker containerd runc</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加 Docker 官方 GPG 密钥</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>添加 Docker 源</li>
</ol>
<p>由于 Deepin 基于 Debian，可以使用 Debian 的 Docker 源（需匹配 Deepin 版本对应的 Debian 版本）。</p>
<p>查看Deepin对应的Debian版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/debian_version</span><br><span class="line">bookworm/sid</span><br></pre></td></tr></table></figure>

<p>执行以下命令添加 Docker 源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian bookworm stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装 Docker Engine</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>启动 Docker</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>允许普通用户运行 Docker</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker  <span class="comment"># 重新加载用户组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可能需要重启电脑。</p>
</blockquote>
<ol start="8">
<li>测试 Docker</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run hello-world</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需先配置国内镜像源。现在可用的镜像源越来越少了，推荐一篇良心博文：<a href="https://zhuanlan.zhihu.com/p/24461370776">https://zhuanlan.zhihu.com/p/24461370776</a>。</p>
</blockquote>
<p>安装成功的验证结果信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">e6590344b1a5: Pull complete </span><br><span class="line">Digest: sha256:dd01f97f252193ae3210da231b1dca0cffab4aadb3566692d6730bf93f123a48</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>

<p>Deepin 20.9 社区版安装 Docker 见文章：<a href="https://www.zhangjc.com/2025/05/31/Deepin-20-9%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85Docker/">Deepin 20.9 社区版安装 Docker</a>。</p>
<p>DockerHub 镜像源配置见文章：<a href="https://www.zhangjc.com/2025/05/31/Linux%E9%85%8D%E7%BD%AEDockerHub%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/">Linux 配置 DockerHub 镜像源配置</a>。</p>
<p>Docker Compose 安装见文章：<a href="https://www.zhangjc.com/2025/05/31/Linux-%E7%B3%BB%E7%BB%9F-Docker-Compose-%E5%AE%89%E8%A3%85/">Linux 系统 Docker Compose 安装</a>。</p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Deepin</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 20.9社区版安装Docker</title>
    <url>/2025/05/31/Deepin-20-9%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>Deepin 20.9 社区版安装 Docker 需要注意两点：</p>
<ul>
<li>因为某些原因，Docker 官方源基本不可用，所以需要使用镜像源进行安装。当然也可以用安装包直接安装，但后续升级不够方便。</li>
<li>需要确定对应 Debian 的版本及代号。</li>
</ul>
<h1 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h1><p>如果安装过老版本，确保先卸载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove docker.io docker-engine</span><br></pre></td></tr></table></figure>

<h1 id="确定-Debian-版本代号"><a href="#确定-Debian-版本代号" class="headerlink" title="确定 Debian 版本代号"></a>确定 Debian 版本代号</h1><p>查看Deepin对应的Debian版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/debian_version</span><br><span class="line">10.10</span><br></pre></td></tr></table></figure>

<p>查看Debian版本列表，10.10版本代号为buster。</p>
<p><img src="/images/202505/01.jpg"></p>
<h1 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> deepin-editor /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>

<p>加入以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian buster stable</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，一些镜像源缺少对应版本的发行包，可以浏览器访问镜像源查看确定。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>更新仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>

<p>安装 docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+rw /var/run/docker.sock</span><br><span class="line"><span class="comment"># 将用户添加到docker组中</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重启电脑，如果不重启可能会 有问题。</p>
</blockquote>
<p>Deepin 23.10 安装 Docker 见文章：<a href="https://www.zhangjc.com/2025/05/30/Deepin-23-10%E5%AE%89%E8%A3%85Docker/">Deepin 23.10 安装 Docker</a>。</p>
<p>DockerHub 镜像源配置见文章：<a href="https://www.zhangjc.com/2025/05/31/Linux%E9%85%8D%E7%BD%AEDockerHub%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/">Linux 配置 DockerHub 镜像源配置</a>。</p>
<p>Docker Compose 安装见文章：<a href="https://www.zhangjc.com/2025/05/31/Linux-%E7%B3%BB%E7%BB%9F-Docker-Compose-%E5%AE%89%E8%A3%85/">Linux 系统 Docker Compose 安装</a>。</p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin 安装 Nginx</title>
    <url>/2025/09/28/Deepin-%E5%AE%89%E8%A3%85-Nginx/</url>
    <content><![CDATA[<p>系统版本：Deepin 23.10。</p>
<p>执行以下命令安装 Nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure>

<p>安装完成后，Nginx 默认会启动。也可以使用以下命令启动 Nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start nginx.service</span><br></pre></td></tr></table></figure>

<p>打开浏览器并访问 <a href="http://localhost/">http://localhost</a> 看到下图所示的 Nginx 欢迎页面则说明安装并启动成功。<br><img src="/images/202509/45.png"></p>
<p>使用如下命令将 Nginx 设置为开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin下创建AppImage应用的快捷方式</title>
    <url>/2025/03/07/Deepin%E4%B8%8B%E5%88%9B%E5%BB%BAAppImage%E5%BA%94%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>本文以创建Navicat的快捷方式为例。我下载的Navicat应用程序存放路径：&#x2F;opt&#x2F;navicat17-premium-lite-cs-x86_64.AppImage。</p>
<p>为了方便后续配置，为Navicat创建软连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s navicat17-premium-lite-cs-x86_64.AppImage navicat</span><br><span class="line">$ <span class="built_in">ls</span> -l navicat*</span><br><span class="line">lrwxrwxrwx 1 root    root           41 12月 6日 22:46 navicat -&gt; navicat17-premium-lite-cs-x86_64.AppImage</span><br><span class="line">-rwxrwxr-x 1 zhangjc zhangjc 249385280 12月 6日 18:15 navicat17-premium-lite-cs-x86_64.AppImage</span><br></pre></td></tr></table></figure>

<p>在<code>/usr/share/applications</code>目录下创建<code>navicat.desktop</code>文件，并输入以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Navicat</span><br><span class="line">Exec=/opt/navicat</span><br><span class="line">Type=Application</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin下创建WebStorm快捷方式</title>
    <url>/2025/03/07/Deepin%E4%B8%8B%E5%88%9B%E5%BB%BAWebStorm%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>下载WebStorm并解压至安装目录，默认的只能通过命令行启动，每次都需要先打开终端，很不方便。解决方法是创建快捷方式，并驻留任务栏。这样点击任务栏上的图标即可启动。</p>
<p>为了方便快捷方式配置，在安装目录创建软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ln -s WebStorm-243.25659.40 webstorm</span></span><br><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">lrwxrwxrwx 1 root    root           21  3月 7日 21:26 webstorm -&gt; WebStorm-243.25659.40</span><br><span class="line">drwxr-xr-x 9 zhangjc zhangjc      4096  3月 7日 20:35 WebStorm-243.25659.40</span><br></pre></td></tr></table></figure>

<p>在<code>/usr/share/applications/</code>目录下，创建<code>webstorm.desktop</code>文件，并输入一下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=WebStorm</span><br><span class="line">Exec=/opt/webstorm/bin/webstorm</span><br><span class="line">Icon=/opt/webstorm/bin/webstorm.png</span><br><span class="line">Type=Application</span><br></pre></td></tr></table></figure>

<p>保存文件后，就可以从启动器搜索到WebStorm了：</p>
<p><img src="/images/202503/01.png"></p>
<p>启动后，可以将WebStorm驻留至任务栏：</p>
<p><img src="/images/202503/02.png"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin启用ll命令</title>
    <url>/2024/12/16/Deepin%E5%90%AF%E7%94%A8ll%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>ll是个很方便的快捷命令，默认Deepin未启用。启用方法很简单，编辑下面的文件，去掉以下内容前面的注释即可。</p>
<p>文件：~&#x2F;.bashrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin安装完成后无线网无法使用问题</title>
    <url>/2024/12/22/Deepin%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%E6%97%A0%E7%BA%BF%E7%BD%91%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在安装完Deepin 23后，无线网络用不了。自己安装无线网卡驱动后，重启电脑，登陆系统时电脑一直黑屏状态。重新安装Deepin 20.9也是相同的情况。</p>
<p>后来发现是因为Deepin系统安装时，需要选择高版本内核，对于Deepin 20.9和Deepin 23版本都一样：</p>
<p><strong>Deepin 20.9</strong></p>
<p><img src="/images/202412/07.png"></p>
<p><strong>Deepin 23</strong></p>
<p><img src="/images/202412/08.png"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin开机SMBus Timeout</title>
    <url>/2025/01/26/Deepin%E5%BC%80%E6%9C%BASMBus-Timeout/</url>
    <content><![CDATA[<p>Deepin 23在开机启动时，出现以下错误信息。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[    1.368406] i2c i2c-0: SMBus Timeout!</span><br><span class="line">[    1.368428] i2c i2c-0: Failed reset at end of transaction (01)</span><br><span class="line">[    1.368478] i2c i2c-0:Failed! (01)</span><br></pre></td></tr></table></figure>

<p>虽然不影响开机和使用，但开着还是不太爽。可以用以下方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/default/grub</span><br></pre></td></tr></table></figure>

<p>将以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;splash quiet &quot;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;splash quiet loglevel=3&quot;</span><br></pre></td></tr></table></figure>

<p>保存退出后，运行<code>update-grub</code>更新Grub配置。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Directory /tmp/hadoop-zhangjc/dfs/name is in an inconsistent state</title>
    <url>/2025/09/27/Directory-tmp-hadoop-zhangjc-dfs-name-is-in-an-inconsistent-state/</url>
    <content><![CDATA[<p>按照官网手册安装完单机 Hadoop 集群（见我的另外一篇文章：<a href="https://www.zhangjc.com/2025/09/27/%E6%90%AD%E5%BB%BA%E5%8D%95%E8%8A%82%E7%82%B9Hadoop%E9%9B%86%E7%BE%A4/">搭建单节点Hadoop集群</a>），电脑重启后，在启动 HDFS 时 NameNode 启动失败，出现以下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sbin/start-dfs.sh </span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">pdsh@frin: localhost: ssh exited with <span class="built_in">exit</span> code 1</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [frin]</span><br></pre></td></tr></table></figure>

<p>查看 NameNode 启动日志可以看到以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2024-08-10 21:02:21,500 ERROR org.apache.hadoop.hdfs.server.namenode.NameNode: Failed to start namenode.</span><br><span class="line">org.apache.hadoop.hdfs.server.common.InconsistentFSStateException: Directory /tmp/hadoop-zhangjc/dfs/name is in an inconsistent state: storage directory does not exist or is not accessible.</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.FSImage.recoverStorageDirs(FSImage.java:392)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.FSImage.recoverTransitionRead(FSImage.java:243)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.loadFSImage(FSNamesystem.java:1236)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.loadFromDisk(FSNamesystem.java:808)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.NameNode.loadNamesystem(NameNode.java:694)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.NameNode.initialize(NameNode.java:781)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.NameNode.&lt;init&gt;(NameNode.java:1033)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.NameNode.&lt;init&gt;(NameNode.java:1008)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.NameNode.createNameNode(NameNode.java:1782)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.namenode.NameNode.main(NameNode.java:1847)</span><br><span class="line">2024-08-10 21:02:21,501 INFO org.apache.hadoop.util.ExitUtil: Exiting with status 1: org.apache.hadoop.hdfs.server.common.InconsistentFSStateException: Directory /tmp/hadoop-zhangjc/dfs/name is in an inconsistent state: storage directory does not exist or is not accessible.</span><br><span class="line">2024-08-10 21:02:21,502 INFO org.apache.hadoop.hdfs.server.namenode.NameNode: SHUTDOWN_MSG: </span><br><span class="line">/************************************************************</span><br><span class="line">SHUTDOWN_MSG: Shutting down NameNode at frin/127.0.0.1</span><br><span class="line">************************************************************/</span><br></pre></td></tr></table></figure>

<p>这是因为 HDFS 的元数据信息默认存储在临时目录 tmp 中，机器重启后这些临时目录会被清理掉。增加以下配置：</p>
<p>etc&#x2F;hadoop&#x2F;hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///home/zhangjc/frin/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重新格式化 HDFS，并重启即可。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式存储</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>分布式存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Emacs列编辑</title>
    <url>/2025/09/28/Emacs%E5%88%97%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<p>推荐使用 rect-mark.el 插件，参考地址：<a href="https://www.emacswiki.org/emacs/RectangleMark">https://www.emacswiki.org/emacs/RectangleMark</a>。</p>
<p>在 Emacs 配置文件中（一般是 ~&#x2F;.emacs）添加以下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">;; 列编辑</span><br><span class="line">(require &#x27;rect-mark)</span><br><span class="line">(global-set-key (kbd &quot;C-x r C-w&quot;) &#x27;rm-kill-region)</span><br><span class="line">(global-set-key (kbd &quot;C-x r M-w&quot;) &#x27;rm-kill-ring-save)</span><br><span class="line">(global-set-key (kbd &quot;C-x r C-y&quot;) &#x27;yank-rectangle)</span><br><span class="line">(global-set-key (kbd &quot;C-x r C-M-d&quot;) &#x27;delete-rectangle)</span><br><span class="line">(global-set-key (kbd &quot;C-x r C-i&quot;) &#x27;string-insert-rectangle)</span><br><span class="line">(global-set-key (kbd &quot;C-x r C-M-i&quot;) &#x27;string-rectangle)</span><br></pre></td></tr></table></figure>

<p>在使用列编辑命令前，先使用快捷键 <code>Ctrl+@</code>（注意 @ 符需要使用 Shift 键）设置 Mark，并移动光标选中需要操作的区域。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Emacs</category>
      </categories>
      <tags>
        <tag>Emacs</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab + Jenkins + Nginx + Lua 实现代码自动分发</title>
    <url>/2019/03/13/GitLab-Jenkins-Nginx-Lua-%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E5%88%86%E5%8F%91/</url>
    <content><![CDATA[<p>在大数据Hive数据仓库的开发中，主要是shell + HQL的脚本开发。脚本的测试需要放到适当的大数据环境中进行。如果大家共用GitLab项目上的同一个Branch进行测试需要代码频繁合并，影响效率。我的思路是每个Developer在自己的Branch开发并经过测试后发起Merge Request。  </p>
<p>在我的开发场景中GitLab在内网中通过端口映射后允许从外网访问，GitLab中的IP都是内网的，GitLab上的项目链接地址都是内网的，如（ssh:&#x2F;&#x2F;<a href="mailto:&#103;&#105;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#49;&#46;&#x31;&#48;">&#103;&#105;&#x74;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#49;&#46;&#x31;&#48;</a>:50022&#x2F;test&#x2F;test.git）。并且我的Jenkins也是在内网中的，所以需要通过一层代理接收外部的REST API请求。这一点给最终的实现带来一些难点。</p>
<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p><img src="/images/202501/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BC%80%E5%8F%91%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png" alt="数据仓库开发测试代码分发流程"></p>
<h1 id="GitLab-项目配置"><a href="#GitLab-项目配置" class="headerlink" title="GitLab 项目配置"></a>GitLab 项目配置</h1><p>在GitLab项目上配置WebHook：<img src="/images/202501/GitLabWebHook.png" alt="GitLabWebHook"><br>这样每次项目的push操作都会向这个配置的URL发送一个Post请求。每次WebHook的执行情况可以点击WebHook后面的Edit按钮在编辑页面中查看。</p>
<h1 id="Nginx-Lua"><a href="#Nginx-Lua" class="headerlink" title="Nginx + Lua"></a>Nginx + Lua</h1><h2 id="OpenResty安装"><a href="#OpenResty安装" class="headerlink" title="OpenResty安装"></a>OpenResty安装</h2><p>直接使用推荐的预编译OpenResty安装。Centos 7.3执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install yum-utils</span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</span><br><span class="line"><span class="built_in">sudo</span> yum install openresty</span><br></pre></td></tr></table></figure>

<h2 id="安装OpenResty-Lua-HTTP客户端模块"><a href="#安装OpenResty-Lua-HTTP客户端模块" class="headerlink" title="安装OpenResty Lua HTTP客户端模块"></a>安装OpenResty Lua HTTP客户端模块</h2><p>下载GitHub项目代码：<a href="https://github.com/ledgetech/lua-resty-http">lua-resty-http</a><br>将lib&#x2F;resty目录下的两个文件http.lua和http_headers.lua放到OpenResty安装对应的目录下（如：&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;lualib&#x2F;resty）。</p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>nginx.conf配置内容如下。主要是使用Lua解析从GitLab WebHook发送来的数据，并解析需要的参数后通过Jenkins的REST API发送给Jenkins。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        content_by_lua_block &#123;</span><br><span class="line">            local cjson = require &quot;cjson&quot;</span><br><span class="line">            local http = require &quot;resty.http&quot;</span><br><span class="line">            local httpc = http.new()</span><br><span class="line"></span><br><span class="line">            ngx.req.read_body()</span><br><span class="line">            local data = ngx.req.get_body_data()</span><br><span class="line">            local json = cjson.decode(data)</span><br><span class="line">            local after = json[&quot;after&quot;]</span><br><span class="line">            if ( after == &quot;0000000000000000000000000000000000000000&quot; )</span><br><span class="line">            then</span><br><span class="line">                ngx.status = 200</span><br><span class="line">                ngx.say(&quot;delete branch do not need build&quot;)</span><br><span class="line">                return</span><br><span class="line">            end</span><br><span class="line"></span><br><span class="line">            local projectName = json[&quot;project&quot;][&quot;name&quot;]</span><br><span class="line">            local userName = json[&quot;user_name&quot;]</span><br><span class="line">            local ref = json[&quot;ref&quot;]</span><br><span class="line">            local branchName = string.sub(ref, 12)</span><br><span class="line">            if ( branchName == &quot;master&quot; )</span><br><span class="line">            then</span><br><span class="line">                ngx.status = 200</span><br><span class="line">                ngx.say(&quot;master branch do not need build&quot;)</span><br><span class="line">                return</span><br><span class="line">            end</span><br><span class="line"></span><br><span class="line">            local uri = &quot;http://172.16.72.200:8080/job/DataWarehouse/buildWithParameters?userName=&quot;</span><br><span class="line">            uri = uri..userName..&quot;&amp;branchName=&quot;..branchName..&quot;&amp;projectName=&quot;..projectName</span><br><span class="line">            local res, err = httpc:request_uri(uri, &#123;</span><br><span class="line">                method = &quot;POST&quot;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            ngx.status = res.status</span><br><span class="line">            ngx.say(res.body)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Jenkins项目配置"><a href="#Jenkins项目配置" class="headerlink" title="Jenkins项目配置"></a>Jenkins项目配置</h1><h2 id="配置参数化构建的项目"><a href="#配置参数化构建的项目" class="headerlink" title="配置参数化构建的项目"></a>配置参数化构建的项目</h2><p>注意参数名称与Lua发送请求的参数名称要对应，如下图：<img src="/images/202501/JenkinsProject1.png"></p>
<h2 id="代发分发逻辑"><a href="#代发分发逻辑" class="headerlink" title="代发分发逻辑"></a>代发分发逻辑</h2><p>在构建的Shell中实现代码分发到对应Developer的个人目录下：<img src="/images/202501/JenkinsProject2.png"></p>
]]></content>
      <categories>
        <category>系统架构</category>
        <category>CI</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>GitLab</tag>
        <tag>Jenkins</tag>
        <tag>Lua</tag>
        <tag>OpenResty</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee配置SSH公钥</title>
    <url>/2025/09/28/Gitee%E9%85%8D%E7%BD%AESSH%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<p>采用 SSH 协议同步 Git 仓库代码的好处就是高效。在配置好 SSH 公钥后，不需要每次操作都要输入用户名和密码（主要针对命令行来说）。</p>
<p>以我个人项目为例。</p>
<h1 id="生成-SSH-公钥"><a href="#生成-SSH-公钥" class="headerlink" title="生成 SSH 公钥"></a>生成 SSH 公钥</h1><ol>
<li>通过命令 ssh-keygen 生成 SSH Key：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;zhangjc&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-t key 类型</li>
<li>-C 注释</li>
<li>中间通过三次回车键确定，输出如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C <span class="string">&quot;zhangjc&quot;</span></span><br><span class="line">Generating public/private ed25519 key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/zhangjc/.ssh/id_ed25519): </span><br><span class="line">Created directory <span class="string">&#x27;/home/zhangjc/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/zhangjc/.ssh/id_ed25519</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/zhangjc/.ssh/id_ed25519.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:C/YxTF2P+qAR/xI0wfOkw13qvTo9siQGr+/erkOyvFA zhangjc</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+--[ED25519 256]--+</span></span><br><span class="line"><span class="string">|         .. .    |</span></span><br><span class="line"><span class="string">|         .oo.o.  |</span></span><br><span class="line"><span class="string">|        o.+*.o.  |</span></span><br><span class="line"><span class="string">|       o ++o+    |</span></span><br><span class="line"><span class="string">|      o E =o .   |</span></span><br><span class="line"><span class="string">|     . +.O.=. .  |</span></span><br><span class="line"><span class="string">|      ..++= +. . |</span></span><br><span class="line"><span class="string">|       .oo.=o +  |</span></span><br><span class="line"><span class="string">|        o==+== . |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看生成的 SSH 公钥和私钥：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> ~/.ssh/</span><br><span class="line">id_ed25519  id_ed25519.pub</span><br></pre></td></tr></table></figure>

<ul>
<li>私钥文件 id_ed25519</li>
<li>公钥文件 id_ed25519.pub</li>
</ul>
<ol start="3">
<li>查看公钥，显示内容如下（公钥中间部分以*号做了替换）：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br><span class="line">ssh-ed25519 AAAAC***nW zhangjc</span><br></pre></td></tr></table></figure>

<h1 id="设置账户-SSH-公钥"><a href="#设置账户-SSH-公钥" class="headerlink" title="设置账户 SSH 公钥"></a>设置账户 SSH 公钥</h1><p>通过主页右上角 「个人设置」-&gt;「安全设置」-&gt;「SSH 公钥」-&gt;「添加公钥」 ，添加生成的 public key 添加到当前账户中。</p>
<p>输入标题和刚才公钥的内容，保存即可。<br><img src="/images/202509/44.png"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Firefox默认在新标签页打开收藏栏链接</title>
    <url>/2025/03/31/Firefox%E9%BB%98%E8%AE%A4%E5%9C%A8%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%89%93%E5%BC%80%E6%94%B6%E8%97%8F%E6%A0%8F%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>选择Firefox浏览器，有两个理由：</p>
<ul>
<li>可以使用Firefox多端同步功能。</li>
<li>可以在浏览器内配置代理，方便抓包时的代理配置。</li>
</ul>
<p>虽然可以按下Ctrl键时点击链接，以在新标签页中打开，但每次操作还是太麻烦了。配置默认在新标签页打开链接，可以安装Firefox的扩展插件“Open bookmarks in new tab”。</p>
<p>在Firefox的“管理扩展”页面搜索“Open bookmarks in new tab”，找到对应的插件安装即可。安装完成后，再点击链接时，默认在新标签页打开。</p>
]]></content>
      <categories>
        <category>浏览器</category>
        <category>Firefox</category>
      </categories>
      <tags>
        <tag>Firefox</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题本地搜索功能不可用问题解决</title>
    <url>/2024/12/18/Hexo-Next%E4%B8%BB%E9%A2%98%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>按照Next主题官网配置步骤（<a href="https://theme-next.js.org/docs/third-party-services/search-services#Local-Search">Local Search</a>）配置后，站点的“搜索”菜单点击无响应。</p>
<p>查看Next主题源代码（{Next主题根目录}&#x2F;hexo-theme-next&#x2F;layout&#x2F;_partials&#x2F;search&#x2F;index.njk）,发现站点优先使用Algolia搜索。如下19行代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.algolia_search.enable or theme.local_search.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-pop-overlay&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup search-popup&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;search-icon&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-input-container&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">autocapitalize</span>=<span class="string">&quot;off&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;&#123;&#123; __(&#x27;search.placeholder&#x27;) &#125;&#125;&quot;</span> <span class="attr">spellcheck</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-input&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;popup-btn-close&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-times-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-result-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-result-icon&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;&#123;% if theme.algolia_search.enable %&#125;fab fa-algolia&#123;% elif theme.local_search.enable %&#125;fa fa-spinner fa-pulse&#123;% endif %&#125; fa-5x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>查看主题配置，Algolia和Local Searchs默认是同时启用的。修改配置禁用Algolia，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题集成百度统计</title>
    <url>/2024/12/20/Hexo-Next%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<p>首先，需要在百度统计控制台新增自己的站点。</p>
<p><img src="/images/202412/01.png"></p>
<p>点击“新增网站”按钮：</p>
<p><img src="/images/202412/02.png"></p>
<p>按照要求输入相关信息并保存，页面跳转至代码获取页面。从代码页面中拷贝网站的ID：</p>
<p><img src="/images/202412/03.png"></p>
<p>打开Next主题配置文件，并找到百度统计配置，参数值为上一步百度统计分类的网站ID。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Baidu Analytics</span><br><span class="line"># See: https://tongji.baidu.com</span><br><span class="line">baidu_analytics: 5c46************************e1de</span><br></pre></td></tr></table></figure>

<p>重新部署网站。</p>
<p>以上操作完成后，在百度统计控制台进行验证。</p>
<p><img src="/images/202412/04.png"></p>
<p>如下图，出现“代码安装正确”提示，则说明成功。</p>
<p><img src="/images/202412/05.png"></p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客生成标签和分类页</title>
    <url>/2024/12/17/Hexo%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%86%E7%B1%BB%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><p>默认情况下，Hexo站点创建后，需手动生成标签页。如不生成，在点击“标签”菜单时会出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Cannot GET /tags/</span><br></pre></td></tr></table></figure>

<p>执行以下命令创建标签页：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>以上命令会在站点下生成页面source&#x2F;tags&#x2F;index.md。打开并编辑该页面，内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2024-12-17 23:27:10</span><br><span class="line"><span class="section">type: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>以上内容的重点是设置页面type的值为tags。</p>
<h1 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h1><p>同标签页，创建命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>编辑source&#x2F;categories&#x2F;index.md内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2024-12-17 23:54:38</span><br><span class="line"><span class="section">type: categories</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo自动生成摘要</title>
    <url>/2024/12/21/Hexo%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<p>Hexo首页默认展示整篇内容，会导致首页非常冗长。虽然可以在头设置中指定摘要 excerpt: 值，或者在文章中使用 &lt;!-- more --&gt;，那么 &lt;!-- more --&gt; 之前的文字将会作为摘要。如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>

<p>更好的选项是，使用摘要自动生成插件 hexo-excerpt。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>可以通过在配置中设置深度（默认为10）来指定摘录的大小。</p>
<p>还可以使用 css 选择器从生成的摘录中排除某些标记。与任何选择器匹配的标记将被排除在外。</p>
<p>默认行为是只显示一个摘录，如果它不会是整篇文章。将 hideWholePostExcerpts 设置为 false 以覆盖它并显示整个文章摘要。</p>
<p>在站点配置文件中添加以下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 5</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 加载文件数据到表</title>
    <url>/2025/10/24/Hive-%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%88%B0%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="Loading-files-into-tables"><a href="#Loading-files-into-tables" class="headerlink" title="Loading files into tables"></a>Loading files into tables</h1><p>Hive 在加载数据进表的时候不会做任何转换。Load 操作只是纯粹将数据文件复制&#x2F;移动到 Hive 表关联的位置。</p>
<blockquote>
<p>注意：Hive 表字段分隔符必须与文件中数据字段分隔符一致。</p>
</blockquote>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA [<span class="keyword">LOCAL</span>] INPATH <span class="string">&#x27;filepath&#x27;</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1<span class="operator">=</span>val1, partcol2<span class="operator">=</span>val2 ...)]</span><br></pre></td></tr></table></figure>

<h1 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h1><ul>
<li>filepath 可以是：<ul>
<li>一个相对路径，如：project&#x2F;data1</li>
<li>一个绝对路径，如：&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
<li>带有方案和授权（可选）的完整 URI，如：hdfs:&#x2F;&#x2F;namenode:9000&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
</ul>
</li>
<li>加载的目标可以是表或者分区。如果表是分区的，则必须指定左右分区列的值来指定这个表特定的分区。</li>
<li>filepath 可以指向一个文件（在这种场景下 Hive 移动这个文件到表中）；或者它是一个目录（在这种场景下 Hive 移动目录下所有的文件到表中）。在两种场景下，filepath 指向一个文件集合。</li>
<li>如果指定了 LOCAL 关键字：<ul>
<li>load 命令将在本地文件系统查找 filepath。如果指定了一个相对地址，将解释为用户当前工作目录的相对路径。用户也可以为本地文件制定全 URI－如：file:&#x2F;&#x2F;&#x2F;user&#x2F;hive&#x2F;project&#x2F;data1</li>
<li>load 命令会尝试拷贝指定到 filepath 下的所有文件到目标文件系统。通过查看表的位置属性来推断目标文件系统。复制的数据文件将移动到这个表中。</li>
</ul>
</li>
<li>如果不指定 LOCAL 关键字，Hive 将使用 filepath 的全 URI（如果指定了一个），或者应用以下规则：<ul>
<li>如果方案和授权没有指定，Hive 将使用指定 Namenode URI 的 hadoop 配置参数 fs.default.name 中的方案和授权。</li>
<li>如果不是绝对路径，Hive 将相对于 &#x2F;user&#x2F;<username> 推断路径。</li>
<li>Hive 将移动 filepath 指向的文件到表（或分区）中。</li>
</ul>
</li>
<li>如果使用了 OVERWRITE 关键字，则目标表（或分区）中的内容将被 filepath 指向的文件删除和替换；否则 filepath 指向的文件将追加到表中。<ul>
<li>注意，如果目标表（分区）已经有一个与 filepath 下包含的名字冲突的文件，那么已经存在的文件将被新文件替换。</li>
</ul>
</li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>filepath 不能包含子目录。</li>
<li>如果不提供 LOCAL 关键字，filepath 必须跟指向表（或分区）位置相同的文件系统。</li>
<li>Hive 只做简单的检查来确保加载的文件跟表匹配。一般检查如果表是以 sequencefile 格式存储的，加载的文件也要是 sequencefile 文件，反过来亦然。</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据仓库</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hue Docker镜像构建异常：gnutls_handshake() failed</title>
    <url>/2021/09/03/Hue-Docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E5%BC%82%E5%B8%B8%EF%BC%9Agnutls-handshake-failed/</url>
    <content><![CDATA[<p>错误信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Cloning https://github.com/gethue/PyHive to /tmp/pip-req-build-86w_hwe4</span><br><span class="line">  Running command git clone -q https://github.com/gethue/PyHive /tmp/pip-req-build-86w_hwe4</span><br><span class="line">  fatal: unable to access &#x27;https://github.com/gethue/PyHive/&#x27;: gnutls_handshake() failed: The TLS connection was non-properly terminated.</span><br><span class="line">WARNING: Discarding git+https://github.com/gethue/PyHive. Command errored out with exit status 128: git clone -q https://github.com/gethue/PyHive /tmp/pip-req-build-86w_hwe4 Check the logs for full command output.</span><br><span class="line">ERROR: Command errored out with exit status 128: git clone -q https://github.com/gethue/PyHive /tmp/pip-req-build-86w_hwe4 Check the logs for full command output.</span><br><span class="line">The command &#x27;/bin/sh -c ./build/env/bin/pip install --no-cache-dir   psycopg2-binary   django_redis==4.11.0   flower   git+https://github.com/gethue/PyHive   git+https://github.com/bryanyang0528/ksql-python   pydruid   pybigquery   elasticsearch-dbapi   pyasn1==0.4.1   python-snappy==0.5.4   threadloop   sqlalchemy-clickhouse   infi.clickhouse_orm==1.0.4&#x27; returned a non-zero code: 1</span><br></pre></td></tr></table></figure>

<p>网上大都是说因为代理的问题，对我这个场景没用。通过搜索找到一个很好的代理：<a href="https://mirror.ghproxy.com/">https://mirror.ghproxy.com</a></p>
<p><code>desktop/core/requirements.txt</code>中以下位置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git+https://github.com/gethue/django-babel.git</span><br><span class="line">git+https://github.com/gethue/django-mako.git</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git+https://mirror.ghproxy.com/https://github.com/gethue/django-babel.git</span><br><span class="line">git+https://mirror.ghproxy.com/https://github.com/gethue/django-mako.git</span><br></pre></td></tr></table></figure>

<p>tools&#x2F;docker&#x2F;hue&#x2F;Dockerfile中以下位置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git+https://github.com/gethue/PyHive \</span><br><span class="line"># pyhive \</span><br><span class="line">#ksql \</span><br><span class="line">git+https://github.com/bryanyang0528/ksql-python \</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git+https://mirror.ghproxy.com/https://github.com/gethue/PyHive \</span><br><span class="line"># pyhive \</span><br><span class="line">#ksql \</span><br><span class="line">git+https://mirror.ghproxy.com/https://github.com/bryanyang0528/ksql-python \</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据探索</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>大数据</tag>
        <tag>Git</tag>
        <tag>Hue</tag>
        <tag>GitHub</tag>
        <tag>数据探索</tag>
      </tags>
  </entry>
  <entry>
    <title>Hue 编译异常：ImportError: cannot import name &#39;six&#39; from &#39;urllib3.packages&#39;</title>
    <url>/2020/06/23/Hue-%E7%BC%96%E8%AF%91%E5%BC%82%E5%B8%B8%EF%BC%9AImportError-cannot-import-name-six-from-urllib3-packages/</url>
    <content><![CDATA[<p>在编译Hue的时候出现错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Running &#x27;/home/zhangjc/ysten/git/ysten-hue/build/env/bin/hue makemigrations --noinput&#x27; with None</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/bin/hue&quot;, line 33, in &lt;module&gt;</span><br><span class="line">    sys.exit(load_entry_point(&#x27;desktop&#x27;, &#x27;console_scripts&#x27;, &#x27;hue&#x27;)())</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/manage_entry.py&quot;, line 225, in entry</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/lib/python3.7/site-packages/django/core/management/__init__.py&quot;, line 364, in execute_from_command_line</span><br><span class="line">    utility.execute()</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/lib/python3.7/site-packages/django/core/management/__init__.py&quot;, line 338, in execute</span><br><span class="line">    django.setup()</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/lib/python3.7/site-packages/django/__init__.py&quot;, line 27, in setup</span><br><span class="line">    apps.populate(settings.INSTALLED_APPS)</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/lib/python3.7/site-packages/django/apps/registry.py&quot;, line 108, in populate</span><br><span class="line">    app_config.import_models()</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/lib/python3.7/site-packages/django/apps/config.py&quot;, line 202, in import_models</span><br><span class="line">    self.models_module = import_module(models_module_name)</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/build/env/lib/python3.7/importlib/__init__.py&quot;, line 127, in import_module</span><br><span class="line">    return _bootstrap._gcd_import(name[level:], package, level)</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1006, in _gcd_import</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 983, in _find_and_load</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 967, in _find_and_load_unlocked</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 677, in _load_unlocked</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap_external&gt;&quot;, line 728, in exec_module</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 219, in _call_with_frames_removed</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/models.py&quot;, line 47, in &lt;module&gt;</span><br><span class="line">    from useradmin.models import User, Group, get_organization</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/apps/useradmin/src/useradmin/models.py&quot;, line 56, in &lt;module&gt;</span><br><span class="line">    from desktop.lib.connectors.models import _get_installed_connectors, Connector</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/connectors/models.py&quot;, line 29, in &lt;module&gt;</span><br><span class="line">    from desktop.lib.connectors.types import get_connectors_types</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/connectors/types.py&quot;, line 24, in &lt;module&gt;</span><br><span class="line">    from desktop.lib.exceptions_renderable import PopupException</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/exceptions_renderable.py&quot;, line 31, in &lt;module&gt;</span><br><span class="line">    import desktop.lib.django_util</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/django_util.py&quot;, line 42, in &lt;module&gt;</span><br><span class="line">    import desktop.lib.thrift_util</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/thrift_util.py&quot;, line 49, in &lt;module&gt;</span><br><span class="line">    from desktop.lib.thrift_.http_client import THttpClient</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/thrift_/http_client.py&quot;, line 26, in &lt;module&gt;</span><br><span class="line">    from desktop.lib.rest.http_client import HttpClient</span><br><span class="line">  File &quot;/home/zhangjc/ysten/git/ysten-hue/desktop/core/src/desktop/lib/rest/http_client.py&quot;, line 32, in &lt;module&gt;</span><br><span class="line">    from urllib3.contrib import pyopenssl</span><br><span class="line">  File &quot;/usr/lib/python3/dist-packages/urllib3/contrib/pyopenssl.py&quot;, line 62, in &lt;module&gt;</span><br><span class="line">    from ..packages import six</span><br><span class="line">ImportError: cannot import name &#x27;six&#x27; from &#x27;urllib3.packages&#x27; (/usr/lib/python3/dist-packages/urllib3/packages/__init__.py)</span><br></pre></td></tr></table></figure>

<p>错误原因：根据错误信息可以看到是“&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3”这个包的问题。正确的应该是引用“build&#x2F;env&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;”下的包。查看”&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3”下的包信息，发现包版本比较低。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /usr/lib/python3/dist-packages/</span><br><span class="line">drwxr-xr-x  6 root root   4096 1月  13 17:07 urllib3</span><br><span class="line">drwxr-xr-x  2 root root   4096 1月  13 17:06 urllib3-1.22.egg-info</span><br></pre></td></tr></table></figure>

<p>解决方法：删除有问题的包后再试成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/lib/python3/dist-packages/urllib3*</span><br></pre></td></tr></table></figure>

<p>查看“build&#x2F;env&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;”下的urllib3包信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l build/env/lib/python3.7/site-packages/|grep urllib3</span><br><span class="line">drwxr-xr-x  6 zhangjc zhangjc   4096 6月  23 17:06 urllib3</span><br><span class="line">drwxr-xr-x  2 zhangjc zhangjc   4096 6月  23 17:06 urllib3-1.25.9.dist-info</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据探索</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hue</tag>
        <tag>数据探索</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JConsole远程连接错误解决</title>
    <url>/2021/09/07/JConsole%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>程序启动命令及参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java -Dcom.sent.jmxremote.ssl=false -jar math-game.jar</span><br></pre></td></tr></table></figure>

<p>防火墙已经放开30000端口访问，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">telnet 192.168.72.156 30000</span></span><br><span class="line">Trying 192.168.72.156...</span><br><span class="line">Connected to 192.168.72.156.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br></pre></td></tr></table></figure>

<p>异常界面如下：</p>
<p><img src="/images/202502/jconsole_security_failed.png" alt="安全连接失败"></p>
<p>点击“不安全的连接”异常界面如下：</p>
<p><img src="/images/202502/jconsole_not_security_failed.png" alt="非安全连接失败"></p>
<p>最终还是防火墙的问题。网上大都是直接关闭了防火墙，所以问题可以解决。但对于服务器来说，直接关闭防火墙是存在比较大安全隐患的，尤其是暴露在公网上的服务器。用netstat查看进程监听的所有端口，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -ntlp | grep 30000</span></span><br><span class="line">tcp6       0      0 :::30000                :::*                    LISTEN      24488/java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netstat -ntlp | grep 24488</span></span><br><span class="line">tcp6       0      0 :::24605                :::*                    LISTEN      24488/java          </span><br><span class="line">tcp6       0      0 :::19170                :::*                    LISTEN      24488/java          </span><br><span class="line">tcp6       0      0 :::30000                :::*                    LISTEN      24488/java</span><br></pre></td></tr></table></figure>

<p>通过上面的信息可以看出，我们启动的应用程序共监听了3个端口。放开3个端口的访问，再次连接成功。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ImportError: libffi.so.5: cannot open shared object file: No such file or directory</title>
    <url>/2019/10/10/ImportError-libffi-so-5-cannot-open-shared-object-file-No-such-file-or-directory/</url>
    <content><![CDATA[<p>在CentOS7.4中通过源码的方式安装Requests时，报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip3 install .</span></span><br><span class="line">Processing /data/setup/psf-requests-fab1fd1</span><br><span class="line">    ERROR: Command errored out with <span class="built_in">exit</span> status 1:</span><br><span class="line">     <span class="built_in">command</span>: /opt/Python-3.7.2/bin/python3.7 -c <span class="string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;/tmp/pip-req-build-nuwyypgj/setup.py&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;; __file__=&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;/tmp/pip-req-build-nuwyypgj/setup.py&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;open&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;\r\n&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;, &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;\n&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;exec&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;))&#x27;</span> egg_info --egg-base pip-egg-info</span><br><span class="line">         cwd: /tmp/pip-req-build-nuwyypgj/</span><br><span class="line">    Complete output (11 lines):</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      File <span class="string">&quot;/opt/Python-3.7.2/lib/python3.7/site-packages/setuptools/__init__.py&quot;</span>, line 18, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        from setuptools.dist import Distribution, Feature</span><br><span class="line">      File <span class="string">&quot;/opt/Python-3.7.2/lib/python3.7/site-packages/setuptools/dist.py&quot;</span>, line 31, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        from setuptools import windows_support</span><br><span class="line">      File <span class="string">&quot;/opt/Python-3.7.2/lib/python3.7/site-packages/setuptools/windows_support.py&quot;</span>, line 2, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        import ctypes</span><br><span class="line">      File <span class="string">&quot;/opt/Python-3.7.2/lib/python3.7/ctypes/__init__.py&quot;</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        from _ctypes import Union, Structure, Array</span><br><span class="line">    ImportError: libffi.so.5: cannot open shared object file: No such file or directory</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with <span class="built_in">exit</span> status 1: python setup.py egg_info Check the logs <span class="keyword">for</span> full <span class="built_in">command</span> output.</span><br></pre></td></tr></table></figure>

<p>其实在CentOS7.4下已经存在libffi.so.6，解决方法是创建软连接，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /usr/lib64</span></span><br><span class="line"><span class="comment"># ln -s libffi.so.6 libffi.so.5</span></span><br><span class="line"><span class="comment"># ln -s libffi.so.6.0.1 libffi.so.5.0.1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Requests</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Python</tag>
        <tag>Requests</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter 测试 MongoDB</title>
    <url>/2025/10/27/JMeter-%E6%B5%8B%E8%AF%95-MongoDB/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Apache JMeter 是一个 100% 纯 Java 应用程序，设计来做“客户端&#x2F;服务器”软件（例如 Web 应用程序）。它可以用来测试静态和动态资源的性能，例如静态文件、Java Servlets、ASP.NET、PHP、CGI 脚本、Java 对象、数据库、FTP 服务器，还有更多。JMeter 可以给服务器、网络或对象模拟重负载来测试它的强度或者分析不同负载类型下的综合性能。</p>
<p>此外，通过创建断言脚本验证应用程序是否返回期望的结果，JMeter可以帮助回归测试你的应用程序。为了最大的灵活性，JMeter 允许用正则表达式创建断言。</p>
<p>但是请注意，JMeter 不是一个浏览器，它在协议层运行。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载网址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a>。首先正确安装 JRE&#x2F;JDK，并且设置了 JAVA_HOME 变量。解压下载的文件包到安装目录。</p>
<h1 id="运行-JMeter"><a href="#运行-JMeter" class="headerlink" title="运行 JMeter"></a>运行 JMeter</h1><p>运行 bin 目录下的 jmeter 启动 JMeter，很快 JMeter 的图形界面就会出现。</p>
<h1 id="创建数据库测试计划"><a href="#创建数据库测试计划" class="headerlink" title="创建数据库测试计划"></a>创建数据库测试计划</h1><p>本文创建 50 个用户向 MongoDB 服务器发送同一个 Collection 的 Insert Document 请求各 1000 次。因此，总共会像 MongoDB 发送 50 × 1000 &#x3D; 50000 次 Insert 请求。构建本次测试，需要用到以下组件：Thread Group、JDBC Request、Summary Report。</p>
<h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><p>用 JMeter 做的所有测试计划的第一步就是添加 Thread Group 组件。Thread Group 组件告诉 JMeter 模拟多少个用户、多久发送一个请求，以及发送多少次请求。</p>
<p>选中左侧窗格中的测试计划，点击鼠标右键。在弹出的菜单选择菜单项：添加 -&gt; Threads(Users) -&gt; 线程组。添加之后，在右边的窗格就可以看到 Thread Group 的控制面板。配置参数如下：</p>
<ul>
<li>名称：MongoDB Thread Group</li>
<li>线程数：50</li>
<li>Ramp-Up Period(in seconds)：10。该参数告诉 JMeter 延迟多长时间启动所有用户，此处设为 10，JMeter 在 10 秒内完成所有用户的启动，也就是每隔 200 毫秒启动一个用户（10s &#x2F; 50 &#x3D; 0.2）。如果设为 0，则 JMeter 会立即启动所有用户。</li>
<li>循环次数：1000。这个参数告诉 JMeter 重复多少次测试。要永久重复则选中“永远”选择框。</li>
</ul>
<p>配置后的参数如图：<br><img src="/images/202510/25.jpg"></p>
<h1 id="添加-MongoDB-Source-Config"><a href="#添加-MongoDB-Source-Config" class="headerlink" title="添加 MongoDB Source Config"></a>添加 MongoDB Source Config</h1><p>选中刚才添加的 MongoDB Thread Group，点右键，在右键菜单选择菜单项：添加 -&gt; 配置元件 -&gt; MongoDB Source Config。配置面板同样在右侧窗格展示。参数配置如下：</p>
<ul>
<li>名称：MongoDB Source Config</li>
<li>Server Address List：127.0.0.1</li>
<li>MongoDB Source：jmeterMongoDBSource</li>
</ul>
<p>其他参数保持默认，如图：<br><img src="/images/202510/26.jpg"></p>
<h1 id="添加-MongoDB-Script"><a href="#添加-MongoDB-Script" class="headerlink" title="添加 MongoDB Script"></a>添加 MongoDB Script</h1><p>同样选中 MongoDB Thread Group，点右键，在右键菜单选择菜单项：添加 -&gt; Sampler -&gt; MongoDB Script。右侧窗格展示配置面板，参数配置如下：</p>
<ul>
<li>MongoDB Source：jmeterMongoDBSource，与　MongoDB Source Config　中配置的一致。</li>
<li>Database Name：test</li>
<li>Script：db.jmeter.insert({ “p1” : “0”, “p2” : “00”, “bd” : “HUAWEI”, “p3” : “001”, “lo” : “110.802298”, “pcode” : “010110468”, “nt” : “wifi”, “imsi” : “-“, “uuid” : “49d66ae4a91b679a78d08ea4d61b7861_1460615318980” })</li>
</ul>
<p>其他参数保持默认，如图：<br><img src="/images/202510/27.jpg"></p>
<h1 id="添加察看结果树和聚合报告"><a href="#添加察看结果树和聚合报告" class="headerlink" title="添加察看结果树和聚合报告"></a>添加察看结果树和聚合报告</h1><p>还是选中 MongoDB Thread Group，点右键，在右键菜单选择菜单项：添加 -&gt; 监听器 -&gt; 察看结果树 和 聚合报告。</p>
<p>点击“启动”按钮开始测试。结果如图：<br><img src="/images/202510/28.jpg"></p>
]]></content>
      <categories>
        <category>软件测试</category>
        <category>压力测试</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
        <tag>软件测试</tag>
        <tag>压力测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hue UI展示中文</title>
    <url>/2020/09/17/Hue-UI-%E5%B1%95%E7%A4%BA%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<p>如果使用开发分支代码如master分支）编译安装，需要自己编译语言文件。例如Hue安装目录为“&#x2F;opt&#x2F;hue”，则安装后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/hue</span><br><span class="line">$ make locales</span><br></pre></td></tr></table></figure>

<p>如果需要则重启Hue即可。是否需要重启我没有验证：）</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据探索</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hue</tag>
        <tag>数据探索</tag>
      </tags>
  </entry>
  <entry>
    <title>Hue Load Balance配置</title>
    <url>/2020/11/18/Hue-Load-Balance%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>直接上配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  server_name 192.168.72.31;</span><br><span class="line">  listen 8001;</span><br><span class="line">  </span><br><span class="line">  charset utf-8;</span><br><span class="line">  </span><br><span class="line">  proxy_connect_timeout 600s;</span><br><span class="line">  proxy_read_timeout 600s;</span><br><span class="line">  proxy_send_timeout 600s;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header Host $http_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-For $http_x_forwarded_for;</span><br><span class="line">    </span><br><span class="line">    proxy_pass http://hue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream hue &#123;</span><br><span class="line">  hash $cookie_sessionid;</span><br><span class="line">  </span><br><span class="line">  server 192.168.72.22:8888 max_fails=3;</span><br><span class="line">  server 192.168.72.31:8888 max_fails=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点是调整<code>upstream hash</code>的策略。因为Hue是需要保持session的，同一个session的请求需要发送到同一台后端服务器上。简单的可以采用ip_hash策略，这个策略存在两个重要的问题：</p>
<ul>
<li>对隐藏在局域网后的用户不起作用。</li>
<li>ip_hash只取IPV4的前三段值做Hash，在非公网大并发场景下会出现负载非常不均衡的情况。参见：<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash">http://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash</a></li>
</ul>
<p>基于以上两点修改了Nginx的配置采用<code>$cookie_sessionid</code>做为hash值，达到session级别的负载均衡。</p>
<p>主要的问题其实是这种方式未做到按照后端服务器实际负载再按照session级别来分配请求。后续打算研究HAProxy是否可以做到。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据探索</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>大数据</tag>
        <tag>Hue</tag>
        <tag>数据探索</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM可用的垃圾回收器</title>
    <url>/2021/08/27/JVM%E5%8F%AF%E7%94%A8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="垃圾收集器分类"><a href="#垃圾收集器分类" class="headerlink" title="垃圾收集器分类"></a>垃圾收集器分类</h1><p>Java HotSpot VM有三种不同类型的收集器，每种收集器具有不同的性能特征。</p>
<ul>
<li>串行收集器使用单个线程来执行所有垃圾收集工作，这使得它相对高效，因为线程之间没有通信开销。它最适合单处理器机器，因为它不能利用多处理器硬件，尽管它对于具有小数据集（最多约100MB）的应用程序在多处理器上很有用。在某些硬件和操作系统配置上默认选择串行收集器，或者可以使用选项显式启用-XX:+UseSerialGC。</li>
<li>并行收集器（也称为吞吐量收集器）并行执行次要收集，这可以显著减少垃圾收集开销。它适用于在多处理器或多线程硬件上运行的具有中型到大型数据集的应用程序。并行收集器在某些硬件和操作系统配置上默认选择，或者可以使用选项显式启用-XX:+UseParallelGC。并行压缩是一个特性，它使并行收集器能够并行执行主要收集。如果没有并行压缩，主要收集是使用单个线程执行的，这会显着限制可伸缩性。如果-XX:+UseParallelGC已指定该选项，则默认情况下启用并行压缩。关闭它的选项是-XX:-UseParallelOldGC。</li>
<li>大多数并发收集器并发地执行其大部分工作（例如，当应用程序仍在运行时）以保持垃圾收集暂停较短。它专为具有中型到大型数据集的应用程序而设计，其中响应时间比总吞吐量更重要，因为用于最小化暂停的技术会降低应用程序性能。Java HotSpot VM提供了两个主要并发收集器之间的选择；请参阅<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/concurrent.html#mostly_concurrent">主要的并发收集器</a>。使用该选项-XX:+UseConcMarkSweepGC启用CMS收集器或-XX:+UseG1GC启用G1收集器。</li>
</ul>
<h1 id="选择垃圾收集器"><a href="#选择垃圾收集器" class="headerlink" title="选择垃圾收集器"></a>选择垃圾收集器</h1><p>除非您的应用程序对暂停时间有相当严格的要求，否则首先运行您的应用程序并允许VM选择垃圾收集器。如有必要，调整堆大小以提高性能。如果性能仍不能满足您的目标，请使用以下指南作为选择收集器的起点。</p>
<ul>
<li>如果应用程序的数据集很小（最多大约100MB），则使用-XX:+UseSerialGC选项选择串行收集器。</li>
<li>如果应用程序将在单个处理器上运行并且没有暂停时间要求，那么让VM选择收集器，或者使用-XX:+UseSerialGC选项选择串行收集器。</li>
<li>如果同时满足以下两点，那么让VM选择收集器，或者使用-XX:+UseParallelGC选项选择并行收集器。<ul>
<li>使应用程序达到最高的性能是第一优先级</li>
<li>没有暂停时间要求或1秒及更长的暂停是可以接受的</li>
</ul>
</li>
<li>如果响应时间比总吞吐量更重要并且垃圾收集暂停必须保持短于大约1秒，则使用-XX:+UseConcMarkSweepGC或-XX:+UseG1GC选项选择并发收集器。</li>
</ul>
<p>这些指南仅提供了选择收集器的起点，因为性能取决于堆的大小、应用程序维护的实时数据量以及可用处理器的数量和速度。暂停时间对这些因素特别敏感，因此前面提到的1秒阈值只是一个近似值：并行收集器在很多数据大小和硬件组合上会遇到超过1秒的暂停时间；相反，并发收集器可能无法在某些硬件组合上保持短于1秒的暂停。</p>
<p>如果推荐的收集器没有达到所需的性能，首先尝试调整堆和代大小以满足所需的目标。如果性能仍然不足，则尝试不同的收集器：使用并发收集器减少暂停时间并使用并行收集器增加多处理器硬件上的总体吞吐量。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Socket 多线程实例</title>
    <url>/2025/10/19/Java-Socket-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java 网络编程的客户端和服务端编写都非常简单。客户端使用 Socket 对象与服务端交互；服务端创建 ServerSocket 对象，然后使用accept()方法进行监听，并返回一个Socket的对象。accept 方法是阻塞调用，并将一直阻塞，直到接收到下一个客户端请求为止。非多线程情况下，服务器同时只能服务一个客户端。这通常是不能满足现实需求的。</p>
<p>对于现实场景是通过在服务端创建多个线程来服务多个客户端，如下图：<br><img src="/images/202510/18.jpg"></p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoMultiServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService threadPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        threadPool = Executors.newCachedThreadPool();</span><br><span class="line">        threadPool.submit(<span class="keyword">new</span> <span class="title class_">Monitor</span></span><br><span class="line"></span><br><span class="line">());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Server listening on port 10000 ....&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Hit Enter to stop the server&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread created&quot;</span>);</span><br><span class="line">                threadPool.submit(<span class="keyword">new</span> <span class="title class_">EchoThread</span></span><br><span class="line"></span><br><span class="line">(socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Server is down&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutdownServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Monitor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (System.in.read() != <span class="string">&#x27;\n&#x27;</span>) &#123;&#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            shutdownServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EchoThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EchoThread</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            is.read(buffer);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            os.write(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoMultiClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            counter++;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Client</span>(counter)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Client</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> counter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Client</span><span class="params">(<span class="type">int</span> counter)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.counter = counter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>();</span><br><span class="line">                socket.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">10000</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello from Client &quot;</span> + counter;</span><br><span class="line">                    os.write(str.getBytes());</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is);</span><br><span class="line">                    <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                        System.out.println(scanner.nextLine());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    scanner.close();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java读取Properties文件的方法</title>
    <url>/2017/09/28/Java-%E8%AF%BB%E5%8F%96-Properties-%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Java读取Properties文件有两种简单方法，就是使用ClassLoader中的资源读取方法。</p>
<ul>
<li>public InputStream getResourceAsStream(String name)<br>  该方法是非静态方法，所以不能在静态代码中使用。</li>
<li>public static InputStream getSystemResourceAsStream(String name)<br>  该方法是静态方法，可以在静态代码中使用。</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins REST API</title>
    <url>/2025/10/27/Jenkins-REST-API/</url>
    <content><![CDATA[<h1 id="buildWithParameters（参数化构建项目）"><a href="#buildWithParameters（参数化构建项目）" class="headerlink" title="buildWithParameters（参数化构建项目）"></a>buildWithParameters（参数化构建项目）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=http://<span class="variable">$&#123;ip&#125;</span>:<span class="variable">$&#123;port&#125;</span>/job/<span class="variable">$&#123;projectName&#125;</span>/buildWithParameters?args=<span class="variable">$&#123;argsValue&#125;</span></span><br><span class="line">curl -X POST <span class="variable">$&#123;url&#125;</span> --user <span class="variable">$&#123;userName&#125;</span>:<span class="variable">$&#123;password&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>url – 完整的 REST API 请求地址，包含请求参数</li>
<li>ip – Jenkins Master 主机的ip地址（如果有域名可以使用域名）</li>
<li>port – Jenkins 服务监听端口</li>
<li>projectName – Jenkins 通过参数构建的项目的名称</li>
<li>args – 要构建项目配置的构建时需要输入参数的名称，在构建任务内部可以通过 ${args} 获取输入的值（以 shell 为例）</li>
<li>argsValue – 构建时需要输入的参数值</li>
<li>curl -X POST – 以 POST 方法请求</li>
<li>userName – 具有构建项目权限的用户名</li>
<li>password – 具有构建项目权限的用户的口令</li>
</ul>
<p>注意：</p>
<ul>
<li>如果参数中包含 url 保留字符或者中文需要做 url 编码，如：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=http://<span class="variable">$&#123;ip&#125;</span>:<span class="variable">$&#123;port&#125;</span>/job/<span class="variable">$&#123;projectName&#125;</span>/buildWithParameters?args=a b</span><br></pre></td></tr></table></figure>

<p>url 编码后变为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=http://<span class="variable">$&#123;ip&#125;</span>:<span class="variable">$&#123;port&#125;</span>/job/<span class="variable">$&#123;projectName&#125;</span>/buildWithParameters?args=a%20b</span><br></pre></td></tr></table></figure>

<ul>
<li>如果 Jenkins 设置匿名用户可以触发构建，则 –user 参数可以不用。安全考虑应禁用匿名用户触发构建。</li>
</ul>
<h1 id="Disable-Enable（禁用-启用项目）"><a href="#Disable-Enable（禁用-启用项目）" class="headerlink" title="Disable&#x2F;Enable（禁用&#x2F;启用项目）"></a>Disable&#x2F;Enable（禁用&#x2F;启用项目）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://<span class="variable">$&#123;ip&#125;</span>:<span class="variable">$&#123;port&#125;</span>/job/<span class="variable">$&#123;projectName&#125;</span>/enable</span><br><span class="line">http://<span class="variable">$&#123;ip&#125;</span>:<span class="variable">$&#123;port&#125;</span>/job/<span class="variable">$&#123;projectName&#125;</span>/disable</span><br></pre></td></tr></table></figure>

<p>项目禁用后，该项目在构建队列中的任务不会再构建。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins protoc: command not found</title>
    <url>/2019/03/20/Jenkins-protoc-command-not-found/</url>
    <content><![CDATA[<p>在使用Jenkins编译Hadoop3.1.2时报错信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[INFO] --- hadoop-maven-plugins:3.1.2:protoc (compile-protoc) @ hadoop-common ---</span><br><span class="line">[WARNING] [protoc, --version] failed: java.io.IOException: Cannot run program &quot;protoc&quot;: error=13, 权限不够</span><br><span class="line">[ERROR] stdout: []</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>原因是Jenkins中找不到protoc命令。解决方法是在Jenkins中配置环境变量PATH指定protoc路径。</p>
<p><img src="/images/202502/jenkins-path.png" alt="jenkins path"></p>
<p>再次执行发现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">protoc: error while loading shared libraries: libprotobuf.so.8: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>解决方法跟PATH配置一样道理，配置一个新的环境变量LD_LIBRARY_PATH：</p>
<p><img src="/images/202502/jenkins-LD_LIBRARY_PATH.png" alt="jenkins LD_LIBRARY_PATH"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins安装插件网络错误问题解决</title>
    <url>/2019/03/01/Jenkins-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>Jenkins安装插件时报网络不通的错误，根据错误信息看是连接<a href="https://www.google.com/">https://www.google.com</a>网络不通。解决这个问题的方法是修改“Update Site”的URL地址，将默认地址由https改为http。<br>“Update Site”配置项位置在“插件管理-&gt;Advanced”中，修改后如下图：</p>
<p><img src="/images/202502/jenkinsUpdateSite.png" alt="Jenkins Update Site"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins重启后Maven的Project加载失败</title>
    <url>/2019/03/19/Jenkins-%E9%87%8D%E5%90%AF%E5%90%8E-Maven-%E7%9A%84-Project-%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>Jenkins重启后发现Maven的项目都没有正常加载。检查Jenkins的启动日志发现以下错误信息：</p>
<pre><code class="Text">java.io.IOException: Unable to read /home/jenkins/.jenkins/jobs/test-maven/config.xml
    at hudson.XmlFile.read(XmlFile.java:149)
    at hudson.model.Items.load(Items.java:371)
    at jenkins.model.Jenkins$14.run(Jenkins.java:3128)
    at org.jvnet.hudson.reactor.TaskGraphBuilder$TaskImpl.run(TaskGraphBuilder.java:169)
    at org.jvnet.hudson.reactor.Reactor.runTask(Reactor.java:296)
    at jenkins.model.Jenkins$5.runTask(Jenkins.java:1069)
    at org.jvnet.hudson.reactor.Reactor$2.run(Reactor.java:214)
    at org.jvnet.hudson.reactor.Reactor$Node.run(Reactor.java:117)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)
Caused by: com.thoughtworks.xstream.mapper.CannotResolveClassException: maven2-moduleset
    at com.thoughtworks.xstream.mapper.DefaultMapper.realClass(DefaultMapper.java:79)
    at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
    at com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass(DynamicProxyMapper.java:55)
    at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
    at com.thoughtworks.xstream.mapper.PackageAliasingMapper.realClass(PackageAliasingMapper.java:88)
    at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
</code></pre>
<p>将Maven Integration plugin重装并重启Jenkins后恢复正常。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Java</tag>
        <tag>CI/CD</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 单例模式</title>
    <url>/2025/10/26/Java-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>单例模式是 Java 程序设计最常用的设计模式之一。在 Java 语言中，单例模式有几种不同的实现方式。从实例创建时机分为两大类：</p>
<ul>
<li>懒汉式：在需要时才创建类唯一的实例。</li>
<li>饿汉式：在类文件加载时创建类唯一的实例。</li>
</ul>
<p>一、懒汉式</p>
<p>根据有锁、无锁及锁级别的不同可以有三种实现方式。</p>
<p>1、最简单的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton single=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (single == <span class="literal">null</span>) &#123;</span><br><span class="line">      single = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> single;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法通过私有化构造方法，并且提供生成类对象的静态 getInstance 方法来保证该类只生成一个实例。</p>
<p>但是，这种方式只能用在非多线程并发的场景。</p>
<p>2、方法锁的实现</p>
<p>为了解决实现 1 不能在多线程场景下使用的问题，给 getInstance 方法做线程同步是一种简单的实现方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton single=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (single == <span class="literal">null</span>) &#123;</span><br><span class="line">      single = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> single;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法解决了多线程同步问题，保证在多线程场景下也只生成一个实例。但每次调用 getInstance 方法都需要做线程间同步会非常浪费资源。只需要在实例还未生成时才需要做线程同步，实例生成以后直接使用即可，所以就有了方法 3 。</p>
<p>3、双重检查锁定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton single=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">          singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该实现方式避免了多线程场景下每次都做线程同步的问题，但在实例生成之前线程间仍然是需要做线程同步的。但该方法还是需要线程之间的同步，如果实例初始化比较复杂或者需要的时间比较长会阻塞很多线程等待。方法 4 完全不需要线程间同步。</p>
<p>4、静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法通过类加载器在加载 LazyHolder 类并初始化时生成 Singleton 类的实例来保障单例。</p>
<blockquote>
<p>猜想：该方法并非完全不做线程同步。只不过在多线程场景下，多线程同步是由类加载器或者 JVM 来完成的。只是不需要业务程序代码做线程同步的工作。猜想是否正确还需要做更深的研究。</p>
</blockquote>
<p>二、饿汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">single</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> single;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法跟懒汉式方法 4 很相似，只是类实例生成时间不同。懒汉式方法 4 类的唯一实例是在调用 getInstance 方法时才会生成；而该方法是在类加载时就会生成类的唯一实例。两种方法都是通过类加载器保障保证单例。</p>
<p><strong>总结：</strong></p>
<p>不同的应用场景可以灵活选择实现方法：</p>
<ul>
<li>非多线程场景可以采用懒汉式方法 1 就够了，简单。</li>
<li>多线程场景下，如果实例初始化不需要其他参数的时候（生成实例时调用无参构造方法），使用懒汉式方法 4。</li>
<li>多线程场景下，如果实例初始化时需要其他参数（生成实例时调用带参数的构造方法），使用懒汉式方法 3。</li>
<li>饿汉式的优势是类加载时唯一实例就生成了，多线程使用时可以减少延迟。但即使不使用该实例，类加载时也会生成一个实例在内存中。基本属于空间换时间的情况。内存不敏感的场景比较适合使用。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>单例模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 项目迁移</title>
    <url>/2025/10/13/Jenkins-%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><ul>
<li>停止 Jenkins 服务。</li>
<li>备份整个 $JENKINS_HOME 目录。Linux 示例:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -czf jenkins_home_backup.tar.gz /var/lib/jenkins/</span><br></pre></td></tr></table></figure>

<h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><p>因升级并搭建了新的 Jenkins 环境，所以只迁移原来的 Job。</p>
<ol>
<li>复制任务文件夹：</li>
</ol>
<p>在 $JENKINS_HOME&#x2F;jobs&#x2F; 目录下，每个任务都有一个对应的文件夹。将需要迁移任务的文件夹复制到新服务器的相同路径下。</p>
<ol start="2">
<li>重新加载</li>
</ol>
<p>复制后，需要在 Jenkins 的 “系统管理” -&gt; “读取配置” 页面点击一下，让 Jenkins 重新加载磁盘上的配置。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetty 嵌入式 HelloWorld</title>
    <url>/2025/10/27/Jetty-%E5%B5%8C%E5%85%A5%E5%BC%8F-HelloWorld/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Jetty 是一个开源的项目，提供 HTTP 服务端、HTTP 客户端和 javax.servlet 容器。下面看如何利用 Jetty 的 API 快速开发嵌入式代码。</p>
<h1 id="下载-Jar-包"><a href="#下载-Jar-包" class="headerlink" title="下载 Jar 包"></a>下载 Jar 包</h1><p>Jetty 被分解很多 jar 包和依赖包，通过选择 jar 包的最小集合达到占用最小空间的目的。通常，最好使用像 Maven 一样的工具管理 jar 包，但本例中使用包含 Jetty 所有类的聚合 jar 包。可以用 curl 命令或者浏览器手动下载 <a href="https://link.zhihu.com/?target=http://central.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/9.3.7.v20160115/jetty-all-9.3.7.v20160115-uber.jar">jetty-all.jar</a>。</p>
<p>像下面这样使用 curl 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Demo</span><br><span class="line"><span class="built_in">cd</span> Demo</span><br><span class="line">curl -o jetty-all-uber.jar http://central.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/9.3.7.v20160115/jetty-all-9.3.7.v20160115-uber.jar</span><br></pre></td></tr></table></figure>

<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>Jetty 官方文档中的 嵌入 Jetty一章有很多通过 Jetty API 编写的实例。本教程用只包含一个 Main 方法的简单 HelloWorld 处理器运行服务器。HelloWorld.java 文件代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Request;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.AbstractHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        baseRequest.setHandled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line">        server.setHandler(<span class="keyword">new</span> <span class="title class_">HelloWorld</span>());</span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="编译-HelloWorld"><a href="#编译-HelloWorld" class="headerlink" title="编译 HelloWorld"></a>编译 HelloWorld</h1><p>下面的命令编译 HelloWorld 类：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> classes</span><br><span class="line">javac -d classes -<span class="built_in">cp</span> jetty-all-uber.jar HelloWorld.java</span><br></pre></td></tr></table></figure>

<h1 id="运行处理器和服务器"><a href="#运行处理器和服务器" class="headerlink" title="运行处理器和服务器"></a>运行处理器和服务器</h1><p>下面的命令运行 HelloWorld 实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> classes:jetty-all-uber.jar org.eclipse.jetty.embedded.HelloWorld</span><br></pre></td></tr></table></figure>

<p>在浏览器地址栏输入：<a href="http://localhost:8080/">http://localhost:8080</a> 查看 HelloWorld 页面。</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Jetty</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>Jetty</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka RecordTooLargeException问题解决</title>
    <url>/2017/08/17/Kafka-RecordTooLargeException-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>Producer向Kafka写入数据时遇到异常：org.apache.kafka.common.errors.RecordTooLargeException。该异常是因为单条消息大小超过限制导致的。解决方法是将限制参数调大：</p>
<p>（1）server端：server.properties<br>    <code>message.max.bytes</code>参数默认值为1000012，调整为适合的值，如10485760。</p>
<p>（2）producer端：<br>    设置Producer的参数<code>max.request.size</code>的值与server端的<code>message.max.bytes</code>值一致。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>实时计算</category>
      </categories>
      <tags>
        <tag>数据采集</tag>
        <tag>大数据</tag>
        <tag>Kafka</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins中找不到pyenv命令问题解决</title>
    <url>/2025/03/31/Jenkins%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0pyenv%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Building in workspace /home/zhangjc/.jenkins/workspace/updateCompanies</span><br><span class="line">[updateCompanies] $ /bin/sh -xe /tmp/jenkins15523675592087959393.sh</span><br><span class="line">+ pyenv activate probe</span><br><span class="line">/tmp/jenkins15523675592087959393.sh: 2: pyenv: not found</span><br><span class="line">Build step &#x27;Execute shell&#x27; marked build as failure</span><br></pre></td></tr></table></figure>

<p>查看用户环境变量加载脚本<code>.bashrc</code>，找到pyenv环境变量加载内容，将内容添加至Jenkins构建步骤脚本中，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br><span class="line"></span><br><span class="line">pyenv activate probe</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins配置QQ邮箱</title>
    <url>/2025/03/31/Jenkins%E9%85%8D%E7%BD%AEQQ%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p>首先，配置SMTP服务器为“smtp.qq.com”。</p>
<p>然后，展开高级配置项，并选中使用SMTP认证，同时选中使用SSL。</p>
<p>最后，在用户名输入框输入完整QQ邮箱地址。注意，密码输入框需要输入生成的授权码，而不是输入邮箱的登陆密码。</p>
<ul>
<li>Jenkins邮箱用户名：</li>
</ul>
<p><img src="/images/202503/03.png" alt="Jenkins邮箱用户名"></p>
<ul>
<li>QQ邮箱授权码入口：</li>
</ul>
<p><img src="/images/202503/04.png" alt="QQ邮箱授权码入口"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>LRU 算法</title>
    <url>/2025/10/19/LRU-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>LRU 是 Least Recently Used 的缩写，即最近最少使用算法。其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>最常见的实现是使用一个链表保存缓存数据，详细算法实现如下：<br><img src="/images/202510/14.jpg"></p>
<ul>
<li>新数据插入到链表头部；</li>
<li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li>
<li>当链表满的时候，将链表尾部的数据丢弃。</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致 LRU 命中率急剧下降，缓存污染情况比较严重。该算法实现简单。命中时需要遍历链表，找到命中的数据块索引，然后需要将数据移到头部。</p>
<h1 id="LRU-K"><a href="#LRU-K" class="headerlink" title="LRU-K"></a>LRU-K</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>LRU-K 中的 K 代表最近使用的次数，因此 LRU 可以认为是 LRU-1。LRU-K 的主要目的是为了解决 LRU 算法“缓存污染”的问题，其核心思想是将“最近使用过 1 次”的判断标准扩展为“最近使用过 K 次”。</p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>相比 LRU，LRU-K 需要多维护一个队列，用于记录所有缓存数据被访问的历史。只有当数据的访问次数达到 K 次的时候，才将数据放入缓存。当需要淘汰数据时，LRU-K 会淘汰第 K 次访问时间距当前时间最大的数据。详细实现如下：<br><img src="/images/202510/15.jpg"></p>
<ul>
<li>数据第一次被访问，加入到访问历史列表；</li>
<li>如果数据在访问历史列表里后没有达到 K 次访问，则按照一定规则（FIFO，LRU）淘汰；</li>
<li>当访问历史队列中的数据访问次数达到 K 次后，将数据索引从历史队列删除，将数据移到缓存队列中，并缓存此数据，缓存队列重新按照时间排序；</li>
<li>缓存数据队列中被再次访问后，重新排序；</li>
<li>需要淘汰数据时，淘汰缓存队列中排在末尾的数据，即：淘汰“倒数第 K 次访问离现在最久”的数据。</li>
</ul>
<p>LRU-K 具有 LRU 的优点，同时能够避免 LRU 的缺点，实际应用中 LRU-2 是综合各种因素后最优的选择，LRU-3 或者更大的 K 值命中率会高，但适应性差，需要大量的数据访问才能将历史访问记录清除掉。</p>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>LRU-K 降低了“缓存污染”带来的问题，命中率比 LRU 要高。LRU-K 算法复杂度和代价比较高。由于 LRU-K 还需要记录那些被访问过、但还没有放入缓存的对象，因此内存消耗会比LRU要多；当数据量很大的时候，内存消耗会比较可观。LRU-K 需要基于时间进行排序（可以需要淘汰时再排序，也可以即时排序），CPU消耗比 LRU 要高。</p>
<h1 id="Two-queues（2Q）"><a href="#Two-queues（2Q）" class="headerlink" title="Two queues（2Q）"></a>Two queues（2Q）</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>Two queues（以下使用 2Q 代替）算法类似于 LRU-2，不同点在于 2Q 将 LRU-2 算法中的访问历史队列（注意这不是缓存数据的）改为一个 FIFO 缓存队列，即：2Q 算法有两个缓存队列，一个是 FIFO 队列，一个是 LRU 队列。</p>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>当数据第一次访问时，2Q 算法将数据缓存在 FIFO 队列里面，当数据第二次被访问时，则将数据从 FIFO 队列移到 LRU 队列里面，两个队列各自按照自己的方法淘汰数据。详细实现如下：<br><img src="/images/202510/16.jpg"></p>
<ul>
<li>新访问的数据插入到 FIFO 队列；</li>
<li>如果数据在FIFO队列中一直没有被再次访问，则最终按照 FIFO 规则淘汰；</li>
<li>如果数据在 FIFO 队列中被再次访问，则将数据移到 LRU 队列头部；</li>
<li>如果数据在 LRU 队列再次被访问，则将数据移到 LRU 队列头部；</li>
<li>LRU 队列淘汰末尾的数据。</li>
</ul>
<blockquote>
<p>注：上图中 FIFO 队列比 LRU 队列短，但并不代表这是算法要求，实际应用中两者比例没有硬性规定。</p>
</blockquote>
<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>2Q 算法的命中率要高于 LRU。2Q 算法需要两个队列，但两个队列本身都比较简单。2Q 算法的代价是 FIFO 和 LRU 的代价之和。2Q 算法和 LRU-2 算法命中率类似，内存消耗也比较接近，但对于最后缓存的数据来说，2Q 会减少一次从原始存储读取数据或者计算数据的操作。</p>
<h1 id="Multi-Queue（MQ）"><a href="#Multi-Queue（MQ）" class="headerlink" title="Multi Queue（MQ）"></a>Multi Queue（MQ）</h1><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>MQ 算法根据访问频率将数据划分为多个队列，不同的队列具有不同的访问优先级，其核心思想是：优先缓存访问次数多的数据。</p>
<h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><p>MQ 算法将缓存划分为多个 LRU 队列，每个队列对应不同的访问优先级。访问优先级是根据访问次数计算出来的，例如：详细的算法结构图如下，Q0，Q1….Qk 代表不同的优先级队列，Q-history 代表从缓存中淘汰数据，但记录了数据的索引和引用次数的队列：<br><img src="/images/202510/17.jpg"></p>
<p>如上图，算法详细描述如下：</p>
<ul>
<li>新插入的数据放入 Q0；</li>
<li>每个队列按照 LRU 管理数据；</li>
<li>当数据的访问次数达到一定次数，需要提升优先级时，将数据从当前队列删除，加入到高一级队列的头部；</li>
<li>为了防止高优先级数据永远不被淘汰，当数据在指定的时间里访问没有被访问时，需要降低优先级，将数据从当前队列删除，加入到低一级的队列头部；</li>
<li>需要淘汰数据时，从最低一级队列开始按照 LRU 淘汰；每个队列淘汰数据时，将数据从缓存中删除，将数据索引加入 Q-history 头部；</li>
<li>如果数据在 Q-history 中被重新访问，则重新计算其优先级，移到目标队列的头部；</li>
<li>Q-history 按照 LRU 淘汰数据的索引。</li>
</ul>
<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>MQ 降低了“缓存污染”带来的问题，命中率比 LRU 要高。MQ 需要维护多个队列，且需要维护每个数据的访问时间，复杂度比 LRU 高。MQ 需要记录每个数据的访问时间，需要定时扫描所有队列，代价比 LRU 要高。</p>
<p>注：虽然 MQ 的队列看起来数量比较多，但由于所有队列之和受限于缓存容量的大小，因此这里多个队列长度之和跟一个 LRU 队列是一样的，因此队列扫描性能也相近。</p>
<h2 id="LRU类算法对比"><a href="#LRU类算法对比" class="headerlink" title="LRU类算法对比"></a>LRU类算法对比</h2><p>由于不同的访问模型导致命中率变化较大，此处对比仅基于理论定性分析，不做定量分析。</p>
<ul>
<li>命中率：LRU-2 &gt; MQ(2) &gt; 2Q &gt; LRU</li>
<li>复杂度：LRU-2 &gt; MQ(2) &gt; 2Q &gt; LRU</li>
<li>代价：LRU-2 &gt; MQ(2) &gt; 2Q &gt; LRU</li>
</ul>
<p>实际应用中需要根据业务的需求和对数据的访问情况进行选择，并不是命中率越高越好。例如：虽然LRU看起来命中率会低一些，且存在”缓存污染“的问题，但由于其简单和代价小，实际应用中反而应用更多。</p>
<h1 id="Java-LinkedHashMap-实现"><a href="#Java-LinkedHashMap-实现" class="headerlink" title="Java LinkedHashMap 实现"></a>Java LinkedHashMap 实现</h1><p>Java 中最简单的 LRU 算法实现，就是利用 jdk 的 LinkedHashMap，覆写其中的 removeEldestEntry(Map.Entry) 方法即可。如果你去看 LinkedHashMap 的源码可知，LRU 算法是通过双向链表来实现，当某个位置被命中，通过调整链表的指向将该位置调整到头位置，新加入的内容直接放在链表头，如此一来，最近被命中的内容就向链表头移动，需要替换时，链表最后的位置就是最近最少使用的位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.Collection;  </span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类说明：利用 LinkedHashMap 实现简单的缓存， 必须实现 removeEldestEntry 方法，具体参见 JDK 文档</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRULinkedHashMap</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxCapacity;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">LRULinkedHashMap</span><span class="params">(<span class="type">int</span> maxCapacity)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>(maxCapacity, DEFAULT_LOAD_FACTOR, <span class="literal">true</span>);  </span><br><span class="line">    <span class="built_in">this</span>.maxCapacity = maxCapacity;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(java.util.Map.Entry&lt;K, V&gt; eldest)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> size() &gt; maxCapacity;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      lock.lock();  </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.containsKey(key);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      lock.unlock();  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      lock.lock();  </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.get(key);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      lock.unlock();  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      lock.lock();  </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.put(key, value);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      lock.unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      lock.lock();  </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.size();  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      lock.unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      lock.lock();  </span><br><span class="line">      <span class="built_in">super</span>.clear();  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      lock.unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;Map.Entry&lt;K, V&gt;&gt; getAll() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">      lock.lock();  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map.Entry&lt;K, V&gt;&gt;(<span class="built_in">super</span>.entrySet());  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">      lock.unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基于双链表的-LRU-实现"><a href="#基于双链表的-LRU-实现" class="headerlink" title="基于双链表的 LRU 实现"></a>基于双链表的 LRU 实现</h1><p>传统意义的 LRU 算法是为每一个 Cache 对象设置一个计数器，每次 Cache 命中则给计数器 +1，而 Cache 用完，需要淘汰旧内容，放置新内容时，就查看所有的计数器，并将最少使用的内容替换掉。</p>
<p>它的弊端很明显，如果 Cache 的数量少，问题不会很大，但是如果 Cache 的空间过大，达到 10W 或者 100W 以上，一旦需要淘汰，则需要遍历所有计算器，其性能与资源消耗是巨大的。效率也就非常的慢了。</p>
<p>它的原理：将 Cache 的所有位置都用双连表连接起来，当一个位置被命中之后，就将通过调整链表的指向，将该位置调整到链表头的位置，新加入的 Cache 直接加到链表头中。</p>
<p>这样，在多次进行 Cache 操作后，最近被命中的，就会被向链表头方向移动，而没有命中的，而想链表后面移动，链表尾则表示最近最少使用的 Cache。</p>
<p>当需要替换内容时候，链表的最后位置就是最少被命中的位置，我们只需要淘汰链表最后的部分即可。</p>
<p>上面说了这么多的理论， 下面用代码来实现一个 LRU 策略的缓存。我们用一个对象来表示 Cache，并实现双链表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CacheNode</span> &#123;</span><br><span class="line">    <span class="comment">// add your code here</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cacheSize;<span class="comment">// 缓存大小</span></span><br><span class="line">    <span class="keyword">private</span> Hashtable nodes;<span class="comment">// 缓存容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;<span class="comment">// 当前缓存对象数量</span></span><br><span class="line">    <span class="keyword">private</span> CacheNode first;<span class="comment">// (实现双链表)链表头</span></span><br><span class="line">    <span class="keyword">private</span> CacheNode last;<span class="comment">// (实现双链表)链表尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面给出完整的实现，这个类也被 Tomcat 所使用（ org.apache.tomcat.util.collections.LRUCache），但是在 tomcat6.x 版本中，已经被弃用，使用另外其他的缓存类来替代它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CacheNode</span> &#123;</span><br><span class="line">        CacheNode prev;<span class="comment">// 前一节点</span></span><br><span class="line">        CacheNode next;<span class="comment">// 后一节点</span></span><br><span class="line">        Object value;<span class="comment">// 值</span></span><br><span class="line">        Object key;<span class="comment">// 键</span></span><br><span class="line"></span><br><span class="line">        CacheNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        currentSize = <span class="number">0</span>;</span><br><span class="line">        cacheSize = i;</span><br><span class="line">        nodes = <span class="keyword">new</span> <span class="title class_">Hashtable</span>(i);<span class="comment">// 缓存容器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存中对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">CacheNode</span> <span class="variable">node</span> <span class="operator">=</span> (CacheNode) nodes.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">CacheNode</span> <span class="variable">node</span> <span class="operator">=</span> (CacheNode) nodes.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 缓存容器是否已经超过大小.</span></span><br><span class="line">            <span class="keyword">if</span> (currentSize &gt;= cacheSize) &#123;</span><br><span class="line">                <span class="keyword">if</span> (last != <span class="literal">null</span>)<span class="comment">// 将最少使用的删除</span></span><br><span class="line">                    nodes.remove(last.key);</span><br><span class="line">                removeLast();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentSize++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            node = <span class="keyword">new</span> <span class="title class_">CacheNode</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        node.value = value;</span><br><span class="line">        node.key = key;</span><br><span class="line">        <span class="comment">// 将最新使用的节点放到链表头，表示最新使用的.</span></span><br><span class="line">        moveToHead(node);</span><br><span class="line">        nodes.put(key, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将缓存删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">CacheNode</span> <span class="variable">node</span> <span class="operator">=</span> (CacheNode) nodes.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.prev != <span class="literal">null</span>) &#123;</span><br><span class="line">                node.prev.next = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                node.next.prev = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (last == node)</span><br><span class="line">                last = node.prev;</span><br><span class="line">            <span class="keyword">if</span> (first == node)</span><br><span class="line">                first = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        first = <span class="literal">null</span>;</span><br><span class="line"> 	    last = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除链表尾部节点 表示 删除最少使用的缓存对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 链表尾不为空,则将链表尾指向null. 删除连表尾（删除最少使用的缓存对象）</span></span><br><span class="line">        <span class="keyword">if</span> (last != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (last.prev != <span class="literal">null</span>)</span><br><span class="line">                last.prev.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                first = <span class="literal">null</span>;</span><br><span class="line">            last = last.prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动到链表头，表示这个节点是最新使用过的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(CacheNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == first)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.prev != <span class="literal">null</span>)</span><br><span class="line">            node.prev.next = node.next;</span><br><span class="line">        <span class="keyword">if</span> (node.next != <span class="literal">null</span>)</span><br><span class="line">            node.next.prev = node.prev;</span><br><span class="line">        <span class="keyword">if</span> (last == node)</span><br><span class="line">            last = node.prev;</span><br><span class="line">        <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.next = first;</span><br><span class="line">            first.prev = node;</span><br><span class="line">        &#125;</span><br><span class="line">        first = node;</span><br><span class="line">        node.prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">            last = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cacheSize;</span><br><span class="line">    <span class="keyword">private</span> Hashtable nodes;<span class="comment">// 缓存容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentSize;</span><br><span class="line">    <span class="keyword">private</span> CacheNode first;<span class="comment">// 链表头</span></span><br><span class="line">    <span class="keyword">private</span> CacheNode last;<span class="comment">// 链表尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件开发</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</title>
    <url>/2021/12/23/LibreSSL-SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443/</url>
    <content><![CDATA[<p>向GitHub Push代码的时候出现以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">fatal: unable to access &#x27;https://github.com/zhang-jc/zhangjc.git/&#x27;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</span><br></pre></td></tr></table></figure>

<p>解决方法：将项目clone协议改为SSH。可以直接修改项目目录下.git&#x2F;config配置文件中的项目地址。</p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Iptables示例一则</title>
    <url>/2020/11/30/Linux-Iptables-%E7%A4%BA%E4%BE%8B%E4%B8%80%E5%88%99/</url>
    <content><![CDATA[<p>关于Iptables的介绍个人强烈推荐：<a href="http://www.zsythink.net/archives/tag/iptables/page/2/">http://www.zsythink.net/archives/tag/iptables/page/2/</a>。这位兄弟介绍的很详细。</p>
<p>我个人的需求是在同一个网络内从网络上把测试主机与正式环境主机间的网络进行隔离。我的思路是采用OUTPUT filter表，采用黑名单方式禁用正式环境网络的访问。如果确实需要访问正式环境的某个IP和端口，则添加特殊规则放行。根据Iptables的规则匹配顺序原则，放行特定IP和端口的规则要在网段禁用规则之前。以下是我的名列列表：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">iptables -t filter -P OUTPUT ACCEPT</span><br><span class="line">iptables -F OUTPUT</span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.72.0/24 -j DROP</span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.72.1/32 -j ACCEPT</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure>

<ol>
<li>第一条命令是修改OUTPUT链的默认策略为ACCEPT，这样做的优点是方便通过yum安装软件时不需要设置一堆放行规则，当然网络入口的防火墙需要做好安全防护。</li>
<li>第二条命令是情况OUTPUT链的所有规则，重新进行配置。</li>
<li>第三条命令是插入一条filter规则，禁用当前服务器对192.168.72网段的访问。</li>
<li>第四条命令是在filter表插入放行规则，允许当前服务器访问网关192.168.72.1。</li>
</ol>
<p>注意，因为filter规则添加采用的是<code>-I</code>插入模式，每次都是在表的最前名插入，所有第三、四的顺序不能颠倒。如果采用的是<code>-A</code>追加模式，则第三、四命令需要颠倒。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Iptables</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下 ChromeDriver 安装</title>
    <url>/2025/05/31/Linux-%E4%B8%8B-ChromeDriver-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Selenium 是一个用于 Web 应用程序测试的工具。可以通过它驱动浏览器执行特定的操作，如点击、下滑、资源加载与渲染等。该工具在爬虫开发中也非常有帮助。Selenium 需要通过浏览器驱动操控浏览器，不同的浏览器对应的驱动不同，Chrome 浏览器的驱动是ChromeDriver，Firefox 浏览器的驱动是 GeckoDriver。要注意的是，浏览器驱动版本必须与计算机上的浏览器版本对应，否则无法正常使用。</p>
<p>打开 Chrome 浏览器后点击右上角三个点菜单中的“帮助”选项，并选择“关于 Google Chrome”​，即可看到版本信息：<img src="/images/202505/02.png"></p>
<p>114.0.5735.90 及以下版本，从 <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a> 下载对应的版本。114.0.5735.90 以上版本，需要从 GitHub 项目 <a href="https://github.com/GoogleChromeLabs/chrome-for-testing?tab=readme-ov-file#json-api-endpoints">chrome-for-testing</a> 中的 <a href="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json">JSON API 端点文件</a> 内容查找对应版本的下载地址。</p>
<p>下载后，将压缩包解压后得到的 chromedriver 文件复制到 <code>/user/bin/</code> 目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> chromedriver /usr/bin/</span><br></pre></td></tr></table></figure>

<p>在终端输入如下命令，查看 ChromeDriver 版本号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chromedriver --version</span><br><span class="line">ChromeDriver 135.0.7049.95 (de2eb485a1951079e63bdb57ce25544d2dc79c15-refs/branch-heads/7049@&#123;#1836&#125;)</span><br></pre></td></tr></table></figure>

<p>正确显示 ChromeDriver 版本信息，则说明安装正确，可以正常使用了。</p>
<p>可以通过 Python 代码来验证浏览器与驱动版本是否匹配，在终端输入以下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>browser = webdriver.Chrome()</span><br></pre></td></tr></table></figure>

<p>如果在命令执行后唤起下图所示的浏览器窗口，且无报错，则代表浏览器与驱动程序匹配，可以正常使用。</p>
<p><img src="/images/202505/03.png"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>浏览器</tag>
        <tag>网络爬虫</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令后双减号符（--）的含义</title>
    <url>/2017/02/05/Linux-%E5%91%BD%E4%BB%A4%E5%90%8E-%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<p>Unix&#x2F;Linux下各种命令的参数，都是以减号符（<code>-</code>）后面跟单字符参数，比如<code>-r</code>）或者双减号符（<code>--</code>）（后面紧跟多字符参数，比如<code>--recursive</code>）来表示。 在所有参数后面是文件名或者目录。大多情况下（文件名第一个字符不是减号符（<code>-</code>））这样是没有任何问题的，但是如果文件名第一个字符是-时（比如<code>-myfile</code>)，命令就无法区分此时<code>-myfile</code>到底是文件名还是参数名。此时解决方法就是用双减号符（<code>--</code>）来表示命令参数结束了，后面哪怕是以减号符（<code>-</code>）开头的字符串，也被当成文件名处理。</p>
<p>比如<code>rm -r -- -mydir</code>就会递归的（<code>-r</code>）删除<code>-mydir</code>这个目录。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令行导出Emacs ORG文档为HTML</title>
    <url>/2018/12/28/Linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AF%BC%E5%87%BA-Emacs-ORG-%E6%96%87%E6%A1%A3%E4%B8%BA-HTML/</url>
    <content><![CDATA[<p>Emacs版本25.2。使用以下命令将org文档导出html：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emacs &#123;orgFile&#125; --batch --<span class="built_in">eval</span> <span class="string">&quot;(require &#x27;ox)&quot;</span> --<span class="built_in">eval</span> <span class="string">&quot;(org-html-export-to-html)&quot;</span></span><br></pre></td></tr></table></figure>

<p>批量导出目录下的org文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for orgFile in `ls *.org`</span><br><span class="line">do</span><br><span class="line">    emacs $&#123;orgFile&#125; --batch --eval &quot;(require &#x27;ox)&quot; --eval &quot;(org-html-export-to-html)&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Emacs</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Emacs</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 系统 Docker Compose 安装</title>
    <url>/2025/05/31/Linux-%E7%B3%BB%E7%BB%9F-Docker-Compose-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文方法是直接下载 GitHub 项目的 release 版本。项目地址：<a href="https://github.com/docker/compose">https://github.com/docker/compose</a>。</p>
<p>执行以下命令将发布程序加载至本地目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wget -c -t 0 https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -O /opt/docker/docker-compose</span><br></pre></td></tr></table></figure>

<p>添加执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+rx /opt/docker/docker-compose</span><br></pre></td></tr></table></figure>

<p>创建软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /opt/docker/docker-compose /usr/local/bin/</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功，如果正确显示版本号，则说明安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose -v</span><br><span class="line">Docker Compose version v2.29.2</span><br></pre></td></tr></table></figure>

<p>Docker 安装见文章：<a href="https://www.zhangjc.com/2025/05/31/Deepin-20-9%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85Docker/">Deepin 20.9 社区版安装 Docker</a> 和 <a href="https://www.zhangjc.com/2025/05/30/Deepin-23-10%E5%AE%89%E8%A3%85Docker/">Deepin 23.10 安装 Docker</a>。</p>
<p>DockerHub 镜像配置见文章：<a href="https://www.zhangjc.com/2025/05/31/Linux%E9%85%8D%E7%BD%AEDockerHub%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/">Linux 配置 DockerHub 镜像源配置</a>。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux远程kill进程及$处理</title>
    <url>/2017/03/14/Linux-%E8%BF%9C%E7%A8%8B-kill-%E8%BF%9B%E7%A8%8B%E5%8F%8A-%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>在远程执行的命令中如果包含特殊字符（$）时需要转义，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@remote_host <span class="string">&quot;ps -ef|grep process_name | grep -v &#x27;grep &#x27; | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上语句的本意是得到进程的ID，但实际输出会是进程的信息。应该使用如下形式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@remote_host <span class="string">&quot;ps -ef|grep process_name | grep -v &#x27;grep &#x27; | awk &#x27;&#123;print \$2&#125;&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果远程执行命令是在脚本文件中，则需要多重转义。如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh exec.sh <span class="string">&quot;ps -ef|grep process_name | grep -v &#x27;grep &#x27; | awk &#x27;&#123;print \\\\\$2&#125;&#x27;&quot;</span>  </span><br><span class="line">exec.sh 内容如下：  </span><br><span class="line">ssh root@remote_host &lt;&lt; <span class="string">EOF  </span></span><br><span class="line"><span class="string">  eval &quot;$&#123;command&#125;&quot;  </span></span><br><span class="line"><span class="string">  exit  </span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用以下命令可以远程kill进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@remote_host <span class="string">&quot;ps -ef|grep process_name | grep -v &#x27;grep &#x27; | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Nodejs应用service配置</title>
    <url>/2025/09/28/Linux%E4%B8%8BNodejs%E5%BA%94%E7%94%A8service%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Linux 的 service 命令用于对系统服务进行管理，比如启动（start）、停止（stop）、重启（restart）、查看状态（status）等。service 命令本身是一个 shell 脚本，它在 &#x2F;etc&#x2F;init.d&#x2F; 目录查找指定的服务脚本，然后调用该服务脚本来完成任务。</p>
<p>下面以基于 Nodejs 开发的名称为 data-inspector 的应用为例，说明 Linux service 的配置。</p>
<p>第一步：在 &#x2F;frin&#x2F;DataInspector 下创建指向 node 命令的软链接1 data-inspector，执行 ll 命令查看该文件的信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx  1 root root     21 12月 30 15:42 data-inspector -&gt; /usr/bin/node</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样做的目的是为自己的应用进程起一个不同的名字。</p>
</blockquote>
<p>第二步：在 &#x2F;etc&#x2F;init.d&#x2F; 下创建文件 data-inspector，设置权限为 755，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># data-inspector</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># description: data-inspector</span></span><br><span class="line"><span class="comment"># processname: data-inspector</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Starting data-inspector&quot;</span></span><br><span class="line">    <span class="built_in">cd</span> /frin/DataInspector</span><br><span class="line">    <span class="built_in">rm</span> -f data-inspector.log</span><br><span class="line">    <span class="built_in">nohup</span> ./data-inspector ./bin/www &gt; data-inspector.log 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="built_in">sleep</span> 1s</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;started data-inspector&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    PID=`pidof data-inspector`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Stopping data-inspector&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;stoped data-inspector&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    <span class="variable">$0</span> stop</span><br><span class="line">    <span class="variable">$0</span> start</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Usage: service data-inspector &#123;start|stop|restart&#125;&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果 node ／usr&#x2F;bin 或 &#x2F;usr&#x2F;sbin 下，服务会因为找不到 node 命令失败。可以在 &#x2F;usr&#x2F;bin 下创建 node 的软链接。</p>
</blockquote>
<p>完成之后执行以下命令可以对服务进行启动、停止、重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$service</span> data-inspector start</span><br><span class="line"><span class="variable">$service</span> data-inspector stop</span><br><span class="line"><span class="variable">$service</span> data-inspector restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Spark Standalone测试环境部署</title>
    <url>/2025/09/26/Linux%E4%B8%8BSpark-Standalone%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>为了可以使用 start-all.sh 脚本启动整个本地集群，需要先配置 ssh 免密。</p>
<p>检查本机是否启动了 ssh 服务，如果出现以下信息则说明服务未启动，需先配置本机的 ssh 服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh localhost</span><br><span class="line">ssh: connect to host localhost port 22: Connection refused</span><br></pre></td></tr></table></figure>

<h1 id="配置-SSH-服务"><a href="#配置-SSH-服务" class="headerlink" title="配置 SSH 服务"></a>配置 SSH 服务</h1><ol>
<li>安装 SSH 服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动 SSH 服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start ssh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启用 SSH 服务开机启动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> ssh</span><br></pre></td></tr></table></figure>

<h1 id="配置免密-SSH-登录"><a href="#配置免密-SSH-登录" class="headerlink" title="配置免密 SSH 登录"></a>配置免密 SSH 登录</h1><p>首先，需要生成 SSH 密钥对。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>然后，将公钥复制到目标服务器（localhost）。执行以下命令，并按照提示输入密码即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id zhangjc@localhost</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">zhangjc@localhost<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">ERROR: Python with virtualenvwrapper module not found!</span></span><br><span class="line"><span class="string">Either, install virtualenvwrapper module for the default python3 interpreter</span></span><br><span class="line"><span class="string">or set VIRTUALENVWRAPPER_PYTHON to the interpreter to use.</span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>zhangjc@localhost<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure>

<h1 id="Spark-Standalone启动"><a href="#Spark-Standalone启动" class="headerlink" title="Spark Standalone启动"></a>Spark Standalone启动</h1><p>首先，从Spark官网（<a href="https://spark.apache.org/downloads.html">Downloads | Apache Spark</a>）下载安装包。我下载的是“<a href="https://www.apache.org/dyn/closer.lua/spark/spark-3.5.1/spark-3.5.1-bin-hadoop3.tgz">spark-3.5.1-bin-hadoop3.tgz</a>”。</p>
<p>然后，将下载安装包解压至自己喜欢的位置。</p>
<p>执行以下命令时，可能会出现未配置JAVA_HOME的错误，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./sbin/start-all.sh </span><br><span class="line">localhost:   JAVA_HOME is not <span class="built_in">set</span></span><br></pre></td></tr></table></figure>

<p>这是因为Spark通过SSH登录Worker节点启动服务，但shell登录服务器时不会加载环境变量。解决该问题需要在spark-config.sh中添加以下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，再次执行以下命令集群启动成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./sbin/start-all.sh</span><br><span class="line">$ jps</span><br><span class="line">99510 Master</span><br><span class="line">99654 Worker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>大数据</tag>
        <tag>Spark</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux免密sudo</title>
    <url>/2025/09/04/Linux%E5%85%8D%E5%AF%86sudo/</url>
    <content><![CDATA[<p>为了避免 <code>/etc/sudoers</code> 配置文件内容过多，可以在 <code>/etc/sudoers.d</code> 目录下新建配置文件。以我的用户名 <code>zhangjc</code> 为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vi /etc/sudoers.d/zhangjc</span></span><br></pre></td></tr></table></figure>

<p>输入以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">zhangjc ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<p>保存并退出。重新打开终端，此时执行 <code>sudo</code> 命令就不需要再输入密码了。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS JAVA_HOME设置</title>
    <url>/2016/08/28/Mac-OS-JAVA-HOME-%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>在MacOS上使用DMG文件安装了<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Jdk8</a> 之后，在默认路径下找不到JDK的HOME路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> java</span><br><span class="line">/usr/bin/java</span><br><span class="line">$ <span class="built_in">ls</span> -l /usr/bin/java</span><br><span class="line">lrwxr-xr-x  1 root  wheel  74 12  6  2015 /usr/bin/java -&gt; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java</span><br><span class="line">$ <span class="built_in">ls</span> -l /System/Library/Frameworks/JavaVM.framework/Versions</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  10 root  wheel  340  5  9 20:45 A</span><br><span class="line">lrwxr-xr-x   1 root  wheel    1 12  6  2015 Current -&gt; A</span><br><span class="line">$ <span class="built_in">ls</span> -l /System/Library/Frameworks/JavaVM.framework/Versions/A/</span><br><span class="line">total 80</span><br><span class="line">drwxr-xr-x  47 root  wheel    1598 10 18  2015 Commands</span><br><span class="line">drwxr-xr-x   4 root  wheel     136 10 18  2015 Frameworks</span><br><span class="line">drwxr-xr-x  14 root  wheel     476  8  2  2015 Headers</span><br><span class="line">drwxr-xr-x   3 root  wheel     102  8 23  2015 JavaPluginCocoa.bundle</span><br><span class="line">-rwxr-xr-x   1 root  wheel  109488 10 18  2015 JavaVM</span><br><span class="line">drwxr-xr-x   3 root  wheel     102  8  2  2015 Modules</span><br><span class="line">drwxr-xr-x  45 root  wheel    1530 10 18  2015 Resources</span><br><span class="line">drwxr-xr-x   3 root  wheel     102  8 23  2015 _CodeSignature</span><br></pre></td></tr></table></figure>

<p>在MacOS下可以使用<code>/usr/libexec/java_home</code>命令来定位<code>JAVA_HOME</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/java_home</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span><br></pre></td></tr></table></figure>

<p>设置<code>JAVA_HOME</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home`</span><br></pre></td></tr></table></figure>

<p>检查<code>JAVA_HOME</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span><br></pre></td></tr></table></figure>

<p>如果安装了多个版本的JDK，可以使用<code>-V</code>命令选项列出所有版本的<code>JAVA_HOME</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (1):</span><br><span class="line">    1.8.0_91, x86_64:	<span class="string">&quot;Java SE 8&quot;</span>	/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Java</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置DockerHub镜像源配置</title>
    <url>/2025/05/31/Linux%E9%85%8D%E7%BD%AEDockerHub%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>因为某些原因，DockerHub官方镜像源已不可用，国内一些镜像源也已不可用，大家可以搜索可用的镜像源并修改配置。推荐一篇良心博文：<a href="https://zhuanlan.zhihu.com/p/24461370776">https://zhuanlan.zhihu.com/p/24461370776</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>加入以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;https://docker.xuanyuan.me&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>镜像源不保证一直可用，如不可用自行搜索查找可用的镜像源。<br>国内可用镜像源一般只包含了基础镜像，如我使用的镜像源中就没有Superset的镜像，使用Docker部署本地试用Superset环境时，只能自行构建镜像，之后的文章再分享部署过程。</p>
</blockquote>
<p>重启docker加载更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>Docker 安装见文章：<a href="https://www.zhangjc.com/2025/05/31/Deepin-20-9%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85Docker/">Deepin 20.9 社区版安装 Docker</a> 和 <a href="https://www.zhangjc.com/2025/05/30/Deepin-23-10%E5%AE%89%E8%A3%85Docker/">Deepin 23.10 安装 Docker</a>。</p>
<p>Docker Compose 安装见文章：<a href="https://www.zhangjc.com/2025/05/31/Linux-%E7%B3%BB%E7%BB%9F-Docker-Compose-%E5%AE%89%E8%A3%85/">Linux 系统 Docker Compose 安装</a>。</p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令行命令自动补全</title>
    <url>/2025/05/28/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    <content><![CDATA[<p>GitHub项目：<a href="https://github.com/scop/bash-completion%E3%80%82">https://github.com/scop/bash-completion。</a></p>
<p>确认bash版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash --version</span><br></pre></td></tr></table></figure>

<p>make check过程出现错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh: pytest: <span class="built_in">command</span> not found</span><br><span class="line">make[4]: *** [check-local] Error 127</span><br></pre></td></tr></table></figure>

<p>由于我的环境没有安装pip，所以先安装。安装参考<a href="https://pip.pypa.io/en/stable/installation/%E3%80%82%E9%87%87%E7%94%A8get-pip.py%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%EF%BC%8C%E8%AF%A5%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E4%BF%A1%E6%81%AF%E5%A6%82%E4%B8%8B%EF%BC%9A">https://pip.pypa.io/en/stable/installation/。采用get-pip.py方式安装，该文件下载信息如下：</a></p>
<ul>
<li>Python3.7及以上版本：<a href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a></li>
<li>Python3.7以下版本：<a href="https://bootstrap.pypa.io/pip/2.7/get-pip.py">https://bootstrap.pypa.io/pip/2.7/get-pip.py</a></li>
</ul>
<p>安装执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>

<p>然后安装pytest：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure>

<p>再次执行make check报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ABS_TOP_BUILDDIR=<span class="string">&quot;/root/bash-completion&quot;</span> \</span><br><span class="line">	pytest  .</span><br><span class="line">ImportError <span class="keyword">while</span> loading conftest <span class="string">&#x27;/root/bash-completion/test/t/conftest.py&#x27;</span>.</span><br><span class="line">  File <span class="string">&quot;/root/bash-completion/test/t/conftest.py&quot;</span>, line 32</span><br><span class="line">    items: Iterable[str],</span><br><span class="line">         ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">make[4]: *** [check-local] Error 4</span><br></pre></td></tr></table></figure>

<p>怀疑是Python版本导致的问题，由于时间关系没继续研究。反正该错误不影响安装和正常使用。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS Shell 远程执行 Shell 命令</title>
    <url>/2025/09/29/Mac-OS-Shell-%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C-Shell-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>之前写过一个 Linux 下远程执行 Shell 的脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SLAVES=(192.168.1.133 192.168.1.134)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> slave <span class="keyword">in</span> <span class="variable">$&#123;SLAVES[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;==================<span class="variable">$slave</span>======================&quot;</span></span><br><span class="line">  ssh root@<span class="variable">$slave</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">    ls -l /usr/</span></span><br><span class="line"><span class="string">  EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>当然，所有的 slave 都配置过免密码登陆。</p>
<p>但是，这个脚本在 Mac OS 下执行的时候一直报错，信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">t.sh: line 12: syntax error: unexpected end of file</span><br></pre></td></tr></table></figure>

<p>经过尝试发现在 Mac OS 下，远程执行命令前不能有空格，修改后脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SLAVES=(192.168.1.133 192.168.1.134)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> slave <span class="keyword">in</span> <span class="variable">$&#123;SLAVES[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> “==================<span class="variable">$slave</span>======================”</span><br><span class="line">ssh root@<span class="variable">$slave</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">ls -l /usr/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>再次执行成功。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Shell</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS安装Emacs</title>
    <url>/2016/07/17/Mac-OS-%E5%AE%89%E8%A3%85-Emacs/</url>
    <content><![CDATA[<p>在MacOS X上可以使用<a href="http://brew.sh/">Homebrew</a> 安装Emacs：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install emacs --with-cocoa</span><br></pre></td></tr></table></figure>

<p>或者用<a href="https://www.macports.org/">MacPorts</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> port install emacs-app</span><br></pre></td></tr></table></figure>

<p><a href="https://emacsformacosx.com/">OSX Emacs</a> 网站提供了通用的二进制包。</p>
<blockquote>
<p>前两种方法安装后只能通过命令行启动Emacs，界面是终端界面。<br>二进制安装可以将Emacs安装到Applications中，通过Spotlight搜索快速启动，并有图形界面。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Emacs</category>
      </categories>
      <tags>
        <tag>Emacs</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 安装 VirtualBox</title>
    <url>/2025/10/21/Mac-OS-%E5%AE%89%E8%A3%85-VirtualBox/</url>
    <content><![CDATA[<p>从 Orale 官网下载 dmg 文件。下载网址：<a href="http://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html?ssSourceSiteId=ocomen">http://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html?ssSourceSiteId=ocomen</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>双击下载的 dmg 文件，按照说明进行安装，选项按照默认完成安装。<br><img src="/images/202510/19.jpg"></p>
<h1 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h1><p>可以从 Applications 中双击图标打开，或者使用“Spotlight 搜索”（ctrl ＋ space 快捷键）搜索打开。</p>
<ol>
<li><p>Applications 图标：<br><img src="/images/202510/20.jpg"></p>
</li>
<li><p>Spotlight 快捷打开：<br><img src="/images/202510/21.jpg"></p>
</li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>安装 Ubuntu Server 后，在 VirtualBox 界面不能全屏显示，尝试解决没有找到有效的方法（有实现方法的同学可以指教 ^_^）。其实可以不用非在 VirtualBox 中全屏，因为 Server 就是作为服务器来用的，完全可以在客户端通过 ssh 登陆来使用。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>MacOS</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下基于root指定用户执行命令的方法</title>
    <url>/2021/08/16/Linux%E4%B8%8B%E5%9F%BA%E4%BA%8Eroot%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Docker在构建镜像阶段无法配置免密码sudo。但是在实际需求场景中会遇到需要使用sudo的场景。所以，我的解决思路是镜像构建及CMD使用root，在CMD的脚本中执行需要sudo的部分，然后使用普通用户启动服务进程。</p>
<p>当然，基于root使用普通用户启动进程可以选择su或者runuser。我使用的是su：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd `dirname $0`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;RANGER_HOME&#125;/enable-hive-plugin.sh</span></span><br><span class="line">if [ $? -ne 0 ];then</span><br><span class="line">    echo &quot;启用ranger plugin错误！&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">su -mp -c &#x27;/opt/hive/bin/hiveserver2&#x27; hive</span><br></pre></td></tr></table></figure>

<p>注意：<code>-mp</code>是保留root设置的环境变量。如果不需要保留这些变量则可以使用<code>-l</code>选项。使用man命令查看su完整的手册。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 常用快捷键</title>
    <url>/2025/10/17/Mac-OS-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<ul>
<li>显示桌面：command + F3</li>
<li>剪切、粘贴：先 command + C，再 command + option + V</li>
<li>终端 Shell 新建标签：command + T</li>
<li>屏幕快照：command + shift + 3</li>
<li>区域截屏：command + shift + 4</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce 读取 Hive ORC ArrayIndexOutOfBoundsException: 1024 异常解决</title>
    <url>/2019/05/07/MapReduce-%E8%AF%BB%E5%8F%96-Hive-ORC-ArrayIndexOutOfBoundsException-1024-%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>在MR处理ORC的时候遇到如下异常：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 1024</span><br><span class="line">	at org.apache.orc.impl.RunLengthIntegerReaderV2.nextVector    (RunLengthIntegerReaderV2.java:369)</span><br><span class="line">	at org.apache.orc.impl.TreeReaderFactory$BytesColumnVectorUtil.commonReadByteArrays    (TreeReaderFactory.java:1231)</span><br><span class="line">	at org.apache.orc.impl.TreeReaderFactory$BytesColumnVectorUtil.readOrcByteArrays    (TreeReaderFactory.java:1268)</span><br><span class="line">	at org.apache.orc.impl.TreeReaderFactory$StringDirectTreeReader.nextVector    (TreeReaderFactory.java:1368)</span><br><span class="line">	at org.apache.orc.impl.TreeReaderFactory$StringTreeReader.nextVector    (TreeReaderFactory.java:1212)</span><br><span class="line">	at org.apache.orc.impl.TreeReaderFactory$ListTreeReader.nextVector    (TreeReaderFactory.java:1902)</span><br><span class="line">	at org.apache.orc.impl.TreeReaderFactory$StructTreeReader.nextBatch    (TreeReaderFactory.java:1737)</span><br><span class="line">	at org.apache.orc.impl.RecordReaderImpl.nextBatch(RecordReaderImpl.java:1045)</span><br><span class="line">	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.ensureBatch(RecordReaderImpl.java:77)</span><br><span class="line">	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.hasNext(RecordReaderImpl.java:89)</span><br></pre></td></tr></table></figure>

<p>通过搜索发现这个Bug在Hive 2.1.1版本中已经修复。我使用的就是这个版本，检查对应的源代码发现代码是已经按照下面的Patch修复过得：<a href="https://issues.apache.org/jira/browse/HIVE-14483">https://issues.apache.org/jira/browse/HIVE-14483</a></p>
<p>通过反编译发现我最终打包后的代码中使用的是未修复Bug的代码版本。通过依赖包发现依赖的以下模块中也包含ORC的Jar：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.orc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orc-mapreduce<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决方法是将<code>orc-mapreduce</code>包升级到1.1.2版本，依赖配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.orc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orc-mapreduce<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>分布式存储</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce远程调试</title>
    <url>/2021/08/05/MapReduce%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>MR的远程调试分为两个方面：</p>
<ul>
<li>MapReduce Task远程调试</li>
<li>AM（Application Master）远程调试</li>
</ul>
<h1 id="MapReduce-Task远程调试"><a href="#MapReduce-Task远程调试" class="headerlink" title="MapReduce Task远程调试"></a>MapReduce Task远程调试</h1><h2 id="Map-Task远程调试"><a href="#Map-Task远程调试" class="headerlink" title="Map Task远程调试"></a>Map Task远程调试</h2><p>修改<code>mapred-site.xml</code>中的配置项：</p>
<ul>
<li>mapreduce.map.java.opts：Map Task JVM参数设置。此处设置为：-Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;9091,server&#x3D;y,suspend&#x3D;y。</li>
<li>mapreduce.map.maxattempts：Map Task失败重试的最大次数。此处设置为1。</li>
<li>mapreduce.task.timeout：一个Task既没有读写数据也没有状态变化可持续的毫秒数。默认为600000毫秒，设置为0禁用超时。远程调试时通常需要持续的时间比较久，所以此处设置为0。</li>
</ul>
<h2 id="Reduce-Task远程调试"><a href="#Reduce-Task远程调试" class="headerlink" title="Reduce Task远程调试"></a>Reduce Task远程调试</h2><p>修改mapred-site.xml中的配置项：</p>
<ul>
<li>mapreduce.reduce.java.opts：Map Task JVM参数设置。此处设置为：-Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;9091,server&#x3D;y,suspend&#x3D;y。</li>
<li>mapreduce.reduce.maxattempts：Map Task失败重试的最大次数。此处设置为1。</li>
<li>mapreduce.task.timeout：一个Task既没有读写数据也没有状态变化可持续的毫秒数。默认为600000毫秒，设置为0禁用超时。远程调试时通常需要持续的时间比较久，所以此处设置为0。</li>
</ul>
<h2 id="virtual-memory错误"><a href="#virtual-memory错误" class="headerlink" title="virtual memory错误"></a>virtual memory错误</h2><p>分为两种：</p>
<ul>
<li>AM管理进程virtual memory beyond错误</li>
<li>Task Container virtual memory beyond错误</li>
</ul>
<h3 id="AM"><a href="#AM" class="headerlink" title="AM"></a>AM</h3><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">21/08/09 16:38:37 INFO mapreduce.Job: Job job_1593052953461_29983110 failed with state FAILED due to: Application application_1593052953461_29983110 failed 2 times due to AM Container for appattempt_1593052953461_29983110_000002 exited with  exitCode: -103</span><br><span class="line">For more detailed output, check application tracking page:http://ycluster-resourcemanager1:50030/cluster/app/application_1593052953461_29983110Then, click on links to logs of each attempt.</span><br><span class="line">Diagnostics: Container [pid=4359,containerID=container_e32_1593052953461_29983110_02_000001] is running beyond virtual memory limits. Current usage: 121.7 MB of 2 GB physical memory used; 16.4 GB of 6.2 GB virtual memory used. Killing container.</span><br><span class="line">Dump of the process-tree for container_e32_1593052953461_29983110_02_000001 :</span><br><span class="line">	|- PID PPID PGRPID SESSID CMD_NAME USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) RSSMEM_USAGE(PAGES) FULL_CMD_LINE</span><br><span class="line">	|- 4598 4359 4359 4359 (java) 232 18 17444765696 30784 /opt/java/bin/java -Djava.io.tmpdir=/data5/hadoop/yarn/data/usercache/data-platform/appcache/application_1593052953461_29983110/container_e32_1593052953461_29983110_02_000001/tmp -Dlog4j.configuration=container-log4j.properties -Dyarn.app.container.log.dir=/data1/hadoop/yarn/log/application_1593052953461_29983110/container_e32_1593052953461_29983110_02_000001 -Dyarn.app.container.log.filesize=0 -Dhadoop.root.logger=INFO,CLA -Dhadoop.root.logfile=syslog -Xmx14336m org.apache.hadoop.mapreduce.v2.app.MRAppMaster </span><br><span class="line">	|- 4359 4355 4359 4359 (bash) 3 3 115908608 359 /bin/bash -c /opt/java/bin/java -Djava.io.tmpdir=/data5/hadoop/yarn/data/usercache/data-platform/appcache/application_1593052953461_29983110/container_e32_1593052953461_29983110_02_000001/tmp -Dlog4j.configuration=container-log4j.properties -Dyarn.app.container.log.dir=/data1/hadoop/yarn/log/application_1593052953461_29983110/container_e32_1593052953461_29983110_02_000001 -Dyarn.app.container.log.filesize=0 -Dhadoop.root.logger=INFO,CLA -Dhadoop.root.logfile=syslog  -Xmx14336m org.apache.hadoop.mapreduce.v2.app.MRAppMaster 1&gt;/data1/hadoop/yarn/log/application_1593052953461_29983110/container_e32_1593052953461_29983110_02_000001/stdout 2&gt;/data1/hadoop/yarn/log/application_1593052953461_29983110/container_e32_1593052953461_29983110_02_000001/stderr  </span><br><span class="line"></span><br><span class="line">Container killed on request. Exit code is 143</span><br><span class="line">Container exited with a non-zero exit code 143</span><br><span class="line">Failing this attempt. Failing the application.</span><br></pre></td></tr></table></figure>

<p>修改<code>yarn-site.xml</code>以下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.resource.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>14336<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Task-Container"><a href="#Task-Container" class="headerlink" title="Task Container"></a>Task Container</h3><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2021-08-09 16:45:28,899 INFO [AsyncDispatcher event handler] org.apache.hadoop.mapreduce.v2.app.job.impl.TaskAttemptImpl: Diagnostics report from attempt_1593052953461_29983142_m_000000_0: Container [pid=188730,containerID=container_e32_1593052953461_29983142_01_000002] is running beyond virtual memory limits. Current usage: 25.3 MB of 4 GB physical memory used; 32.9 GB of 12.4 GB virtual memory used. Killing container.</span><br><span class="line">Dump of the process-tree for container_e32_1593052953461_29983142_01_000002 :</span><br><span class="line">	|- PID PPID PGRPID SESSID CMD_NAME USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) RSSMEM_USAGE(PAGES) FULL_CMD_LINE</span><br><span class="line">	|- 188965 188730 188730 188730 (java) 8 2 35216101376 6116 /opt/java/bin/java -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN -Xdebug -Xrunjdwp:transport=dt_socket,address=9091,server=y,suspend=y -Djava.io.tmpdir=/data0/hadoop/yarn/data/usercache/data-platform/appcache/application_1593052953461_29983142/container_e32_1593052953461_29983142_01_000002/tmp -Dlog4j.configuration=container-log4j.properties -Dyarn.app.container.log.dir=/data3/hadoop/yarn/log/application_1593052953461_29983142/container_e32_1593052953461_29983142_01_000002 -Dyarn.app.container.log.filesize=0 -Dhadoop.root.logger=INFO,CLA -Dhadoop.root.logfile=syslog org.apache.hadoop.mapred.YarnChild 192.168.72.33 32492 attempt_1593052953461_29983142_m_000000_0 35184372088834 </span><br><span class="line">	|- 188730 188728 188730 188730 (bash) 2 4 115855360 358 /bin/bash -c /opt/java/bin/java -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN  -Xdebug -Xrunjdwp:transport=dt_socket,address=9091,server=y,suspend=y -Djava.io.tmpdir=/data0/hadoop/yarn/data/usercache/data-platform/appcache/application_1593052953461_29983142/container_e32_1593052953461_29983142_01_000002/tmp -Dlog4j.configuration=container-log4j.properties -Dyarn.app.container.log.dir=/data3/hadoop/yarn/log/application_1593052953461_29983142/container_e32_1593052953461_29983142_01_000002 -Dyarn.app.container.log.filesize=0 -Dhadoop.root.logger=INFO,CLA -Dhadoop.root.logfile=syslog org.apache.hadoop.mapred.YarnChild 192.168.72.33 32492 attempt_1593052953461_29983142_m_000000_0 35184372088834 1&gt;/data3/hadoop/yarn/log/application_1593052953461_29983142/container_e32_1593052953461_29983142_01_000002/stdout 2&gt;/data3/hadoop/yarn/log/application_1593052953461_29983142/container_e32_1593052953461_29983142_01_000002/stderr  </span><br><span class="line"></span><br><span class="line">Container killed on request. Exit code is 143</span><br><span class="line">Container exited with a non-zero exit code 143</span><br></pre></td></tr></table></figure>

<p>修改<code>yarn-site.xml</code>以下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>14336<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>14336<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处有一个很大的疑问：为什么物理内存占用很小，但虚拟内存占用会这么大？这个问题目前还未搞懂(&gt;﹏&lt;)<br>问题解决的关键是Container分配物理内存的值乘以“yarn.nodemanager.vmem-pmem-ratio”的值大于异常信息中的数据；另外一种思路是禁用虚拟内存的检查，这种方法我没有实际验证。</p>
</blockquote>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>打开track url地址，查找到Task所在的服务器。如下：</p>
<p><img src="/images/202502/track-url.png" alt="track url"></p>
<p><img src="/images/202502/job-info.png" alt="job info"></p>
<p><img src="/images/202502/task-position.png" alt="task position"></p>
<h1 id="AM（Application-Master）远程调试"><a href="#AM（Application-Master）远程调试" class="headerlink" title="AM（Application Master）远程调试"></a>AM（Application Master）远程调试</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改<code>mapred-site.xml</code>中的配置项：</p>
<ul>
<li>yarn.app.mapreduce.am.command-opts：AM JVM参数设置。可能出现的virtual memory异常解决方法同上。此处设置为：-Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;9091,server&#x3D;y,suspend&#x3D;y。</li>
<li>mapreduce.am.max-attempts：Application重试次数。此处设置为1。</li>
</ul>
<h2 id="定位-1"><a href="#定位-1" class="headerlink" title="定位"></a>定位</h2><p>在ResourceManager上根据提交的Application ID查找AM所在的服务器。如下：</p>
<p><img src="/images/202502/yarn-apps.png" alt="ResourceManager"></p>
<p><img src="/images/202502/am.png" alt="AM"></p>
<h1 id="Eclipse配置"><a href="#Eclipse配置" class="headerlink" title="Eclipse配置"></a>Eclipse配置</h1><p>远程调试配置都一样，如下图：</p>
<p><img src="/images/202502/eclipse.png" alt="Eclipse远程调试"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Java</tag>
        <tag>分布式计算</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 转义</title>
    <url>/2025/10/24/Markdown-%E8%BD%AC%E4%B9%89/</url>
    <content><![CDATA[<h1 id="什么时候需要转义"><a href="#什么时候需要转义" class="headerlink" title="什么时候需要转义"></a>什么时候需要转义</h1><p>并不是所有遇到 Markdown 语法字符的时候都需要转义，看下面的例子：</p>
<p>在 Markdown 中想要表示字符串‘\s’，那么代码要怎么写呢？是‘\s’还是‘\\s’？后一种写法是很明显的，但是前一种写法也是可以的。原因是，Markdown 会根据转义字符‘\’之后的字符判断是否需要执行转义。\s 不是一个需要执行转义的表达式，所以转义字符‘\’按照原字符表达显示。这种特性可以让我们在类似的情况下少输入一些字符。</p>
<h1 id="转义"><a href="#转义" class="headerlink" title="转义 &gt;"></a>转义 &gt;</h1><p>遇到以下情况时如何转义：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">String</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>是 <code>&lt;String\&gt;</code> 吗？试一下就知道这样是不行的。在这种情况下通过下面的方式处理：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;String<span class="symbol">&amp;gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven: Too many files with unapproved license</title>
    <url>/2020/11/25/Maven-Too-many-files-with-unapproved-license/</url>
    <content><![CDATA[<p>异常信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.rat:apache-rat-plugin:0.11:check (default) on project ranger: Too many files with unapproved license: 1 See RAT report in: /home/zhangjc/ysten/git/apache-ranger-1.2.0/target/rat.txt -&gt; [Help 1]</span><br><span class="line">org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.rat:apache-rat-plugin:0.11:check (default) on project ranger: Too many files with unapproved license: 1 See RAT report in: /home/zhangjc/ysten/git/apache-ranger-1.2.0/target/rat.txt</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)</span><br><span class="line">    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">    at java.lang.reflect.Method.invoke (Method.java:498)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)</span><br></pre></td></tr></table></figure>

<p>解决方法：增加<code>-Drat.skip=true</code>参数 ，跳过licensing检查。</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2025/10/27/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">单个回车【这里有一个回车符-&gt;】</span><br><span class="line">视为空格。</span><br><span class="line">连续回车【这里有两个回车符-&gt;】</span><br><span class="line"></span><br><span class="line">视为分段。</span><br><span class="line">行尾加两个空格【这里有两个空格和一个回车符-&gt;】  </span><br><span class="line">即可段内换行。</span><br><span class="line"><span class="emphasis">*这是斜体*</span></span><br><span class="line"><span class="strong">**这是粗体**</span></span><br><span class="line">\为转义字符【这是一个斜杠 \\ 】</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>单个回车【这里有一个回车符-&gt;】<br>视为空格。<br>连续回车【这里有两个回车符-&gt;】</p>
<p>视为分段。<br>行尾加两个空格【这里有两个空格和一个回车符-&gt;】<br>即可段内换行。<br>这是斜体<br>这是粗体<br>\为转义字符【这是一个\】</p>
<h1 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br><span class="line">在行下面加 = 表示大标题</span><br><span class="line">在行下面加 - 表示小标题</span><br></pre></td></tr></table></figure>

<h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="在行下面加-表示大标题"><a href="#在行下面加-表示大标题" class="headerlink" title="在行下面加 &#x3D; 表示大标题"></a>在行下面加 &#x3D; 表示大标题</h1><h2 id="在行下面加-表示小标题"><a href="#在行下面加-表示小标题" class="headerlink" title="在行下面加 - 表示小标题"></a>在行下面加 - 表示小标题</h2><blockquote>
<p>说明 在行首添加 1 到 6 个 # ，表示 1 到 6 级标题。 Markdown 共有6级标题。在文字行下面加 &#x3D; 或者 - 分别表示大标题和小标题。</p>
</blockquote>
<h1 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h1><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表项目1</span><br><span class="line"><span class="bullet">-</span> 无序列表项目2</span><br><span class="line"><span class="bullet">-</span> 无序列表项目3</span><br></pre></td></tr></table></figure>

<p>两个列表不能相邻，否则会认为是一个列表。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表项目1</span><br><span class="line"><span class="bullet">2.</span> 有序列表项目2</span><br><span class="line"><span class="bullet">3.</span> 有序列表项目3</span><br></pre></td></tr></table></figure>

<p>下面是嵌套列表：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 外层列表项目1</span><br><span class="line"><span class="bullet">+</span> 内层列表项目11</span><br><span class="line"><span class="bullet">+</span> 内层列表项目12</span><br><span class="line"><span class="bullet">-</span> 外层列表项目2</span><br><span class="line"><span class="bullet">+</span> 内层列表项目21</span><br><span class="line"><span class="bullet">+</span> 内层列表项目22</span><br></pre></td></tr></table></figure>

<h2 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h2><ul>
<li>无序列表项目1</li>
<li>无序列表项目2</li>
<li>无序列表项目3</li>
</ul>
<p>两个列表不能相邻，否则会认为是一个列表。</p>
<ol>
<li>有序列表项目1</li>
<li>有序列表项目2</li>
<li>有序列表项目3</li>
</ol>
<p>下面是嵌套列表：</p>
<ul>
<li>外层列表项目1<ul>
<li>内层列表项目11</li>
<li>内层列表项目12</li>
</ul>
</li>
<li>外层列表项目2<ul>
<li>内层列表项目21</li>
<li>内层列表项目22</li>
</ul>
</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>注意，两个列表不能相邻，否则会认为是一个列表；内层列表项目前需要有缩进。</p>
<h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h1><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">上面是一条分割线</span><br></pre></td></tr></table></figure>

<h2 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h2><hr>
<p>上面是一条分割线</p>
<h1 id="5-程序代码"><a href="#5-程序代码" class="headerlink" title="5. 程序代码"></a>5. 程序代码</h1><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeView</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h2><p>Java：</p>
<pre><code>public class CodeView &#123;
    public static void main(String[] args) &#123;
        System.out.println(&quot;Hello World!&quot;);
    &#125;
&#125;
</code></pre>
<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>行的开头空4个空格或者tab符，表示程序代码。</p>
<h1 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h1><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这是引用文字</span></span><br></pre></td></tr></table></figure>

<h2 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h2><blockquote>
<p>这是引用文字</p>
</blockquote>
<h1 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h1><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;http://example.com/&gt;</span></span><br><span class="line">[<span class="string">链接文字</span>](<span class="link">http://example.com/ &quot;标题文字&quot;</span>)</span><br><span class="line">![<span class="string">图片文字</span>](<span class="link">/uploads/avatar.jpg &quot;图片文字&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a>效果</h2><p><a href="http://example.com/">http://example.com/</a></p>
<p><a href="http://example.com/" title="标题文字">链接文字</a></p>
<p><img src="/images/avatar.jpg" alt="图片文字" title="图片文字"></p>
<h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><ul>
<li>直接显示链接地址，则用 &lt;&gt; 包围链接即可。</li>
<li>链接要显示的文字放到 [] 中。</li>
<li>链接地址放到 [] 后紧跟的 ()中。</li>
<li>要显示链接标题文字（鼠标悬浮时显示的内容）则在链接后加空格，且标题文字放到””中。</li>
<li>图片跟链接一样，只是在最前面加 ! 符号。</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB between ... and ... 操作</title>
    <url>/2016/07/11/MongoDB-between-and-%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>MongoDB中类似SQL的between and操作可以采用如下语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.collection.find( &#123; field: &#123; $gt: value1, $lt: value2 &#125; &#125; );</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 常用查询</title>
    <url>/2025/10/27/MongoDB-%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<ul>
<li>当前 MongoDB 版本：<code>db.version();</code></li>
<li>Web控制台<br>Mongodb 自带了 Web 控制台，默认和数据服务一同开启。他的端口在 Mongodb 数据库服务器端口的基础上加 1000 ，如果是默认的Mongodb数据服务端口 27017 ，则相应的Web端口为 28017。这个页面可以看到：<ul>
<li>当前Mongodb的所有连接。</li>
<li>各个数据库和Collection的访问统计，包括：Reads, Writes, Queries, GetMores ,Inserts, Updates, Removes。</li>
<li>写锁的状态。</li>
<li>以及日志文件的最后几百行。<br>参考截图：<br><img src="/images/202510/29.jpg"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据导出工具mongoexport</title>
    <url>/2019/03/27/MongoDB-%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7-mongoexport/</url>
    <content><![CDATA[<p>导出示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mongoexport --host 192.168.72.60 --db realtime_statistic_backup --collection all_play_stats_summary --fields <span class="string">&quot;_id.timestamp,total_uv&quot;</span> --<span class="built_in">type</span> csv --out uv.csv --<span class="built_in">sort</span> <span class="string">&quot;&#123;&#x27;_id.timestamp&#x27;: -1&#125;&quot;</span> --query <span class="string">&quot;&#123;&#x27;_id.province_id&#x27;:&#x27;sc&#x27;,&#x27;_id.city_id&#x27;:&#x27;all&#x27;, &#x27;_id.display_name&#x27;: &#x27;all&#x27;&#125;&quot;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>3.4.6版本后支持<code>--uri</code>方式连接MongoDB</li>
<li><code>--fields</code>指定要导出的field，如果是嵌套的json，可以通过点（.）操作指定内层的field</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Missing artifact jdk.tools:jdk.tools:jar:1.6</title>
    <url>/2025/10/27/Missing-artifact-jdk-tools-jdk-tools-jar-1-6/</url>
    <content><![CDATA[<p>Eclipse maven工程 Missing artifact jdk.tools:jdk.tools:jar:1.6 可以用以下方法解决。思路是配置 maven 依赖本地的 tools.jar，需要本地安装有 jdk 1.6 。</p>
<h1 id="下载安装JDK-1-6"><a href="#下载安装JDK-1-6" class="headerlink" title="下载安装JDK 1.6"></a>下载安装JDK 1.6</h1><p>Oracle 官网下载JDK 1.6 的链接不太容易找到，可以在 <a href="https://link.zhihu.com/?target=http://www.oracle.com/technetwork/java/javase/sitemap-jsp-139155.html">Java SE Site Map</a> 页面找到以下位置，点击即可看到 JDK 所有版本的列表：<br><img src="/images/202510/31.jpg"></p>
<h1 id="配置-maven-依赖"><a href="#配置-maven-依赖" class="headerlink" title="配置 maven 依赖"></a>配置 maven 依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;JAVA_HOME&#125;/lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，如果使用 ${JAVA_HOME} 配置，系统环境变量必须要配置 JAVA_HOME 。也可以直接使用本地路径，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>C:/Program Files/Java/jdk1.6.0_45/lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 查询和投影操作符</title>
    <url>/2025/10/22/MongoDB-%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%8A%95%E5%BD%B1%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="查询选择器"><a href="#查询选择器" class="headerlink" title="查询选择器"></a>查询选择器</h1><h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p>想了解不同 BSON 类型值的比较，参见 <a href="https://link.zhihu.com/?target=https://docs.mongodb.org/manual/reference/bson-types/%23bson-types-comparison-order">BSON比较顺序详细说明</a>。</p>
<ul>
<li>$eq 匹配跟指定值相等的值</li>
<li>$gt 匹配比指定值大的值</li>
<li>$gte 匹配比指定值大或者相等的值</li>
<li>$lt 匹配比指定值小的值</li>
<li>$lte 匹配比指定值小或者相等的值</li>
<li>$ne 匹配跟指定值不相等的值</li>
<li>$in 匹配在指定数组中的任意值</li>
<li>$nin 匹配不在指定数组中的值</li>
</ul>
<h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><ul>
<li>$or 用逻辑 OR 操作符连接查询子句，返回所有匹配任一个条件子句的文档。</li>
<li>$and 用逻辑 AND 操作符连接查询子句，返回所有同时匹配两个条件子句的文档。</li>
<li>$not 反转查询条件的效果，返回不匹配查询条件的文档。</li>
<li>$nor 用逻辑 NOR 操作符连接查询子句，返回两个条件都匹配失败的所有文档。</li>
</ul>
<h2 id="元素操作符"><a href="#元素操作符" class="headerlink" title="元素操作符"></a>元素操作符</h2><ul>
<li>$exists 匹配有指定属性的文档。</li>
<li>$type 选择属性是指定类型的文档。</li>
</ul>
<h2 id="评估操作符"><a href="#评估操作符" class="headerlink" title="评估操作符"></a>评估操作符</h2><ul>
<li>$mod 对一个属性的值执行模数运算，选择有指定结果的文档。</li>
<li>$regex 选择值匹配指定规则表达式的文档。</li>
<li>$text 执行文本搜索。</li>
<li>$where 匹配满足一个 JavaScript 表达式的文档。</li>
</ul>
<h2 id="空间操作符"><a href="#空间操作符" class="headerlink" title="空间操作符"></a>空间操作符</h2><ul>
<li>$geoWithin 选择包围 GeoJSON 几何图形 的几何图形。二维球形和二维索引支持 $geoWithin。</li>
<li>$geoIntersects 选择与一个 GeoJSON 几何图形 相交的几何图形。二维球形支持 $geoIntersects。</li>
<li>$near 返回跟一个点邻近的空间对象。需要一个空间索引。二维球形和二维索引支持 $near。</li>
<li>$nearSphere 返回球形上跟一个点邻近的空间对象。二维球形和二维索引支持 $nearSphere。</li>
</ul>
<h2 id="数组操作符"><a href="#数组操作符" class="headerlink" title="数组操作符"></a>数组操作符</h2><ul>
<li>$all 匹配查询中指定的所有元素的数组。</li>
<li>$elemMatch 选择那些属性匹配所有 $elemMatch 条件指定的全部属性的数组。</li>
<li>$size 选择符合指定属性个数的数组。</li>
</ul>
<h2 id="位运算操作符"><a href="#位运算操作符" class="headerlink" title="位运算操作符"></a>位运算操作符</h2><ul>
<li>$bitsAllSet 匹配的数字或二进制值，其中这组位的位置都有一个值为1。</li>
<li>$bitsAnySet 匹配的数字或二进制值，其中这组位的任意一个位置有一个值为1。</li>
<li>$bitsAllClear 匹配的数字或二进制值，其中这组位的位置都有一个值为0。</li>
<li>$bitsAnyClear 匹配的数字或二进制值，其中这组位的任意一个位置有一个值为0。</li>
</ul>
<h2 id="注释操作符"><a href="#注释操作符" class="headerlink" title="注释操作符"></a>注释操作符</h2><p>$comment 给查询断言添加注释。</p>
<h1 id="投影操作符"><a href="#投影操作符" class="headerlink" title="投影操作符"></a>投影操作符</h1><ul>
<li>$ 展现第一个元素匹配查询条件的数组。</li>
<li>$elemMatch 展现第一个元素匹配指定的 $elemMatch 条件的数组。</li>
<li>$meta 展现 $text 操作中赋值给文档的分数。</li>
<li>$slice 限制从一个数组展示的元素的个数。支持 skip 和 limit。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB中sum的方法</title>
    <url>/2025/10/27/MongoDB%E4%B8%ADsum%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>MongoDB中求和的方法有以下两种：</p>
<h1 id="聚合管道（Aggregation-Pipelines）"><a href="#聚合管道（Aggregation-Pipelines）" class="headerlink" title="聚合管道（Aggregation Pipelines）"></a>聚合管道（Aggregation Pipelines）</h1><p>以下是MongoDB官网的示例，很清楚。注意，用来统计的 field 的数据类型得是数值类型，不能是字符串，否则统计结果为 0。<br><img src="/images/202510/37.jpg"></p>
<h1 id="Map-Reduce"><a href="#Map-Reduce" class="headerlink" title="Map-Reduce"></a>Map-Reduce</h1><p>以下是MongoDB官网的示例，也很清楚。注意，Map-Reduce的数据结果保存在一个新的Collection中；Collection的名字就是out的值。在该示例中即 order_totals。<br><img src="/images/202510/38.jpg"></p>
<p>如果要 sum 的 field 需要数据类型转换，可以在 Map 阶段完成。如下数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.orders_str.insert(&#123;cust_id:&quot;A123&quot;,amount:&quot;500&quot;,status:&quot;A&quot;&#125;)</span><br><span class="line">db.orders_str.insert(&#123;cust_id:&quot;A123&quot;,amount:&quot;250&quot;,status:&quot;A&quot;&#125;)</span><br><span class="line">db.orders_str.insert(&#123;cust_id:&quot;B212&quot;,amount:&quot;200&quot;,status:&quot;A&quot;&#125;)</span><br><span class="line">db.orders_str.insert(&#123;cust_id:&quot;A123&quot;,amount:&quot;300&quot;,status:&quot;D&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>Map-Reduce：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.orders_str.mapReduce(</span><br><span class="line">    function()&#123;</span><br><span class="line">        var cnt = parseInt(this.amount);</span><br><span class="line">        emit(this.cust_id,cnt);</span><br><span class="line">    &#125;,</span><br><span class="line">    function(key,values)&#123;</span><br><span class="line">        return Array.sum(values);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        query:&#123;status:&quot;A&quot;&#125;,</span><br><span class="line">        out: &quot;order_totals_str&quot;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.order_totals_str.find(&#123;&#125;)</span><br><span class="line">&#123; “_id” : “A123”, “value” : 750 &#125;</span><br><span class="line">&#123; “_id” : “B212”, “value” : 200 &#125;</span><br></pre></td></tr></table></figure>

<p>DONE！!</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB：listDatabases failed : not master and slaveOk=false</title>
    <url>/2018/09/27/MongoDB%EF%BC%9AlistDatabases-failed-not-master-and-slaveOk-false/</url>
    <content><![CDATA[<h1 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h1><p>如果在MongoDB的SECONDARY上查询数据时会报如下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; show databases;</span><br><span class="line">2018-09-20T17:40:55.377+0800 E QUERY [thread1] Error: listDatabases failed:&#123; <span class="string">&quot;ok&quot;</span> : 0, <span class="string">&quot;errmsg&quot;</span> : <span class="string">&quot;not master and slaveOk=false&quot;</span>, <span class="string">&quot;code&quot;</span> : 13435 &#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:25:13</span><br><span class="line">Mongo.prototype.getDBs@src/mongo/shell/mongo.js:62:1</span><br><span class="line">shellHelper.show@src/mongo/shell/utils.js:781:19</span><br><span class="line">shellHelper@src/mongo/shell/utils.js:671:15</span><br><span class="line">@(shellhelp2):1:1</span><br></pre></td></tr></table></figure>

<h1 id="Mongo-Shell设置"><a href="#Mongo-Shell设置" class="headerlink" title="Mongo Shell设置"></a>Mongo Shell设置</h1><p>如果在Mongo Shell中可以通过下面的命令允许从SECONDARY上查询数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rs.slaveOk();</span><br></pre></td></tr></table></figure>

<h1 id="JDBC设置"><a href="#JDBC设置" class="headerlink" title="JDBC设置"></a>JDBC设置</h1><p>示例代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MongoClientOptions opts = (new MongoClientOptions.Builder().readPreference(ReadPreference.secondary())).build();</span><br><span class="line">MongoClient mongoClient = new MongoClient($&#123;host&#125;, opts);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL JDBC连接异常：javax.net.ssl.SSLException: closing inbound before receiving peer&#39;s close_notify</title>
    <url>/2020/11/27/MySQL-JDBC-%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8%EF%BC%9Ajavax-net-ssl-SSLException-closing-inbound-before-receiving-peer-s-close-notify/</url>
    <content><![CDATA[<p>异常信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Thu Nov 26 23:54:22 CST 2020 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Thu Nov 26 23:54:23 CST 2020 WARN: Caught while disconnecting...</span><br><span class="line">	</span><br><span class="line">EXCEPTION STACK TRACE:</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">** BEGIN NESTED EXCEPTION ** </span><br><span class="line"></span><br><span class="line">javax.net.ssl.SSLException</span><br><span class="line">MESSAGE: closing inbound before receiving peer&#x27;s close_notify</span><br><span class="line"></span><br><span class="line">STACKTRACE:</span><br><span class="line"></span><br><span class="line">javax.net.ssl.SSLException: closing inbound before receiving peer&#x27;s close_notify</span><br><span class="line">	at sun.security.ssl.Alert.createSSLException(Alert.java:133)</span><br><span class="line">	at sun.security.ssl.Alert.createSSLException(Alert.java:117)</span><br><span class="line">	at sun.security.ssl.TransportContext.fatal(TransportContext.java:314)</span><br><span class="line">	at sun.security.ssl.TransportContext.fatal(TransportContext.java:270)</span><br><span class="line">	at sun.security.ssl.TransportContext.fatal(TransportContext.java:261)</span><br><span class="line">	at sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:656)</span><br><span class="line">	at sun.security.ssl.SSLSocketImpl.shutdownInput(SSLSocketImpl.java:635)</span><br><span class="line">	at com.mysql.jdbc.MysqlIO.quit(MysqlIO.java:2246)</span><br><span class="line">	at com.mysql.jdbc.ConnectionImpl.realClose(ConnectionImpl.java:4201)</span><br><span class="line">	at com.mysql.jdbc.ConnectionImpl.close(ConnectionImpl.java:1472)</span><br><span class="line">	at com.jolbox.bonecp.BoneCP.obtainRawInternalConnection(BoneCP.java:353)</span><br><span class="line">	at com.jolbox.bonecp.BoneCP.&lt;init&gt;(BoneCP.java:416)</span><br><span class="line">	at com.jolbox.bonecp.BoneCPDataSource.getConnection(BoneCPDataSource.java:120)</span><br><span class="line">	at org.datanucleus.store.rdbms.ConnectionFactoryImpl$ManagedConnectionImpl.getConnection(ConnectionFactoryImpl.java:483)</span><br><span class="line">	at org.datanucleus.store.rdbms.RDBMSStoreManager.&lt;init&gt;(RDBMSStoreManager.java:296)</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">	at org.datanucleus.plugin.NonManagedPluginRegistry.createExecutableExtension(NonManagedPluginRegistry.java:606)</span><br><span class="line">	at org.datanucleus.plugin.PluginManager.createExecutableExtension(PluginManager.java:301)</span><br><span class="line">	at org.datanucleus.NucleusContextHelper.createStoreManagerForProperties(NucleusContextHelper.java:133)</span><br><span class="line">	at org.datanucleus.PersistenceNucleusContextImpl.initialise(PersistenceNucleusContextImpl.java:420)</span><br><span class="line">	at org.datanucleus.api.jdo.JDOPersistenceManagerFactory.freezeConfiguration(JDOPersistenceManagerFactory.java:821)</span><br><span class="line">	at org.datanucleus.api.jdo.JDOPersistenceManagerFactory.createPersistenceManagerFactory(JDOPersistenceManagerFactory.java:338)</span><br><span class="line">	at org.datanucleus.api.jdo.JDOPersistenceManagerFactory.getPersistenceManagerFactory(JDOPersistenceManagerFactory.java:217)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at javax.jdo.JDOHelper$16.run(JDOHelper.java:1965)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.jdo.JDOHelper.invoke(JDOHelper.java:1960)</span><br><span class="line">	at javax.jdo.JDOHelper.invokeGetPersistenceManagerFactoryOnImplementation(JDOHelper.java:1166)</span><br><span class="line">	at javax.jdo.JDOHelper.getPersistenceManagerFactory(JDOHelper.java:808)</span><br><span class="line">	at javax.jdo.JDOHelper.getPersistenceManagerFactory(JDOHelper.java:701)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.ObjectStore.getPMF(ObjectStore.java:515)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.ObjectStore.getPersistenceManager(ObjectStore.java:544)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.ObjectStore.initializeHelper(ObjectStore.java:399)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.ObjectStore.initialize(ObjectStore.java:336)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.ObjectStore.setConf(ObjectStore.java:297)</span><br><span class="line">	at org.apache.hadoop.util.ReflectionUtils.setConf(ReflectionUtils.java:76)</span><br><span class="line">	at org.apache.hadoop.util.ReflectionUtils.newInstance(ReflectionUtils.java:136)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RawStoreProxy.&lt;init&gt;(RawStoreProxy.java:58)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RawStoreProxy.getProxy(RawStoreProxy.java:67)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.newRawStore(HiveMetaStore.java:599)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.getMS(HiveMetaStore.java:564)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.createDefaultDB(HiveMetaStore.java:626)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.HiveMetaStore$HMSHandler.init(HiveMetaStore.java:416)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RetryingHMSHandler.&lt;init&gt;(RetryingHMSHandler.java:78)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RetryingHMSHandler.getProxy(RetryingHMSHandler.java:84)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.HiveMetaStore.newRetryingHMSHandler(HiveMetaStore.java:6490)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.&lt;init&gt;(HiveMetaStoreClient.java:238)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient.&lt;init&gt;(SessionHiveMetaStoreClient.java:70)</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1652)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&lt;init&gt;(RetryingMetaStoreClient.java:80)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:130)</span><br><span class="line">	at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:101)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:3367)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:3406)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:3386)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.getAllFunctions(Hive.java:3640)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.reloadFunctions(Hive.java:236)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.registerAllFunctionsOnce(Hive.java:221)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.&lt;init&gt;(Hive.java:366)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.create(Hive.java:310)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.getInternal(Hive.java:290)</span><br><span class="line">	at org.apache.hadoop.hive.ql.metadata.Hive.get(Hive.java:266)</span><br><span class="line">	at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:558)</span><br><span class="line">	at org.apache.hadoop.hive.ql.session.SessionState.beginStart(SessionState.java:531)</span><br><span class="line">	at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:705)</span><br><span class="line">	at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:641)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.hadoop.util.RunJar.run(RunJar.java:221)</span><br><span class="line">	at org.apache.hadoop.util.RunJar.main(RunJar.java:136)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">** END NESTED EXCEPTION **</span><br></pre></td></tr></table></figure>

<p>解决方法：在JDBC连接串中添加<code>useSSL=false</code>配置，如：<code>jdbc:mysql://192.168.72.212/hive?createDatabaseIfNotExist=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false</code></p>
<p>注意，XML中的&amp;需要改写为：&amp;amp;</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Workbench 8.0不支持非SSL连接</title>
    <url>/2022/01/27/MySQL-Workbench-8-0%E4%B8%8D%E6%94%AF%E6%8C%81%E9%9D%9ESSL%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>连接错误信息：SSL connection error: SSL is required but the server doesn’t support it。如下图：</p>
<p><img src="/images/202502/mysql-ssl-error1.jpg" alt="错误信息"></p>
<p>解决方法是在配置连接时“Advanced”选项卡中的Others中添加如下参数：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">useSSL=0</span><br></pre></td></tr></table></figure>

<p>如图：<img src="/images/202502/mysql-ssl-error2.jpg" alt="禁用SSL"></p>
<p>测试连接出现警告信息，选择“Continue Anyway”：</p>
<p><img src="/images/202502/mysql-ssl-error3.jpg" alt="警告信息"></p>
<p><img src="/images/202502/mysql-ssl-error4.jpg" alt="警告信息"></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 表分区修改操作不支持 IF [NOT] EXISTS</title>
    <url>/2025/10/22/MySQL-%E8%A1%A8%E5%88%86%E5%8C%BA%E4%BF%AE%E6%94%B9%E6%93%8D%E4%BD%9C%E4%B8%8D%E6%94%AF%E6%8C%81-IF-NOT-EXISTS/</url>
    <content><![CDATA[<p>最近的工作中需要用到 MySQL 的分区表。表根据每天的日期分区，如：20160518、20160519 等。需要支持数据重新写入分区，即如果对应的分区下已经存在数据，则先清理再写入。IF [NOT] EXISTS 是一种判定表是否存在简便方式，非常适合这种场景。但查看了 MySQL 的官方文档，PARTITION 的添加、删除操作不支持该操作。<a href="https://link.zhihu.com/?target=http://dev.mysql.com/doc/refman/5.7/en/alter-table-partition-operations.html">ALTER TABLE Partition Operations</a><br><img src="/images/202510/23.jpg"></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>通过 MySQL 的 INFORMATION_SCHEMA 库下的 PARTITIONS 表查询表分区信息确定分区是否存在。该表的使用见下面的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE th (</span><br><span class="line">    -&gt;     c1 INT,</span><br><span class="line">    -&gt;     c2 VARCHAR(20)</span><br><span class="line">    -&gt; )</span><br><span class="line">    -&gt; PARTITION BY HASH(c1)</span><br><span class="line">    -&gt; PARTITIONS 2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>可以用下面的查询表 th 的分区情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT TABLE_NAME,PARTITION_NAME,TABLE_ROWS,AVG_ROW_LENGTH,DATA_LENGTH</span><br><span class="line">     &gt;   FROM INFORMATION_SCHEMA.PARTITIONS</span><br><span class="line">     &gt;   WHERE TABLE_SCHEMA = <span class="string">&#x27;p&#x27;</span> AND TABLE_NAME =<span class="string">&#x27;th&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>结果如下：<br><img src="/images/202510/24.jpg"></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL设置字段内容大小写敏感</title>
    <url>/2025/04/15/MySQL%E8%AE%BE%E7%BD%AE%E5%AD%97%E6%AE%B5%E5%86%85%E5%AE%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F/</url>
    <content><![CDATA[<p>MySQL的COLLATE支持以下几种常用编码:</p>
<ul>
<li>utf8mb4_unicode_ci - 基于 Unicode 排序规则，不区分大小写。</li>
<li>utf8mb4_general_ci - 简单排序规则，不区分大小写。</li>
<li>utf8mb4_bin - 二进制比较，区分大小写。</li>
<li>utf8mb4_0900_ai_ci - MySQL 8.0+ 的 Unicode 9.0 标准排序规则。</li>
</ul>
<p>如不设置，在<code>MySQL 8.4.4</code>版本中，默认是<code>utf8mb4_0900_ai_ci</code>编码，在查询数据时不区分大小写。如以下两条语句的查询结果一样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stock_trans <span class="keyword">where</span> tran_type <span class="operator">=</span> <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stock_trans <span class="keyword">where</span> tran_type <span class="operator">=</span> <span class="string">&#x27;s&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以全局设置COLLATE的编码为<code>utf8mb4_bin</code>。在my.cnf（Linux）配置文件中添加：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_bin</span><br></pre></td></tr></table></figure>

<p>然后重启MySQL，这样新建库或表时默认数据内容区分大小写。</p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL修改max_allowed_packet</title>
    <url>/2018/10/12/MySQL-%E4%BF%AE%E6%94%B9-max-allowed-packet/</url>
    <content><![CDATA[<p>通过global参数设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> global max_allowed_packet = 32*1024*1024;</span><br></pre></td></tr></table></figure>

<p>注意，下面的写法是不正确的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> global max_allowed_packet = 32m;</span><br></pre></td></tr></table></figure>

<p>如果要重启也生效的话，在<code>my.cnf</code>中添加如下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">max_allowed_packet=32m</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL连接串特殊字符处理</title>
    <url>/2025/09/26/MySQL%E8%BF%9E%E6%8E%A5%E4%B8%B2%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>通过类 URI 的连接串连接 MySQL 是很常见的一种方式。连接串的语法如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[scheme://][user[:[password]]@]host[:port][/schema][?attribute1=value1&amp;attribute2=value2...</span><br></pre></td></tr></table></figure>

<p>但是有时参数中会出现类 URI 连接串的保留字符，如在密码中出现 @ 字符。这时就需要对参数中的这些字符进行编码。例如，用 %40 替换 @，用 %25 替换 %。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM镜像源设置</title>
    <url>/2025/03/10/NPM%E9%95%9C%E5%83%8F%E6%BA%90%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>以设置阿里镜像源为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前镜像源</span></span><br><span class="line">npm config get registry</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置阿里镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmmirror.com</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除阿里镜像源</span></span><br><span class="line">npm config delete registry http://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<p>阿里镜像源网址：<a href="https://developer.aliyun.com/mirror/NPM?spm=a2c6h.13651102.0.0.30da1b11bsbolw">https://developer.aliyun.com/mirror/NPM?spm=a2c6h.13651102.0.0.30da1b11bsbolw</a></p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Please make sure the TESSDATA_PREFIX environment variable is set to your tessdata directory</title>
    <url>/2025/05/31/Please-make-sure-the-TESSDATA-PREFIX-environment-variable-is-set-to-your-tessdata-directory/</url>
    <content><![CDATA[<p>安装 Tesseract 及 PyTesseract 后，在验证时，出现以下异常信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/Downloads/pyocr.py&quot;</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(pytesseract.image_to_string(Image.open(<span class="string">&quot;example.png&quot;</span>)))</span><br><span class="line">          ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/crawler/lib/python3.13/site-packages/pytesseract/pytesseract.py&quot;</span>, line 486, <span class="keyword">in</span> image_to_string</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">           ~</span><br><span class="line">    ...&lt;2 lines&gt;...</span><br><span class="line">        Output.STRING: lambda: run_and_get_output(*args),</span><br><span class="line">        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    &#125;[output_type]()</span><br><span class="line">    ~~~~~~~~~~~~~~^^</span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/crawler/lib/python3.13/site-packages/pytesseract/pytesseract.py&quot;</span>, line 489, <span class="keyword">in</span> &lt;lambda&gt;</span><br><span class="line">    Output.STRING: lambda: run_and_get_output(*args),</span><br><span class="line">                           ~~~~~~~~~~~~~~~~~~^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/crawler/lib/python3.13/site-packages/pytesseract/pytesseract.py&quot;</span>, line 352, <span class="keyword">in</span> run_and_get_output</span><br><span class="line">    run_tesseract(**kwargs)</span><br><span class="line">    ~~~~~~~~~~~~~^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/crawler/lib/python3.13/site-packages/pytesseract/pytesseract.py&quot;</span>, line 284, <span class="keyword">in</span> run_tesseract</span><br><span class="line">    raise TesseractError(proc.returncode, get_errors(error_string))</span><br><span class="line">pytesseract.pytesseract.TesseractError: (1, <span class="string">&#x27;Error opening data file /usr/share/tesseract-ocr/5/tessdata/eng.traineddata Please make sure the TESSDATA_PREFIX environment variable is set to your &quot;tessdata&quot; directory. Failed loading language \&#x27;</span>eng\&#x27; Tesseract couldn\&#x27;t load any languages! Could not initialize tesseract.<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>根据提示信息，需要设置 TESSDATA_PREFIX 环境变量指向包含 Tesseract 语言数据文件（如 eng.traineddata、fra.traineddata 等）的 tessdata 目录。通常该目录位置如下：</p>
<ul>
<li>Linux：&#x2F;usr&#x2F;share&#x2F;tesseract-ocr&#x2F;4.00&#x2F;tessdata&#x2F;</li>
<li>MacOS：&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;tesseract&#x2F;<version>&#x2F;share&#x2F;tessdata&#x2F;</li>
<li>Windows：C:\Program Files\Tesseract-OCR\tessdata\</li>
</ul>
<p>Linux 下设置环境变量命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> TESSDATA_PREFIX=<span class="string">&quot;/usr/share/tesseract-ocr/4.00/tessdata&quot;</span></span><br></pre></td></tr></table></figure>

<p>再次执行验证，成功！</p>
<p>Linux 下，可以在 &#x2F;etc&#x2F;profile 或 ~&#x2F;.bashrc 中设置环境变量，避免每次临时设置。</p>
<p>其他系统下，可自行设置环境变量。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>网络爬虫</tag>
        <tag>OCR</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置支持 HTTPS 代理</title>
    <url>/2019/03/12/Nginx-%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81-HTTPS-%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>本文描述的是Nginx HTTPS反向代理的情况（即后端服务是HTTP的）。</p>
<h1 id="使用openssl配置ssl证书"><a href="#使用openssl配置ssl证书" class="headerlink" title="使用openssl配置ssl证书"></a>使用openssl配置ssl证书</h1><h2 id="生成服务器端的私钥（key-文件）："><a href="#生成服务器端的私钥（key-文件）：" class="headerlink" title="生成服务器端的私钥（key 文件）："></a>生成服务器端的私钥（key 文件）：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl genrsa -des3 -out server.key 2048</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.............+++</span><br><span class="line">..........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> server.key:</span><br></pre></td></tr></table></figure>

<p>输入两次密码后key文件生成完毕。</p>
<h2 id="生成CSR（Certificate-Signing-Request）文件："><a href="#生成CSR（Certificate-Signing-Request）文件：" class="headerlink" title="生成CSR（Certificate Signing Request）文件："></a>生成CSR（Certificate Signing Request）文件：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl req -new -key server.key -out server.crs</span></span><br></pre></td></tr></table></figure>

<p>根据提示输入需要的信息后CSR文件生成完毕。</p>
<h2 id="生成自签名的CA文件："><a href="#生成自签名的CA文件：" class="headerlink" title="生成自签名的CA文件："></a>生成自签名的CA文件：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl x509 -req -days 3650 -in server.crs -signkey server.key -out ca.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=cn/ST=beijing/L=beijing/O=<span class="built_in">test</span>/OU=<span class="built_in">test</span>/CN=<span class="built_in">test</span>/emailAddress=<span class="built_in">test</span>@test.com</span><br><span class="line">Getting Private key</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> server.key:</span><br></pre></td></tr></table></figure>

<p>输入key文件的密码后CA文件生成完毕。</p>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate ca.crt;</span><br><span class="line">    ssl_certificate_key server.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.36.144:11000;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新加载Nginx配置文件后，发现Nginx代理的443端口未正常启动。查看Nginx error日志发现以下异常信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019/03/12 16:49:26 [emerg] 85175#0: SSL_CTX_use_PrivateKey_file(&quot;/etc/nginx/server.key&quot;) failed (SSL: error:0906406D:PEM routines:PEM_def_callback:problems getting password error:0906A068:PEM routines:PEM_do_header:bad password read error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib)</span><br></pre></td></tr></table></figure>

<p>通过以下方式解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv server.key server.key.org</span></span><br><span class="line"><span class="comment"># openssl rsa -in server.key.org -out server.key</span></span><br></pre></td></tr></table></figure>

<p>重新加载Nginx配置文件。此时也不需要再输入key文件的密码了。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 版本管理</title>
    <url>/2024/12/17/Python-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Python的版本管理是在实践中一定会面对的问题。Pyenv是一个简单的Python版本管理程序。使用Pyenv可以在多个Python版本间进行切换。本文主要参考项目文档进行翻译和编写。大概的使用效果如下图所示：</p>
<p><img src="/images/202412/06.png"></p>
<h1 id="Pyenv可以做什么…"><a href="#Pyenv可以做什么…" class="headerlink" title="Pyenv可以做什么…"></a>Pyenv可以做什么…</h1><ul>
<li>允许您根据每个用户更改全局Python版本。</li>
<li>提供对每个项目Python版本的支持。</li>
<li>允许用环境变量覆盖Python版本。</li>
<li>一次从多个版本的Python中搜索命令。这有助于使用<a href="https://pypi.python.org/pypi/tox">tox</a>跨Python版本进行测试。</li>
</ul>
<h1 id="与pythonbrew和pythonz相比，Pyenv不能做什么…"><a href="#与pythonbrew和pythonz相比，Pyenv不能做什么…" class="headerlink" title="与pythonbrew和pythonz相比，Pyenv不能做什么…"></a>与pythonbrew和pythonz相比，Pyenv不能做什么…</h1><ul>
<li>取决于Python本身。Pyenv是由纯shell脚本构成的。Python不存在引导问题。</li>
<li>需要加载到shell中。相反，Pyenv的接入通过在PATH中添加一个目录来工作。</li>
<li>当然，可以创建viralenv，或者创建pyenv-viralenv来自动化这个过程。但管理会比较繁琐，并容易产生混乱。</li>
</ul>
<h1 id="Pyenv如何工作"><a href="#Pyenv如何工作" class="headerlink" title="Pyenv如何工作"></a>Pyenv如何工作</h1><p>在高级别上，Pyenv使用注入到PATH中的可执行文件拦截Python命令，确定应用程序指定了哪个Python版本，并将命令传递到正确的Python安装。</p>
<h2 id="理解Pyenv的Shims"><a href="#理解Pyenv的Shims" class="headerlink" title="理解Pyenv的Shims"></a>理解Pyenv的Shims</h2><p>Pyenv的工作原理是在PATH前面插入一个shims目录来工作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(pyenv root)/shims:/usr/local/bin:/usr/bin:/bin</span><br></pre></td></tr></table></figure>

<p>通过一个称为重拼凑的过程，Pyenv在该目录中维护shims，以匹配每个已安装版本Python的命令，python、pip等。</p>
<p>Shims是轻量级的可执行文件，只需将命令传递给Pyenv即可。因此，安装了Pyenv之后，当运行pip时，操作系统将执行以下操作：</p>
<ul>
<li>在PATH中搜索名为pip的可执行文件。</li>
<li>在PATH的开头找到名为pip的Pyenv shim。</li>
<li>运行名为pip的shim，然后将命令传递给Pyenv。</li>
</ul>
<h2 id="理解Python版本选择"><a href="#理解Python版本选择" class="headerlink" title="理解Python版本选择"></a>理解Python版本选择</h2><p>当执行一个shim时，Pyenv通过从以下来源读取它来决定使用哪个Python版本，顺序如下：</p>
<ol>
<li>PYENV_VERION环境变量(如果指定)。您可以使用<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell">Pyenv shell</a> 命令在当前shell会话中设置这个环境变量。</li>
<li>当前目录中应用指定的 .python-version 文件（如果存在）。可以使用 <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell">Pyenv shell</a> 命令修改当前目录的 .python-version 文件。</li>
<li>通过搜索每个父目录找到第一个 .python-version 文件（如果有的话），直到文件系统的根目录。</li>
<li>全局 $(Pyenv root)&#x2F;version 文件。可以使用 <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-global">Pyenv global</a>命令修改这个文件。如果没有全局版本文件，pyenv 假设想要使用“系统” Python （见下文）。</li>
</ol>
<p>一个特殊的版本名称“system”意味着在PATH中shims的条目之后找到的任何Python（换句话说，如果Pyenv shims不在PATH中，将运行PATH中找到的Python）。请注意，Pyenv认为这些安装不在其控制范围之内，并不试图以任何方式检查或区分它们。因此，例如，如果你在MacOS上并且有OS绑定的Python 3.8.9和Homebrew安装的Python 3.9.12和3.10.2 – 对于Pyenv来说，这仍然是一个单独的“system”版本，并且无论哪一个是在PATH指定的第一个可执行文件名，它都将被运行。</p>
<p><strong>注意</strong>: 可以同时激活多个版本，包括同时激活Python2或Python3的多个版本。这允许并行使用Python2和Python3，并且是类似tox这样的工具所需要的。例如，要指示Pyenv首先使用系统Python和Python3（例如2.7.9和3.4.2），但同时使用Python 3.3.6、3.2.1和2.5.2，首先执行pyenv install安装缺少的版本，然后设置pyenv global system 3.3.6 3.2.1 2.5.2。然后就可以使用适当的pythonX或pythonX.Y名称来调用这些版本中的任何一个。也可以手动在 .python-version 文件中指定多个版本，用换行符分隔。以 # 开头的行将被忽略。</p>
<p><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-which">pyenv which <command></a>显示通过一个shim调用<command>时将运行哪个真正的可执行文件。例如，如果已经安装了3.3.6、3.2.1和2.5.2，其中选择了3.3.6和2.5.2，并且系统Python是3.2.5，pyenv which python2.5应该显示$(Pyenv root)&#x2F;version&#x2F;2.5.2&#x2F;bin&#x2F;python2.5，pyenv which python3 – $(Pyenv root)&#x2F;version&#x2F;3.3.6&#x2F;bin&#x2F;python3和pyenv which python3.2 – 由于穿透指向系统Python（见下文）。</p>
<p>如果在所选的Python安装中没有出现相应的可执行文件，那么会穿透到在PATH中相关的可执行文件。这允许使用系统上其他地方安装的任何程序，只要它们没有被选定的Python安装遮蔽。</p>
<h2 id="由Pyenv提供安装Python的位置"><a href="#由Pyenv提供安装Python的位置" class="headerlink" title="由Pyenv提供安装Python的位置"></a>由Pyenv提供安装Python的位置</h2><p>一旦pyenv确定了应用程序指定的Python版本，它就会将命令传递给相应的Python。<br>每个Python版本都安装到$(Pyenv root)&#x2F;versions下自己的目录中。<br>例如，可能已经安装了以下版本：</p>
<ul>
<li>$(pyenv root)&#x2F;versions&#x2F;2.7.8&#x2F;</li>
<li>$(pyenv root)&#x2F;versions&#x2F;3.4.2&#x2F;</li>
<li>$(pyenv root)&#x2F;versions&#x2F;pypy-2.4.0&#x2F;</li>
</ul>
<p>就Pyenv而言，版本名就是$(Pyenv root)&#x2F;version下的目录。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在Linux类系统下用自动安装程序可以很简单的完成安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>

<p>更多详情请访问项目：<a href="https://github.com/pyenv/pyenv-installer">https://github.com/pyenv/pyenv-installer</a>。</p>
<blockquote>
<p>注意，出于某种原因，自动安装程序可能会出现好像卡死的现象，多尝试几次即可。</p>
</blockquote>
<h2 id="设置Pyenv的shell环境"><a href="#设置Pyenv的shell环境" class="headerlink" title="设置Pyenv的shell环境"></a>设置Pyenv的shell环境</h2><p><strong>对于bash：</strong></p>
<p>Bash启动文件在不同的发行版之间差异很大，它们的来源、在什么情况下、以什么顺序，以及它们执行什么附加配置。因此，在所有环境中获取Pyenv的最可靠方法是将Pyenv配置命令追加到 .bashrc（用于交互式shell）和Bash将使用的配置文件（用于登录shell）。</p>
<p>首先，通过在终端中运行以下命令将命令添加到 ~&#x2F;.bashrc：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>然后，如果有 ~&#x2F;.profile、~&#x2F;.bash_profile或 ~&#x2F;.bash_login，也将命令添加到那里。如果没有这些文件，请将它们添加到 ~&#x2F;.profile。</p>
<ul>
<li>添加到 ~&#x2F;.profile：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure>

<ul>
<li>添加到 ~&#x2F;.bash_ profile：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h2 id="重启shell"><a href="#重启shell" class="headerlink" title="重启shell"></a>重启shell</h2><p>使PATH更改生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Python构建依赖"><a href="#安装Python构建依赖" class="headerlink" title="安装Python构建依赖"></a>安装Python构建依赖</h2><p>在尝试安装新的Python版本之前需要先安装构建Python的依赖。</p>
<p><strong>对于Ubuntu&#x2F;Debian：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update; <span class="built_in">sudo</span> apt install build-essential libssl-dev zlib1g-dev \</span><br><span class="line">libbz2-dev libreadline-dev libsqlite3-dev curl git \</span><br><span class="line">libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装其他Python版本"><a href="#安装其他Python版本" class="headerlink" title="安装其他Python版本"></a>安装其他Python版本</h2><p>要安装其他Python版本，请使用<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-install">pyenv install</a>。<br>运行pyenv install -l提供所有可用版本的列表。<br>例如，要下载并安装Python 3.13.1，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.13.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 大多数Pyenv提供的Python版本都是源代码版本，并且是从源代码构建的，作为安装的一部分（这就是为什么需要预安装Python构建依赖）。你可以给Python的configure和编译器标志传递选项来自定义构建，详细信息请参阅<a href="https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md#special-environment-variables">Special environment variables in Python-Build’s README</a>。</p>
</blockquote>
<blockquote>
<p>注意: 如果在安装Python版本时遇到困难，请访问wiki页面：<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems">Common Build Problems</a>。</p>
</blockquote>
<blockquote>
<p>注意: 如果希望以较长的构建时间为代价获得更快的解释器，请参阅<a href="https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md#building-for-maximum-performance">Building for maximum performance in Python-Build’s README</a>。</p>
</blockquote>
<h3 id="自动解析最新版本的前缀"><a href="#自动解析最新版本的前缀" class="headerlink" title="自动解析最新版本的前缀"></a>自动解析最新版本的前缀</h3><p>除uninstall外，所有Pyenv子命令都会自动解析相应版本行中最新版本的完整前缀。<br>pyenv install选择已知的最新版本，而其他子命令选择已安装的最新版本。例如，安装，然后切换到最新的3.13.1版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.13.1</span><br><span class="line">pyenv global 3.13.1</span><br></pre></td></tr></table></figure>

<p>可以运行<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-latest">pyenv latest -k <prefix></a>来查看pyenv install将如何解析特定的前缀，或者运行<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-latest">pyenv latest <prefix></a>来查看其他子命令将如何解析它。<br>有关详细信息，请参阅<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-latest">pyenv最新文档</a>。</p>
<h3 id="具有扩展支持的Python版本"><a href="#具有扩展支持的Python版本" class="headerlink" title="具有扩展支持的Python版本"></a>具有扩展支持的Python版本</h3><p>对于以下Python版本，Pyenv应用了用户提供的补丁，这些补丁为一些较新的环境添加了支持。虽然没有积极地维护这些补丁，因为现有的版本从来没有更改过，但可以肯定的是，它们将继续工作，直到这些环境的后续版本中出现更多不兼容的更改。</p>
<ul>
<li>3.7.8-3.7.15、3.8.4-3.8.12、3.9.0-3.9.7：XCode 13.3</li>
<li>3.5.10、3.6.15：MacOS 11+和XCode 13.3</li>
<li>2.7.18：MacOS 10.15+和Apple Silicon</li>
</ul>
<h2 id="在Python版本之间切换"><a href="#在Python版本之间切换" class="headerlink" title="在Python版本之间切换"></a>在Python版本之间切换</h2><p>要选择Pyenv安装的Python作为要使用的版本，请运行以下命令之一：</p>
<ul>
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell">pyenv shell <version></a>仅为当前shell会话选择。</li>
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local">pyenv local <version></a>无论何时，只要在工作目录（或者它的子目录）中，就会自动选择。</li>
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell">pyenv global <version></a>为用户帐户全局选择。</li>
</ul>
<p>例如，选择上面提到的新安装的Python 3.13.1作为首选版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.13.1</span><br></pre></td></tr></table></figure>

<p>现在，无论何时调用python、 pip等，都将运行来自Pyenv提供的3.13.1安装的可执行文件，而不是系统Python。</p>
<p>使用“system”作为版本名称将把选择重置为系统提供的Python。</p>
<p>请参阅<a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#understanding-shims">Understanding shims</a>和<a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#understanding-python-version-selection">Understanding Python version selection</a>，以获得有关选择如何工作的更多细节和有关其用法的更多信息。</p>
<h2 id="卸载Python版本"><a href="#卸载Python版本" class="headerlink" title="卸载Python版本"></a>卸载Python版本</h2><p>随着时间的推移，将在$(Pyenv root)&#x2F;versions目录中累积Python版本。<br>要删除旧的Python版本，使用<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-uninstall">pyenv uninstall <versions></a>。<br>或者，可以简单地rm -rf要删除的版本的目录。可以使用pyenv prefix命令找到特定Python版本的目录，例如：pyenv prefix 2.6.8。但是请注意，插件可能会在卸载时运行额外的操作，这也需要手动完成。例如，Pyenv-Virtualenv 还删除了与正在卸载的版本相关的所有虚拟环境。</p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>运行pyenv commands获取所有可用子命令的列表。使用–help运行一个子命令以获得有关它的帮助，或者查看<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md">Commands Reference</a>。<br>注意，安装的Pyenv插件可以添加它们自己的子命令。</p>
<h1 id="使用安装程序升级"><a href="#使用安装程序升级" class="headerlink" title="使用安装程序升级"></a>使用安装程序升级</h1><p>如果用Pyenv安装程序安装了Pyenv，就已经有了可以升级Pyenv和所有已安装插件的Pyenv-Update插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv update</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 ImportError: cannot import name &#39;XXX&#39; from &#39;XXX&#39;</title>
    <url>/2019/12/11/Python3-ImportError-cannot-import-name-XXX-from-XXX/</url>
    <content><![CDATA[<p>例如如下错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python3 git.py </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;git.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> git <span class="keyword">import</span> Repo</span><br><span class="line">  File <span class="string">&quot;/home/a/git.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> git <span class="keyword">import</span> Repo</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;Repo&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;git&#x27;</span> (/home/a/git.py)</span><br></pre></td></tr></table></figure>

<p>这种错误基本都是因为Python脚本的名称与模块的名称重复导致的。像我这个例子中就是因为<code>git.py</code>与<code>GitPython</code>模块中的文件名一样导致的。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3创建虚拟环境</title>
    <url>/2019/01/13/Python3-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Python虚拟环境主要是为了解决Python多版本及模块间版本兼容的问题。创建虚拟环境的方法很简单，使用下面的命令即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m venv PySparkEnv</span><br></pre></td></tr></table></figure>

<p>PySparkEnv即虚拟环境的主目录。如果要启用这个虚拟环境的话，使用以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source PySparkEnv/<span class="built_in">bin</span>/activate</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Node JS 安装</title>
    <url>/2025/09/28/Node-JS-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 ~]# <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS release 6.6</span><br></pre></td></tr></table></figure>

<h1 id="下载-nodejs"><a href="#下载-nodejs" class="headerlink" title="下载 nodejs"></a>下载 nodejs</h1><p>下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<p>我下载的是 Linux Binaries (.tar.gz) 64-bit</p>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 letv]# tar xzvf node-v4.2.2-linux-x64.tar.gz</span><br><span class="line">[root@vm-10-176-30-167 letv]# <span class="built_in">mv</span> node-v4.2.2-linux-x64 nodejs</span><br></pre></td></tr></table></figure>

<p>为了缩短目录名字，将解压后的目录重命名为 nodejs。</p>
<h1 id="配置-path"><a href="#配置-path" class="headerlink" title="配置 path"></a>配置 path</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 letv]# vi /etc/profile</span><br></pre></td></tr></table></figure>

<p>添加以下内容，并保存退出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$&#123;PATH&#125;</span>:/root/nodejs/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure>

<h1 id="测试-nodejs"><a href="#测试-nodejs" class="headerlink" title="测试 nodejs"></a>测试 nodejs</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 letv]# node -v</span><br><span class="line">v4.2.2</span><br><span class="line">[root@vm-10-176-30-167 letv]# npm -v</span><br><span class="line">2.14.7</span><br></pre></td></tr></table></figure>

<p>此时，node 和 npm 安装完成。</p>
<h1 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h1><p>创建一个目录，然后进入此目录并将其作为当前工作目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 letv]# <span class="built_in">mkdir</span> DataInspector</span><br><span class="line">[root@vm-10-176-30-167 letv]# <span class="built_in">cd</span> DataInspector/</span><br></pre></td></tr></table></figure>

<p>通过 npm init 命令为应用创建一个 package.json 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 DataInspector]# npm init</span><br></pre></td></tr></table></figure>

<p>此命令将要求你输入几个参数，例如此应用的名称和版本。 应用名称不能包含大写字母，如果默认应用名称包含大写字母会提示错误，并要求重新录入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: (DataInspector)</span><br><span class="line">Sorry, name can no longer contain capital letters.</span><br><span class="line">name: (DataInspector) data_inspector</span><br></pre></td></tr></table></figure>

<p>参数可以直接按“回车”键接受默认设置即可，下面这个除外：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">entry point: (index.js)</span><br></pre></td></tr></table></figure>

<p>键入 app.js 或者你所希望的名称，这是当前应用的入口文件。如果你希望采用默认的 index.js 文件名，只需按“回车”键即可。此处，我将应用入库文件名改为 app.js：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">entry point: (index.js) app.js</span><br></pre></td></tr></table></figure>

<p>接下来安装 Express 并将其保存到依赖列表中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 DataInspector]# npm install express --save</span><br></pre></td></tr></table></figure>

<p>如果只是临时安装 Express，不想将它添加到依赖列表中，只需略去 –save 参数即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 DataInspector]# npm install express</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装 Node 模块时，如果指定了 –save 参数，那么此模块将被添加到 package.json 文件中 dependencies 依赖列表中。 然后通过 npm install 命令即可自动安装依赖列表中所列出的所有模块。</p>
</blockquote>
<h1 id="Express-Hello-World"><a href="#Express-Hello-World" class="headerlink" title="Express Hello World"></a>Express Hello World</h1><p>创建 app.js 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 DataInspector]# vi app.js</span><br></pre></td></tr></table></figure>

<p>复制以下代码到 app.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">  	<span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line"> </span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening at http://%s:%s&#x27;</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码启动一个服务并监听从 3000 端口进入的所有连接请求。他将对所有 (&#x2F;) URL 或路由返回 “Hello World!” 字符串。对于其他所有路径全部返回404 Not Found。</p>
<blockquote>
<p>req (请求) 和 res (响应) 与 Node 提供的对象完全一致，因此，你可以调用 req.pipe()、req.on(‘data’, callback) 以及任何 Node 提供的方法。</p>
</blockquote>
<p>通过如下命令启动此应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 DataInspector]# node app.js</span><br><span class="line">Example app listening at http://:::3000</span><br></pre></td></tr></table></figure>

<p>然后在浏览器中打开 <a href="http://10.176.30.167:3000/">http://10.176.30.167:3000/</a> 并查看输出结果。如果是在个人电脑上，在浏览器中打开 <a href="http://localhost:3000/">http://localhost:3000/</a> 并查看数据结果。如果看到以下输出结果，则安装成功：<br><img src="/images/202509/37.png"></p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3操作MongoDB批量upsert</title>
    <url>/2018/11/19/Python3-%E6%93%8D%E4%BD%9C-MongoDB-%E6%89%B9%E9%87%8F-upsert/</url>
    <content><![CDATA[<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mongoClient = MongoClient(<span class="string">&#x27;mongodb://172.16.72.213:27017/&#x27;</span>)</span><br><span class="line">opsDb = mongoClient.ops</span><br><span class="line">azScheduled = opsDb.azScheduledFlow</span><br><span class="line"></span><br><span class="line">bulkOpers = []</span><br><span class="line"><span class="keyword">for</span> flow <span class="keyword">in</span> scheduledFlows.values():</span><br><span class="line">    bulkOpers.append(UpdateOne(&#123;<span class="string">&#x27;opsDt&#x27;</span>: opsDt, <span class="string">&#x27;projectId&#x27;</span>: flow[<span class="string">&#x27;projectId&#x27;</span>], <span class="string">&#x27;projectName&#x27;</span>: flow[<span class="string">&#x27;projectName&#x27;</span>], <span class="string">&#x27;flowName&#x27;</span>: flow[<span class="string">&#x27;flowName&#x27;</span>]&#125;, &#123;<span class="string">&#x27;$set&#x27;</span>: &#123;<span class="string">&#x27;opsDateTime&#x27;</span>: opsDtStr, <span class="string">&#x27;status&#x27;</span>: flow[<span class="string">&#x27;status&#x27;</span>], <span class="string">&#x27;startTime&#x27;</span>: flow[<span class="string">&#x27;startTime&#x27;</span>], <span class="string">&#x27;endTime&#x27;</span>: flow[<span class="string">&#x27;endTime&#x27;</span>], <span class="string">&#x27;elapsed&#x27;</span>: flow[<span class="string">&#x27;elapsed&#x27;</span>]&#125;&#125;, upsert=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">azScheduled.bulk_write(bulkOpers)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3连接MySQL并且读取Blob字段信息</title>
    <url>/2018/11/15/Python3-%E8%BF%9E%E6%8E%A5-MySQL-%E5%B9%B6%E4%B8%94%E8%AF%BB%E5%8F%96-Blob-%E5%AD%97%E6%AE%B5%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pip3 install mysql-connector-python</span><br><span class="line">Command <span class="string">&#x27;pip3&#x27;</span> <span class="keyword">not</span> found, but can be installed <span class="keyword">with</span>:</span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure>

<p>根据提示信息安装pip3。</p>
<p>根据MySQL官网建议应该安装8.0的驱动。我的安装：mysql-connector-python-8.0.13、protobuf-3.6.1、setuptools-40.6.2、six-1.11.0。</p>
<h1 id="读取MySQL数据"><a href="#读取MySQL数据" class="headerlink" title="读取MySQL数据"></a>读取MySQL数据</h1><p>以读取Azkaban中的triggers表数据为例。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;roHive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;hive@bigdata!23&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;172.16.72.22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;azkaban3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;raise_on_warnings&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;latin1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(**config)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line">query = (<span class="string">&quot;SELECT trigger_id, data FROM azkaban3.triggers&quot;</span>)</span><br><span class="line">cursor.execute(query)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (triggerId, triggerData) <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;triggerId=<span class="subst">&#123;triggerId&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<p>Azkaban的triggers表中的data字段是BLOB类型。因为我的Azkaban MySQL库采用的是latin1编码，如果连接时不设置字符集在读取data字段数据时在读取BLOB类型字段时会报如下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0x8b in position 1: invalid start byte</span><br></pre></td></tr></table></figure>

<p>因为data字段是采用gzip压缩的，所以需要解压，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (triggerId, triggerData) <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(gzip.decompress(<span class="built_in">bytes</span>(triggerData, encoding=<span class="string">&#x27;latin1&#x27;</span>)))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Azkaban</tag>
        <tag>调度系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3连接MongoDB并写入数据</title>
    <url>/2018/11/15/Python3%E8%BF%9E%E6%8E%A5MongoDB%E5%B9%B6%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="安装PyMongo"><a href="#安装PyMongo" class="headerlink" title="安装PyMongo"></a>安装PyMongo</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install pymongo</span><br><span class="line">Successfully installed pymongo-3.7.2</span><br></pre></td></tr></table></figure>

<h1 id="连接MongoDB并且批量插入操作"><a href="#连接MongoDB并且批量插入操作" class="headerlink" title="连接MongoDB并且批量插入操作"></a>连接MongoDB并且批量插入操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">opsDateTime = datetime.now().isoformat(timespec=<span class="string">&#x27;seconds&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;roHive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;hive@bigdata!23&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;172.16.72.22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;azkaban3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;raise_on_warnings&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;latin1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(**config)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line">query = (<span class="string">&quot;SELECT trigger_id, data FROM azkaban3.triggers&quot;</span>)</span><br><span class="line">cursor.execute(query)</span><br><span class="line"></span><br><span class="line">scheduledList = []</span><br><span class="line"><span class="keyword">for</span> (triggerId, triggerData) <span class="keyword">in</span> cursor:</span><br><span class="line">    triggerJson = json.loads(gzip.decompress(<span class="built_in">bytes</span>(triggerData, encoding=<span class="string">&#x27;latin1&#x27;</span>)))</span><br><span class="line">    actionJson = triggerJson[<span class="string">&#x27;actions&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;actionJson&#x27;</span>]</span><br><span class="line">    projectName = actionJson[<span class="string">&#x27;projectName&#x27;</span>]</span><br><span class="line">    flowName = actionJson[<span class="string">&#x27;flowName&#x27;</span>]</span><br><span class="line">    scheduledFlow = &#123;<span class="string">&#x27;opsDateTime&#x27;</span>: opsDateTime, <span class="string">&#x27;projectName&#x27;</span>: projectName, <span class="string">&#x27;flowName&#x27;</span>: flowName&#125;</span><br><span class="line">    scheduledList.append(scheduledFlow)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br><span class="line"></span><br><span class="line">mongoClient = MongoClient(<span class="string">&#x27;mongodb://172.16.72.213:27017/&#x27;</span>)</span><br><span class="line">opsDb = mongoClient.ops</span><br><span class="line">azScheduled = opsDb.azScheduledFlow</span><br><span class="line">azScheduled.insert_many(scheduledList)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3命令行交互不能使用方向键</title>
    <url>/2019/12/21/Python3-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E6%96%B9%E5%90%91%E9%94%AE/</url>
    <content><![CDATA[<p>自定义安装Python3后在命令行使用方向键时出现以下问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.4</span> (default, Dec <span class="number">11</span> <span class="number">2019</span>, <span class="number">17</span>:<span class="number">40</span>:08) </span><br><span class="line">[GCC <span class="number">7.4</span><span class="number">.0</span>] on linux</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>^[[A^[[B^[[C^[[D</span><br></pre></td></tr></table></figure>

<p>解决方法是安装readline：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install readline</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python虚拟环境管理</title>
    <url>/2024/12/22/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>在另外一篇文章已经讲了<a href="https://www.zhangjc.com/2024/12/17/Python-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/">Python版本管理</a>。本文主要讲Python虚拟环境管理。有了这两个方面的工具，就可以实现在Python的不同版本不同虚拟环境间方便地切换。</p>
<p>pyenv-virtualenv一般会随pyenv一起安装，也可以通过下文方式独立安装。</p>
<h1 id="什么是虚拟环境"><a href="#什么是虚拟环境" class="headerlink" title="什么是虚拟环境"></a>什么是虚拟环境</h1><p>一种采用协作式隔离的运行时环境，允许Python用户和应用程序在安装和升级Python分发包时不会干扰到同一系统上运行的其他Python应用程序的行为。</p>
<p>虚拟环境其实是一个目录树，其中安装有特定Python版本，以及许多其他包。</p>
<h1 id="为什么需要虚拟环境"><a href="#为什么需要虚拟环境" class="headerlink" title="为什么需要虚拟环境"></a>为什么需要虚拟环境</h1><p>Python应用程序通常会使用非标准库内的软件包和模块。因为可能需要修复特定的错误，或者使用库的过时版本的接口，应用程序有时需要特定版本的库。</p>
<p>这意味着一个Python安装可能无法满足每个应用程序的要求。如果应用程序A需要特定模块的1.0版本，但应用程序B需要2.0版本，则需求存在冲突，安装版本1.0或2.0将导致某一个应用程序无法运行。</p>
<p>这个问题的解决方案就是创建一个虚拟环境。然后，不同的应用将可以使用不同的虚拟环境。 要解决先前需求相冲突的例子，应用程序A可以拥有自己的安装了1.0版本的虚拟环境，而应用程序B则拥有安装了2.0版本的另一个虚拟环境。如果应用程序B要求将某个库升级到3.0版本，也不会影响应用程序A的环境。</p>
<h1 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv-virtualenv"></a>pyenv-virtualenv</h1><p>pyenv-viralenv是一个pyenv插件，它提供了在类UNIX系统上管理虚拟环境和conda环境的特性。</p>
<blockquote>
<p>pyenv-virtualenvwrapper是pyenv的另外一个管理虚拟环境的插件。选择pyenv-virtualenv的原因是，pyenv-virtualenvwrapper有助于与virtualenvwrapper进行交互，但是pyenv-virtualenv提供了更方便的命令，其中virtualenvs是第一种pyenv版本，可以（反）激活。也就是说，pyenv和virtualenvwrapper仍然是分开的，而pyenv-virtualenv是一个很好的组合。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下面将把最新开发版本的pyenv-virtualenv安装到$(pyenv root)&#x2F;plugins&#x2F;pyenv-virtualenv目录中。</p>
<blockquote>
<p><strong>重要提示</strong>: 如果将pyenv安装到一个非标准目录中，请确保将该仓库克隆到安装位置的“plugins”目录中。</p>
</blockquote>
<p>在这个目录中可以：</p>
<ul>
<li>检出特定的发布版标签。</li>
<li>通过运行git pull来下载最新的更改，从而获得最新的开发版本。<ol>
<li>检出pyenv-virtualenv至插件目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure></li>
<li>（可选）添加pyenv virtualenv-init至shell来自动激活虚拟环境。这完全是可选的，但是非常有用。请参阅下面的“<a href="https://www.zhangjc.com/2024/12/22/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/#%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">激活虚拟环境</a>”。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>重启shell以启用pyenv-virtualenv<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec &quot;$SHELL&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="与pyenv一起使用pyenv-virtualenv"><a href="#与pyenv一起使用pyenv-virtualenv" class="headerlink" title="与pyenv一起使用pyenv virtualenv"></a>与pyenv一起使用pyenv virtualenv</h2><p>要与pyenv一起使用创建Python版本的虚拟环境，运行pyenv virtualenv，指定所需的Python版本和虚拟环境目录的名称。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenv 3.13.1 scrat</span><br></pre></td></tr></table></figure>

<p>将在$(pyenv root)&#x2F;versions目录下一个名为scrat的文件夹中，创建一个基于Python 3.13.1的虚拟环境。</p>
<p>pyenv virtualenv将任何选项转发给实际创建虚拟环境的底层命令（conda、 virtualenv或python -m venv)。有关详细信息，请参阅pyenv virtualenv –help的输出。</p>
<h2 id="从当前版本创建虚拟环境"><a href="#从当前版本创建虚拟环境" class="headerlink" title="从当前版本创建虚拟环境"></a>从当前版本创建虚拟环境</h2><p>如果只有一个参数提供给pyenv virtualenv，那么将根据当前pyenv的Python版本并使用给定的名称创建虚拟环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pyenv version</span><br><span class="line">3.13.1 (set by /home/zhangjc/.pyenv/version)</span><br><span class="line">$ pyenv virtualenv venv3.13.1</span><br></pre></td></tr></table></figure>

<h2 id="列出已有的虚拟环境"><a href="#列出已有的虚拟环境" class="headerlink" title="列出已有的虚拟环境"></a>列出已有的虚拟环境</h2><p>pyenv virtualenvs显示已有的虚拟环境和conda环境列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenvs</span><br><span class="line">  3.13.1/envs/scrat (created from /home/zhangjc/.pyenv/versions/3.13.1)</span><br><span class="line">  scrat (created from /home/zhangjc/.pyenv/versions/3.13.1)</span><br></pre></td></tr></table></figure>

<p>每个虚拟环境有两个条目，较短的条目只是一个符号链接。</p>
<h2 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h2><p>一些外部工具（例如<a href="https://github.com/davidhalter/jedi">jedi</a>）可能需要您激活虚拟环境和conda环境。</p>
<p>如果eval “$(pyenv virtualenv-init -)”在shell中配置，当进入&#x2F;离开包含.python-version文件时会自动激活对应的虚拟环境，前提是.python-version中的虚拟环境的名称是有效的。使用pyenv virtualenvs命令查看有效虚拟环境清单，如上例中的scrat。pyenv使用.python-version文件来表示本地Python版本，可以使用pyenv local命令创建和删除这些文件。</p>
<p>可以手动激活和停用一个pyenv虚拟环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv activate &lt;name&gt;</span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure>

<h2 id="删除已有的虚拟环境"><a href="#删除已有的虚拟环境" class="headerlink" title="删除已有的虚拟环境"></a>删除已有的虚拟环境</h2><p>删除$(pyenv root)&#x2F;versions和$(pyenv root)&#x2F;versions&#x2F;{version}&#x2F;envs中的目录将删除虚拟环境，或者您可以运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv uninstall my-virtual-env</span><br></pre></td></tr></table></figure>

<p>也可以使用virtualenv-delete命令删除已有的虚拟环境，例如，可以运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv-delete my-virtual-env</span><br></pre></td></tr></table></figure>

<p>这将删除名为my-virtual-env的虚拟环境。</p>
<h2 id="特殊环境变量"><a href="#特殊环境变量" class="headerlink" title="特殊环境变量"></a>特殊环境变量</h2><p>可以设置某些环境变量来控制pyenv-virtualenv。</p>
<ul>
<li>PYENV_VIRTUALENV_CACHE_PATH：如果设置了，则指定一个目录用于缓存下载的包文件。</li>
<li>VIRTUALENV_VERSION：如果设置了，则强制pyenv-virtualenv安装所需的virtualenv版本。如果没有安装virtualenv，pyenv-virtualenv将尝试安装给定版本的virtualenv。</li>
<li>GET_PIP：如果设置了并且venv优于virtualenv，则从指定位置使用get_pip.py。</li>
<li>GET_PIP_URL：如果设置了并且venv优于virtualenv，则从指定的URL下载get_pip.py。</li>
<li>PIP_VERSION：如果设置了并且venv优于virtualenv，则安装指定版本的pip。</li>
<li>PYENV_VIRTUALENV_VERBOSE_ACTIVATE：如果设置了，则显示一些关于激活和停用的详细输出。</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>REDUCE capability required is more than the supported max container capability in the cluster</title>
    <url>/2017/03/03/REDUCE-capability-required-is-more-than-the-supported-max-container-capability-in-the-cluster/</url>
    <content><![CDATA[<p>今天在运行MR程序时遇到以下信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">17/03/03 10:09:45 INFO mapreduce.Job: Job job_1488363995041_0002 failed with state KILLED due to: REDUCE capability required is more than the supported max container capability in the cluster. Killing the Job. reduceResourceRequest: &lt;memory:4096, vCores:1&gt; maxContainerCapability:&lt;memory:3096, vCores:8&gt;</span><br></pre></td></tr></table></figure>

<p>原因是Reduce Task在申请资源时超过了设置的最大可申请内容量。检查<code>yarn-site.xml</code>中的配置项<code>yarn.scheduler.maximum-allocation-mb</code>，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3096<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改配置为8192（默认配置也是8192），分发配置，并重启ResourceManager。再次运行MR成功。</p>
<p><strong>yarn.scheduler.minimum-allocation-mb &#x2F; yarn.scheduler.maximum-allocation-mb</strong></p>
<p>参数解释：单个可申请的最小&#x2F;最大内存资源量。比如设置为1024和3072，则运行MapRedce作业时，每个Task最少可申请1024MB内存，最多可申请3072MB内存。</p>
<p>默认值：1024 &#x2F; 8192</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>调度系统</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>调度系统</tag>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Python日志库：Loguru</title>
    <url>/2024/12/23/Python%E6%97%A5%E5%BF%97%E5%BA%93%EF%BC%9ALoguru/</url>
    <content><![CDATA[<p>Loguru是一个旨在为Python带来愉快的日志记录的库。使用Loguru，没有理由不从一开始就使用日志记录，这就像从Loguru导入日志一样简单from loguru import logger。此外，这个库通过添加一系列有用的功能来解决使用标准日志记录库的痛苦。在应用程序中使用日志应该是自动的，Loguru试图使其既令人愉快又强大。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install loguru</span><br></pre></td></tr></table></figure>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="开箱即用"><a href="#开箱即用" class="headerlink" title="开箱即用"></a>开箱即用</h2><p>Loguru的主要概念是有且只需要一个<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger">Logger</a>。为了方便起见，它预先配置从输出到stderr开始（但是这是完全可配置的）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&quot;That&#x27;s it, beautiful and simple logging!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger">Logger</a>只是一个将日志消息分发给已配置的处理程序的接口。</p>
<h2 id="无处理程序、无格式化、无过滤器：一个函数来规定所有"><a href="#无处理程序、无格式化、无过滤器：一个函数来规定所有" class="headerlink" title="无处理程序、无格式化、无过滤器：一个函数来规定所有"></a>无处理程序、无格式化、无过滤器：一个函数来规定所有</h2><p>如何添加处理程序? 如何设置日志格式? 如何过滤消息? 如何设置级别？答案是：<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.add">add()</a>函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(sys.stderr, <span class="built_in">format</span>=<span class="string">&quot;&#123;time&#125; &#123;level&#125; &#123;message&#125;&quot;</span>, <span class="built_in">filter</span>=<span class="string">&quot;my_module&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>此函数用来注册使用<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#record">record dict</a>来管理<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#message">log messages</a>上下文的<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#sink">sinks</a>。sink可以有多种形式：一个简单的函数、一个字符串路径、一个类似文件的对象、一个协程函数或一个内置的Handler。</p>
<p>注意，还可以通过使用在添加处理程序时返回的标识符来remove()以前添加的处理程序。如果希望取代默认的stderr处理程序，这尤其有用:只需调用logger.remove()来重新开始。</p>
<h2 id="更容易的旋转-保留-压缩日志文件"><a href="#更容易的旋转-保留-压缩日志文件" class="headerlink" title="更容易的旋转&#x2F;保留&#x2F;压缩日志文件"></a>更容易的旋转&#x2F;保留&#x2F;压缩日志文件</h2><p>如果将记录的消息发送到文件，只需使用字符串路径作为接收器。为了方便起见，它还可以自动计时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;file_&#123;time&#125;.log&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果需要旋转日志文件，或者删除较旧的日志文件，或者在关闭时压缩日志文件，也是很容易配置的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;file_1.log&quot;</span>, rotation=<span class="string">&quot;500 MB&quot;</span>)    <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.add(<span class="string">&quot;file_2.log&quot;</span>, rotation=<span class="string">&quot;12:00&quot;</span>)     <span class="comment"># New file is created each day at noon</span></span><br><span class="line">logger.add(<span class="string">&quot;file_3.log&quot;</span>, rotation=<span class="string">&quot;1 week&quot;</span>)    <span class="comment"># Once the file is too old, it&#x27;s rotated</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">&quot;file_X.log&quot;</span>, retention=<span class="string">&quot;10 days&quot;</span>)  <span class="comment"># Cleanup after some time</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">&quot;file_Y.log&quot;</span>, compression=<span class="string">&quot;zip&quot;</span>)    <span class="comment"># Save some loved space</span></span><br></pre></td></tr></table></figure>

<h2 id="大括号样式的现代字符串格式设置"><a href="#大括号样式的现代字符串格式设置" class="headerlink" title="大括号样式的现代字符串格式设置"></a>大括号样式的现代字符串格式设置</h2><p>Loguru喜欢更优雅和强大的{}格式化而不是%，日志记录函数实际上等效于str.format ()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;If you&#x27;re using Python &#123;&#125;, prefer &#123;feature&#125; of course!&quot;</span>, <span class="number">3.6</span>, feature=<span class="string">&quot;f-strings&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="在线程或主线程中捕获异常"><a href="#在线程或主线程中捕获异常" class="headerlink" title="在线程或主线程中捕获异常"></a>在线程或主线程中捕获异常</h2><p>您是否曾经遇到过程序意外崩溃，而在日志文件中没有看到任何信息？您是否注意到线程中发生的异常没有被记录？可以使用catch ()装饰器&#x2F;上下文管理器解决这个问题，该管理器确保任何错误都被正确地传递到logger。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="comment"># An error? It&#x27;s caught anyway!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (x + y + z)</span><br></pre></td></tr></table></figure>

<h2 id="优美的彩色日志"><a href="#优美的彩色日志" class="headerlink" title="优美的彩色日志"></a>优美的彩色日志</h2><p>如果终端兼容，Loguru会自动为日志添加颜色。可以在接收器格式中用markup tags来定义喜欢的样式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(sys.stdout, colorize=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;&lt;green&gt;&#123;time&#125;&lt;/green&gt; &lt;level&gt;&#123;message&#125;&lt;/level&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="异步、线程安全、多进程安全"><a href="#异步、线程安全、多进程安全" class="headerlink" title="异步、线程安全、多进程安全"></a>异步、线程安全、多进程安全</h2><p>默认情况下，添加到<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger">logger</a>的所有接收器都是线程安全的。它们不是多进程安全的，但是可以对消息进行enqueue以确保日志的完整性。如果需要异步日志记录，也可以使用同样的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;somefile.log&quot;</span>, enqueue=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>也支持作为接收器的协同函数，并且应该使用complete()进行等待。</p>
<h2 id="完全描述例外"><a href="#完全描述例外" class="headerlink" title="完全描述例外"></a>完全描述例外</h2><p>记录代码中发生的异常对于跟踪bug非常重要，但是如果不知道为什么会失败，那么记录异常就完全没有用处。Loguru允许显示整个堆栈跟踪，包括变量的值，从而帮助识别问题（感谢<a href="https://github.com/Qix-/better-exceptions">better_exception</a>！）。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Caution, &quot;diagnose=True&quot; is the default and may leak sensitive data in prod</span></span><br><span class="line">logger.add(<span class="string">&quot;out.log&quot;</span>, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nested</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func(<span class="number">5</span>, c)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        logger.exception(<span class="string">&quot;What?!&quot;</span>)</span><br><span class="line"></span><br><span class="line">nested(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2018-07-17 01:38:43.975 | ERROR    | __main__:nested:10 - What?!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">  File &quot;test.py&quot;, line 12, in &lt;module&gt;</span><br><span class="line">    nested(0)</span><br><span class="line">    └ &lt;function nested at 0x7f5c755322f0&gt;</span><br><span class="line"></span><br><span class="line">&gt; File &quot;test.py&quot;, line 8, in nested</span><br><span class="line">    func(5, c)</span><br><span class="line">    │       └ 0</span><br><span class="line">    └ &lt;function func at 0x7f5c79fc2e18&gt;</span><br><span class="line"></span><br><span class="line">  File &quot;test.py&quot;, line 4, in func</span><br><span class="line">    return a / b</span><br><span class="line">           │   └ 0</span><br><span class="line">           └ 5</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<p>注意，由于帧数据不可用，这个特性不能在默认的Python REPL上工作。参考：<a href="https://loguru.readthedocs.io/en/stable/resources/recipes.html#security-considerations-when-using-loguru">Security considerations when using Loguru</a>。</p>
<h2 id="根据需要结构化日志"><a href="#根据需要结构化日志" class="headerlink" title="根据需要结构化日志"></a>根据需要结构化日志</h2><p>是否希望将日志序列化以便于解析或传递它们？使用serialize序列化参数，每个日志消息在发送到配置的接收器之前都将转换为JSON字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(custom_sink_function, serialize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>通过使用bind()，可以通过修改额外的record属性添加消息上下文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;file.log&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;&#123;extra[ip]&#125; &#123;extra[user]&#125; &#123;message&#125;&quot;</span>)</span><br><span class="line">context_logger = logger.bind(ip=<span class="string">&quot;192.168.0.1&quot;</span>, user=<span class="string">&quot;someone&quot;</span>)</span><br><span class="line">context_logger.info(<span class="string">&quot;Contextualize your logger easily&quot;</span>)</span><br><span class="line">context_logger.bind(user=<span class="string">&quot;someone_else&quot;</span>).info(<span class="string">&quot;Inline binding of extra attribute&quot;</span>)</span><br><span class="line">context_logger.info(<span class="string">&quot;Use kwargs to add context during formatting: &#123;user&#125;&quot;</span>, user=<span class="string">&quot;anybody&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>可以使用<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.contextualize">contextualize()</a>临时修改上下文局部状态：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> logger.contextualize(task=task_id):</span><br><span class="line">    do_something()</span><br><span class="line">    logger.info(<span class="string">&quot;End of task&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>通过组合bind()和filter，可以对日志进行更细粒度的控制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;special.log&quot;</span>, <span class="built_in">filter</span>=<span class="keyword">lambda</span> record: <span class="string">&quot;special&quot;</span> <span class="keyword">in</span> record[<span class="string">&quot;extra&quot;</span>])</span><br><span class="line">logger.debug(<span class="string">&quot;This message is not logged to the file&quot;</span>)</span><br><span class="line">logger.bind(special=<span class="literal">True</span>).info(<span class="string">&quot;This message, though, is logged to the file!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>最后，<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.patch">patch()</a>方法允许将动态值附加到每条新消息记录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(sys.stderr, <span class="built_in">format</span>=<span class="string">&quot;&#123;extra[utc]&#125; &#123;message&#125;&quot;</span>)</span><br><span class="line">logger = logger.patch(<span class="keyword">lambda</span> record: record[<span class="string">&quot;extra&quot;</span>].update(utc=datetime.utcnow()))</span><br></pre></td></tr></table></figure>

<h2 id="延迟求值代价函数"><a href="#延迟求值代价函数" class="headerlink" title="延迟求值代价函数"></a>延迟求值代价函数</h2><p>有时希望在生产环境中记录详细信息而不会影响性能，可以使用<a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.opt">opt()</a>方法来实现这一点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.opt(lazy=<span class="literal">True</span>).debug(<span class="string">&quot;If sink level &lt;= DEBUG: &#123;x&#125;&quot;</span>, x=<span class="keyword">lambda</span>: expensive_function(<span class="number">2</span>**<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># By the way, &quot;opt()&quot; serves many usages</span></span><br><span class="line">logger.opt(exception=<span class="literal">True</span>).info(<span class="string">&quot;Error stacktrace added to the log message (tuple accepted too)&quot;</span>)</span><br><span class="line">logger.opt(colors=<span class="literal">True</span>).info(<span class="string">&quot;Per message &lt;blue&gt;colors&lt;/blue&gt;&quot;</span>)</span><br><span class="line">logger.opt(record=<span class="literal">True</span>).info(<span class="string">&quot;Display values from the record (eg. &#123;record[thread]&#125;)&quot;</span>)</span><br><span class="line">logger.opt(raw=<span class="literal">True</span>).info(<span class="string">&quot;Bypass sink formatting\n&quot;</span>)</span><br><span class="line">logger.opt(depth=<span class="number">1</span>).info(<span class="string">&quot;Use parent stack context (useful within wrapped functions)&quot;</span>)</span><br><span class="line">logger.opt(capture=<span class="literal">False</span>).info(<span class="string">&quot;Keyword arguments not added to &#123;dest&#125; dict&quot;</span>, dest=<span class="string">&quot;extra&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="自定义级别"><a href="#自定义级别" class="headerlink" title="自定义级别"></a>自定义级别</h2><p>Loguru提供了所有添加trace()和success()的标准日志记录级别。是否需要更多？然后，使用level()函数创建它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_level = logger.level(<span class="string">&quot;SNAKY&quot;</span>, no=<span class="number">38</span>, color=<span class="string">&quot;&lt;yellow&gt;&quot;</span>, icon=<span class="string">&quot;🐍&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger.log(<span class="string">&quot;SNAKY&quot;</span>, <span class="string">&quot;Here we go!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="更好的处理日期时间"><a href="#更好的处理日期时间" class="headerlink" title="更好的处理日期时间"></a>更好的处理日期时间</h2><p>标准日志记录中充斥着诸如datefmt或msecs、%(asctime)s和%(created)s之类的参数，没有时区信息的朴素日期时间，没有直观的格式设置等等。Loguru解决了这个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;file.log&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="适用于脚本和库"><a href="#适用于脚本和库" class="headerlink" title="适用于脚本和库"></a>适用于脚本和库</h2><p>在脚本中使用日志记录器很容易，并且可以在开始时configure()。要在库中使用Loguru，请记住永远不要调用add()，而是使用disable()，这样日志记录函数就变为no-op。如果开发人员希望查看库的日志，他们可以再次enable()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For scripts</span></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&quot;handlers&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;sink&quot;</span>: sys.stdout, <span class="string">&quot;format&quot;</span>: <span class="string">&quot;&#123;time&#125; - &#123;message&#125;&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;sink&quot;</span>: <span class="string">&quot;file.log&quot;</span>, <span class="string">&quot;serialize&quot;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;extra&quot;</span>: &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;someone&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">logger.configure(**config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For libraries, should be your library&#x27;s `__name__`</span></span><br><span class="line">logger.disable(<span class="string">&quot;my_library&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;No matter added sinks, this message is not displayed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># In your application, enable the logger in the library</span></span><br><span class="line">logger.enable(<span class="string">&quot;my_library&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;This message however is propagated to the sinks&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>为了更加方便，还可以使用loguru-config库直接从配置文件设置日志记录器。</p>
<h2 id="与标准日志记录完全兼容"><a href="#与标准日志记录完全兼容" class="headerlink" title="与标准日志记录完全兼容"></a>与标准日志记录完全兼容</h2><p>是否希望使用内置的日志Handler作为Loguru接收器？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handler = logging.handlers.SysLogHandler(address=(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">514</span>))</span><br><span class="line">logger.add(handler)</span><br></pre></td></tr></table></figure>

<p>是否需要将Loguru消息传播到标准日志？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PropagateHandler</span>(logging.Handler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emit</span>(<span class="params">self, record: logging.LogRecord</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        logging.getLogger(record.name).handle(record)</span><br><span class="line"></span><br><span class="line">logger.add(PropagateHandler(), <span class="built_in">format</span>=<span class="string">&quot;&#123;message&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>是否想要拦截到Loguru接收器的标准日志消息？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterceptHandler</span>(logging.Handler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emit</span>(<span class="params">self, record: logging.LogRecord</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># Get corresponding Loguru level if it exists.</span></span><br><span class="line">        level: <span class="built_in">str</span> | <span class="built_in">int</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            level = logger.level(record.levelname).name</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            level = record.levelno</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Find caller from where originated the logged message.</span></span><br><span class="line">        frame, depth = inspect.currentframe(), <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> frame <span class="keyword">and</span> (depth == <span class="number">0</span> <span class="keyword">or</span> frame.f_code.co_filename == logging.__file__):</span><br><span class="line">            frame = frame.f_back</span><br><span class="line">            depth += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        logger.opt(depth=depth, exception=record.exc_info).log(level, record.getMessage())</span><br><span class="line"></span><br><span class="line">logging.basicConfig(handlers=[InterceptHandler()], level=<span class="number">0</span>, force=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="通过环境变量的个性化默认值"><a href="#通过环境变量的个性化默认值" class="headerlink" title="通过环境变量的个性化默认值"></a>通过环境变量的个性化默认值</h2><p>是否不喜欢默认的日志记录器格式？喜欢另一种DEBUG颜色？没问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux / OSX</span></span><br><span class="line">export LOGURU_FORMAT=<span class="string">&quot;&#123;time&#125; | &lt;lvl&gt;&#123;message&#125;&lt;/lvl&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">setx LOGURU_DEBUG_COLOR <span class="string">&quot;&lt;green&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="方便的解析器"><a href="#方便的解析器" class="headerlink" title="方便的解析器"></a>方便的解析器</h2><p>从生成的日志中提取特定信息通常很有用，这就是Loguru提供parse()方法帮助处理日志和正则表达式的原因。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = <span class="string">r&quot;(?P&lt;time&gt;.*) - (?P&lt;level&gt;[0-9]+) - (?P&lt;message&gt;.*)&quot;</span>  <span class="comment"># Regex with named groups</span></span><br><span class="line">caster_dict = <span class="built_in">dict</span>(time=dateutil.parser.parse, level=<span class="built_in">int</span>)        <span class="comment"># Transform matching groups</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> groups <span class="keyword">in</span> logger.parse(<span class="string">&quot;file.log&quot;</span>, pattern, cast=caster_dict):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Parsed:&quot;</span>, groups)</span><br><span class="line">    <span class="comment"># &#123;&quot;level&quot;: 30, &quot;message&quot;: &quot;Log example&quot;, &quot;time&quot;: datetime(2018, 12, 09, 11, 23, 55)&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="详尽的通知"><a href="#详尽的通知" class="headerlink" title="详尽的通知"></a>详尽的通知</h2><p>Loguru可以很容易地与一流的<a href="https://github.com/notifiers/notifiers">notifiers</a>库（必须单独安装）组合在一起，以便在程序意外失败时接收电子邮件或发送许多其他类型的通知。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> notifiers</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;you@gmail.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;abc123&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>: <span class="string">&quot;dest@gmail.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send a single notification</span></span><br><span class="line">notifier = notifiers.get_notifier(<span class="string">&quot;gmail&quot;</span>)</span><br><span class="line">notifier.notify(message=<span class="string">&quot;The application is running!&quot;</span>, **params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Be alerted on each error message</span></span><br><span class="line"><span class="keyword">from</span> notifiers.logging <span class="keyword">import</span> NotificationHandler</span><br><span class="line"></span><br><span class="line">handler = NotificationHandler(<span class="string">&quot;gmail&quot;</span>, defaults=params)</span><br><span class="line">logger.add(handler, level=<span class="string">&quot;ERROR&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Loguru</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ranger Admin安装MySQL初始化问题解决</title>
    <url>/2020/12/01/Ranger-Admin%E5%AE%89%E8%A3%85MySQL%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>告警信息及如何解决见我的另外一篇博客：<a href="https://www.zhangjc.com/2020/11/27/MySQL-JDBC-%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8%EF%BC%9Ajavax-net-ssl-SSLException-closing-inbound-before-receiving-peer-s-close-notify/">MySQL JDBC连接异常：javax.net.ssl.SSLException: closing inbound before receiving peer’s close_notify</a></p>
<p>但是Ranger的安装配置<code>install.properties</code>中未启用ssl，配置信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#SSL config</span><br><span class="line">db_ssl_enabled=false</span><br><span class="line">db_ssl_required=false</span><br><span class="line">db_ssl_verifyServerCertificate=false</span><br><span class="line">#db_ssl_auth_type=1-way|2-way, where 1-way represents standard one way ssl authentication and 2-way represents mutual ssl authentication</span><br><span class="line">db_ssl_auth_type=2-way</span><br><span class="line">javax_net_ssl_keyStore=</span><br><span class="line">javax_net_ssl_keyStorePassword=</span><br><span class="line">javax_net_ssl_trustStore=</span><br><span class="line">javax_net_ssl_trustStorePassword=</span><br></pre></td></tr></table></figure>

<p>跟踪源代码发现安装过程只处理了启用ssl的情况，但是新版本的mysql默认是需要启用ssl的。修改Ranger安装源代码（apache-ranger-1.2.0&#x2F;security-admin&#x2F;scripts&#x2F;db_setup.py）增加下面代码中的221、222行，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">210</span>    <span class="keyword">def</span> <span class="title function_">get_jisql_cmd</span>(<span class="params">self, user, password ,db_name</span>):</span><br><span class="line"><span class="number">211</span>        path = RANGER_ADMIN_HOME</span><br><span class="line"><span class="number">212</span>        db_ssl_param=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="number">213</span>        db_ssl_cert_param=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="number">214</span>        <span class="keyword">if</span> <span class="variable language_">self</span>.db_ssl_enabled == <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line"><span class="number">215</span>            db_ssl_param=<span class="string">&quot;?useSSL=%s&amp;requireSSL=%s&amp;verifyServerCertificate=%s&quot;</span> %(<span class="variable language_">self</span>.db_ssl_enabled,<span class="variable language_">self</span>.db_ssl_required,<span class="variable language_">self</span>.db_ssl_verifyServerCertificate)</span><br><span class="line"><span class="number">216</span>            <span class="keyword">if</span> <span class="variable language_">self</span>.db_ssl_verifyServerCertificate == <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line"><span class="number">217</span>                <span class="keyword">if</span> <span class="variable language_">self</span>.db_ssl_auth_type == <span class="string">&#x27;1-way&#x27;</span>:</span><br><span class="line"><span class="number">218</span>                    db_ssl_cert_param=<span class="string">&quot; -Djavax.net.ssl.trustStore=%s -Djavax.net.ssl.trustStorePassword=%s &quot;</span> %(<span class="variable language_">self</span>.javax_net_ssl_trustStore,<span class="variable language_">self</span>.javax_net_ssl_trustStorePassword)</span><br><span class="line"><span class="number">219</span>                <span class="keyword">else</span>:</span><br><span class="line"><span class="number">220</span>                    db_ssl_cert_param=<span class="string">&quot; -Djavax.net.ssl.keyStore=%s -Djavax.net.ssl.keyStorePassword=%s -Djavax.net.ssl.trustStore=%s -Djavax.net.ssl.trustStorePassword=%s &quot;</span> %(<span class="variable language_">self</span>.javax_net_ssl_keyStore,<span class="variable language_">self</span>.javax_net_ssl_keyStorePassword,<span class="variable language_">self</span>.javax_net_ssl_trustStore,<span class="variable language_">self</span>.javax_net_ssl_trustStorePassword)</span><br><span class="line"><span class="number">221</span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="number">222</span>            db_ssl_param=<span class="string">&#x27;?useSSL=false&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据安全</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Ranger</tag>
        <tag>数据安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Ranger Hive Service连接测试失败问题解决</title>
    <url>/2020/12/02/Ranger-Hive-Service%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>异常信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">org.apache.ranger.plugin.client.HadoopException: Unable to connect to Hive Thrift Server instance..</span><br><span class="line">Unable to connect to Hive Thrift Server instance..</span><br><span class="line">Could not open client transport with JDBC Uri: jdbc:hive2://192.168.72.212:10000: Could not establish connection to jdbc:hive2://192.168.72.212:10000: Required field &#x27;client_protocol&#x27; is unset! Struct:TOpenSessionReq(client_protocol:null, configuration:&#123;set:hiveconf:hive.server2.thrift.resultset.default.fetch.size=1000, use:database=default&#125;).</span><br><span class="line">Could not establish connection to jdbc:hive2://192.168.72.212:10000: Required field &#x27;client_protocol&#x27; is unset! Struct:TOpenSessionReq(client_protocol:null, configuration:&#123;set:hiveconf:hive.server2.thrift.resultset.default.fetch.size=1000, use:database=default&#125;).</span><br><span class="line">Required field &#x27;client_protocol&#x27; is unset! Struct:TOpenSessionReq(client_protocol:null, configuration:&#123;set:hiveconf:hive.server2.thrift.resultset.default.fetch.size=1000, use:database=default&#125;). </span><br></pre></td></tr></table></figure>

<p>百度后是因为Hive版本不匹配导致的。我的测试环境Hive版本是2.1.1，通过下面的命令发现确实版本不一致：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -name &quot;*hive*&quot;</span></span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive</span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive/ranger-hive-plugin-1.2.0.jar</span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive/hive-common-2.3.2.jar</span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive/hive-service-2.3.2.jar</span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive/hive-exec-2.3.2.jar</span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive/hive-metastore-2.3.2.jar</span><br><span class="line">./ews/webapp/WEB-INF/classes/ranger-plugins/hive/hive-jdbc-2.3.2.jar</span><br></pre></td></tr></table></figure>

<p>问题解决方法就显而易见了。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据安全</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Ranger</tag>
        <tag>数据安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 初探</title>
    <url>/2025/10/19/Redis-%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Redis 下载地址及安装说明官方地址：<a href="http://redis.io/download">http://redis.io/download</a>。Redis 目前没有官方支持的 Windows 平台版本。</p>
<p>用以下命令下载、解压、编译 Redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-3.2.0.tar.gz</span><br><span class="line">$ tar xzf redis-3.2.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-3.2.0</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>

<p>编译之后的二进制文件在 src 目录下。用以下命令启动 Redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ src/redis-server</span><br></pre></td></tr></table></figure>

<p>可以用 Redis 内置的客户端与 Redis 交互：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Java-客户端"><a href="#Java-客户端" class="headerlink" title="Java 客户端"></a>Java 客户端</h1><p>Redis 分语言的客户端列表可以从官网链接查看：<a href="http://redis.io/clients">http://redis.io/clients</a>。Jedis 是推荐的 Java 客户端，并且近 6 个月有更新，所以选用该客户端。Jedis 的 github 项目链接：<a href="https://github.com/xetorthio/jedis">https://github.com/xetorthio/jedis</a></p>
<p>Mave 依赖配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis编译安装过程问题</title>
    <url>/2025/10/27/Redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="jemalloc-jemalloc-h"><a href="#jemalloc-jemalloc-h" class="headerlink" title="jemalloc&#x2F;jemalloc.h"></a>jemalloc&#x2F;jemalloc.h</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">zmalloc.h:50:31: fatal error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="line"> #include &lt;jemalloc/jemalloc.h&gt;</span><br><span class="line">                               ^</span><br><span class="line">compilation terminated.</span><br><span class="line">make[1]: *** [adlist.o] Error 1</span><br><span class="line">make[1]: Leaving directory `/home/redis/redis-stable/src&#x27;</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<p>执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make distclean</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>如果问题未解决则使用以下命令再试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure>

<h1 id="tcl-8-5"><a href="#tcl-8-5" class="headerlink" title="tcl 8.5"></a>tcl 8.5</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">You need tcl 8.5 or newer in order to run the Redis test</span><br><span class="line">make[1]: *** [test] Error 1</span><br><span class="line">make[1]: Leaving directory `/home/redis/redis-stable/src&#x27;</span><br><span class="line">make: *** [test] Error 2</span><br></pre></td></tr></table></figure>

<p>下载 <a href="https://link.zhihu.com/?target=https://www.activestate.com/">Active State</a>。此处下载二进制包“ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz”。安装过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz</span><br><span class="line"><span class="built_in">mv</span> ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327 ActiveTcl-8.6</span><br><span class="line"><span class="built_in">cd</span> ActiveTcl-8.6</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>根据提示输入完成安装过程。将Tcl8.6加入Path中，将以下内容添加至&#x2F;etc&#x2F;profile.d&#x2F;tcl.sh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> TCL_HOME=/opt/ActiveTcl-8.6</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$TCL_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p>执行以下命令加载环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>安装完成后，在我的环境里面仍然提示上面的错误。查看runtest脚本源码，并使用which命令验证才发现是我的Docker</p>
<p>环境中没有安装which命令。-_-||</p>
<p>所以，一言不合就撸源代码是一个好习惯(*￣︶￣)</p>
<h1 id="release-h"><a href="#release-h" class="headerlink" title="release.h"></a>release.h</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">release.c:37:21: fatal error: release.h: No such file or directory</span><br><span class="line"> #include &quot;release.h&quot;</span><br><span class="line">                     ^</span><br><span class="line">compilation terminated.</span><br><span class="line">make[1]: *** [release.o] Error 1</span><br></pre></td></tr></table></figure>

<p>竟然是因为下面的脚本没有权限导致的。遇到问题仔细检查Log的重要性啊！！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src &amp;&amp; make all</span><br><span class="line">sh: ./mkreleasehdr.sh: Permission denied</span><br><span class="line">make[1]: Entering directory `/home/redis/redis-6.2.6/src<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    CC Makefile.dep</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell $0</title>
    <url>/2016/09/11/Shell-dollar0/</url>
    <content><![CDATA[<p>我们已经知道在Shell中<code>$0</code>表示Shell脚本的文件名，但在有脚本调用的情形中，子脚本中的<code>$0</code>会是什么值呢？我们通过下面的实例来看。</p>
<p>已测试系统列表：</p>
<ul>
<li>Mac OS X EI Capitan 10.11.6</li>
<li>Ubuntu 16.04 LTS (GNU&#x2F;Linux 4.4.0-28-generic x86_64)</li>
</ul>
<p>父脚本<code>a.sh</code>，位置<code>test1/a.sh</code>，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line">echo &quot;$0&quot;</span><br><span class="line">. ../test2/b.sh</span><br></pre></td></tr></table></figure>

<p>子脚本<code>b.sh</code>，位置<code>test2/b.sh</code>，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;the sub script is: $0&quot;</span><br></pre></td></tr></table></figure>

<p>此时执行父脚本输出结果是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh a.sh</span></span><br><span class="line">the main script is a.sh</span><br><span class="line">the sub script is: a.sh</span><br></pre></td></tr></table></figure>

<p>如果父脚本内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;the main script is $0&quot;</span><br><span class="line">../test2/b.sh</span><br></pre></td></tr></table></figure>

<p>则输出结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh a.sh</span> </span><br><span class="line">the main script is a.sh</span><br><span class="line">the sub script is: ../test2/b.sh</span><br></pre></td></tr></table></figure>

<p>可见，在父脚本中调用子脚本的不同，在子脚本中<code>$0</code>的值也不同。至于为什么会这样本人需要继续学习以找到答案。</p>
<blockquote>
<p>测试过程中注意给脚本赋可执行权限。</p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell字符串截取技巧</title>
    <url>/2020/11/26/Shell-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ul>
<li># 号截取：删除左边字符，保留右边字符。</li>
<li>## 号截取：删除左边字符，保留右边字符。</li>
<li>%号截取：删除右边字符，保留左边字符</li>
<li>%% 号截取：删除右边字符，保留左边字符</li>
</ul>
<p>示例一：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">var=<span class="string">&#x27;abcbd&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var#*b&#125;</span></span></span><br><span class="line">cbd</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var##*b&#125;</span></span></span><br><span class="line">d</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var%b*&#125;</span></span></span><br><span class="line">abc</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var%%b*&#125;</span></span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span> line <span class="keyword">in</span> `<span class="built_in">cat</span> /etc/passwd`; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;line%%:*&#125;</span>; <span class="keyword">done</span></span></span><br><span class="line">root</span><br><span class="line">daemon</span><br><span class="line">bin</span><br><span class="line">sys</span><br><span class="line">sync</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Ranger 2.1.0 Admin安装</title>
    <url>/2021/07/02/Ranger-2-1-0-Admin%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Creating-MySQL-user-ranger2-failed"><a href="#Creating-MySQL-user-ranger2-failed" class="headerlink" title="Creating MySQL user ranger2 failed"></a>Creating MySQL user ranger2 failed</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2021-07-01 18:44:53,480  [E] Creating MySQL user ranger2 failed..</span><br><span class="line">2021-07-01 18:44:53,496  [E] DB schema setup failed! Please contact Administrator.</span><br></pre></td></tr></table></figure>

<p>原因是Ranger安装程序默认会使用MySQL的root账号创建所需要的账号，也就是DBA过程。如果不需要安装程序自动创建，则将<code>install.properties</code>中的以下配置前的#号去掉：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">setup_mode=SeparateDBA</span><br></pre></td></tr></table></figure>

<h1 id="Specified-key-was-too-long-max-key-length-is-767-bytes"><a href="#Specified-key-was-too-long-max-key-length-is-767-bytes" class="headerlink" title="Specified key was too long; max key length is 767 bytes"></a>Specified key was too long; max key length is 767 bytes</h1><ul>
<li>第一种报错：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Error executing: CREATE TABLE `x_portal_user` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `create_time` datetime DEFAULT NULL,   `update_time` datetime DEFAULT NULL,   `added_by_id` bigint(20) DEFAULT NULL,   `upd_by_id` bigint(20) DEFAULT NULL,   `first_name` varchar(1022) DEFAULT NULL,   `last_name` varchar(1022) DEFAULT NULL,   `pub_scr_name` varchar(2048) DEFAULT NULL,   `login_id` varchar(767) DEFAULT NULL,   `password` varchar(512) NOT NULL,   `email` varchar(512) DEFAULT NULL,   `status` int(11) NOT NULL DEFAULT &#x27;0&#x27;,   `user_src` int(11) NOT NULL DEFAULT &#x27;0&#x27;,   `notes` varchar(4000) DEFAULT NULL,   `other_attributes` varchar(4000) DEFAULT NULL,   PRIMARY KEY (`id`),   UNIQUE KEY `x_portal_user_UK_login_id` (`login_id`),   UNIQUE KEY `x_portal_user_UK_email` (`email`),   KEY `x_portal_user_FK_added_by_id` (`added_by_id`),   KEY `x_portal_user_FK_upd_by_id` (`upd_by_id`),   KEY `x_portal_user_cr_time` (`create_time`),   KEY `x_portal_user_up_time` (`update_time`),   KEY `x_portal_user_name` (`first_name`(767)),   KEY `x_portal_user_email` (`email`),   CONSTRAINT `x_portal_user_FK_added_by_id` FOREIGN KEY (`added_by_id`) REFERENCES `x_portal_user` (`id`),   CONSTRAINT `x_portal_user_FK_upd_by_id` FOREIGN KEY (`upd_by_id`) REFERENCES`x_portal_user` (`id`) ) ROW_FORMAT=DYNAMIC;</span><br><span class="line">java.sql.SQLSyntaxErrorException: Specified key was too long; max key length is 767 bytes</span><br><span class="line">SQLException : SQL state: 42000 java.sql.SQLSyntaxErrorException: Specified key was too long; max key length is 767 bytes ErrorCode: 1071</span><br><span class="line">2021-07-02 10:44:54,411  [E] ranger_core_db_mysql.sql file import failed!</span><br></pre></td></tr></table></figure>

<p>修改对应字段的长度可以解决。注意<code>UTF8</code>每个字符4个字节。</p>
<ul>
<li>第二种报错：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Error executing: CREATE TABLE `x_portal_user` (   `id` bigint(20) NOT NULL AUTO_INCREMENT,   `create_time` datetime DEFAULT NULL,   `update_time` datetime DEFAULT NULL,   `added_by_id` bigint(20) DEFAULT NULL,   `upd_by_id` bigint(20) DEFAULT NULL,   `first_name` varchar(128) DEFAULT NULL,   `last_name` varchar(1022) DEFAULT NULL,   `pub_scr_name` varchar(2048) DEFAULT NULL,  `login_id` varchar(128) DEFAULT NULL,   `password` varchar(512) NOT NULL,   `email` varchar(128) DEFAULT NULL,   `status` int(11) NOT NULL DEFAULT &#x27;0&#x27;,   `user_src` int(11) NOT NULL DEFAULT &#x27;0&#x27;,   `notes` varchar(4000) DEFAULT NULL,   `other_attributes` varchar(4000) DEFAULT NULL,   PRIMARY KEY (`id`),   UNIQUE KEY `x_portal_user_UK_login_id` (`login_id`),   UNIQUE KEY `x_portal_user_UK_email` (`email`),   KEY `x_portal_user_FK_added_by_id` (`added_by_id`),   KEY `x_portal_user_FK_upd_by_id` (`upd_by_id`),   KEY `x_portal_user_cr_time` (`create_time`),   KEY `x_portal_user_up_time` (`update_time`),   KEY `x_portal_user_name` (`first_name`(767)),   KEY `x_portal_user_email` (`email`),   CONSTRAINT `x_portal_user_FK_added_by_id` FOREIGN KEY (`added_by_id`) REFERENCES `x_portal_user` (`id`),   CONSTRAINT `x_portal_user_FK_upd_by_id` FOREIGN KEY (`upd_by_id`) REFERENCES `x_portal_user` (`id`) ) ROW_FORMAT=DYNAMIC;</span><br><span class="line">java.sql.SQLException: Incorrect prefix key; the used key part isn&#x27;t a string, the used length is longer than the key part, or the storage engine doesn&#x27;t support unique prefix keys</span><br><span class="line">SQLException : SQL state: HY000 java.sql.SQLException: Incorrect prefix key; the used key part isn&#x27;t a string, the used length is longer than the key part, or the storage engine doesn&#x27;t support unique prefix keys ErrorCode: 1089</span><br><span class="line">2021-07-02 11:51:23,763  [E] ranger_core_db_mysql.sql file import failed!</span><br></pre></td></tr></table></figure>

<p>去掉<code>prefix key</code>的定义即可。</p>
<p>修改后的建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `x_portal_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `added_by_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `upd_by_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `first_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `last_name` <span class="type">varchar</span>(<span class="number">1022</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pub_scr_name` <span class="type">varchar</span>(<span class="number">2048</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `login_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `user_src` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `notes` <span class="type">varchar</span>(<span class="number">4000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `other_attributes` <span class="type">varchar</span>(<span class="number">4000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `x_portal_user_UK_login_id` (`login_id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `x_portal_user_UK_email` (`email`),</span><br><span class="line">  KEY `x_portal_user_FK_added_by_id` (`added_by_id`),</span><br><span class="line">  KEY `x_portal_user_FK_upd_by_id` (`upd_by_id`),</span><br><span class="line">  KEY `x_portal_user_cr_time` (`create_time`),</span><br><span class="line">  KEY `x_portal_user_up_time` (`update_time`),</span><br><span class="line">  KEY `x_portal_user_name` (`first_name`),</span><br><span class="line">  KEY `x_portal_user_email` (`email`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `x_portal_user_FK_added_by_id` <span class="keyword">FOREIGN</span> KEY (`added_by_id`) <span class="keyword">REFERENCES</span> `x_portal_user` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `x_portal_user_FK_upd_by_id` <span class="keyword">FOREIGN</span> KEY (`upd_by_id`) <span class="keyword">REFERENCES</span> `x_portal_user` (`id`)</span><br><span class="line">) ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对整个建表脚本中的SQL都需要对应的修改。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据安全</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Ranger</tag>
        <tag>数据安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Rsyslog omhttp（HTTP输出模块）</title>
    <url>/2019/04/01/Rsyslog-omhttp%EF%BC%88HTTP-%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9D%97%EF%BC%89/</url>
    <content><![CDATA[<p>使用Rsyslog的omhttp模块可以将收集的日志数据以HTTP请求的方式输出。该模块支持单条&#x2F;批量发送数据，支持GZIP压缩，支持HTTPS。</p>
<p>Rsyslog默认未包含omhttp模块，需要重新编译。编译过程参考我的另外两篇博文：</p>
<ul>
<li><a href="https://www.zhangjc.com/2019/04/03/CentOS-7-3-%E7%BC%96%E8%AF%91-Rsyslog-8-1903-0/">CentOS 7.3 编译 Rsyslog 8.1903.0</a></li>
<li><a href="https://www.zhangjc.com/2019/04/03/CentOS-6-5-%E7%BC%96%E8%AF%91-Rsyslog-8-1903-0/">CentOS 6.5 编译 Rsyslog 8.1903.0</a></li>
</ul>
<p>CentOS 6.5系统下编译比较麻烦，可以下载我编译后的so文件：<a href="https://www.zhangjc.com/images/202502/omhttp.so">CentOS 6.5编译omhttp.so下载</a></p>
<p>一个简单的配置示例如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">module(load=&quot;omhttp&quot;)</span><br><span class="line">template(name=&quot;tpl1&quot; type=&quot;string&quot; string=&quot;&#123;\&quot;type\&quot;:\&quot;syslog\&quot;, \&quot;host\&quot;:\&quot;%HOSTNAME%\&quot;&#125;&quot;)</span><br><span class="line">action(</span><br><span class="line">    type=&quot;omhttp&quot;</span><br><span class="line">    server=&quot;127.0.0.1&quot;</span><br><span class="line">    serverport=&quot;8080&quot;</span><br><span class="line">    restpath=&quot;events&quot;</span><br><span class="line">    template=&quot;tpl1&quot;</span><br><span class="line">    action.resumeRetryCount=&quot;3&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>Rsyslog</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell文件判断条件</title>
    <url>/2016/09/11/Shell-%E6%96%87%E4%BB%B6%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6/</url>
    <content><![CDATA[<ol>
<li>-e filename：如果 filename 存在，则为真。</li>
<li>-d filename：如果 filename 为目录，则为真。</li>
<li>-f filename：如果 filename 为常规文件，则为真。</li>
<li>-L filename：如果 filename 为符号链接，则为真。</li>
<li>-r filename：如果 filename 可读，则为真。</li>
<li>-w filename：如果 filename 可写，则为真。</li>
<li>-x filename：如果 filename 可执行，则为真。</li>
<li>-s filename：如果文件长度不为 0，则为真。</li>
<li>-h filename：如果文件是软链接，则为真。</li>
<li>filename1 -nt filename2：如果 filename1 比 filename2 新，则为真。</li>
<li>filename1 -ot filename2：如果 filename1 比 filename2 旧，则为真。</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket.IO Java 客户端</title>
    <url>/2025/10/16/Socket-IO-Java-%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<p><a href="https://link.zhihu.com/?target=http://Socket.IO">Socket.IO</a> 是一个非常棒的项目；Java 是目前应用非常广的开发语言。两者的结合也是必然的。本篇翻译自 Socket.IO-client Java 项目的 github 主页。</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/socketio/socket.io-client-java">Socket.IO-client Java</a> 是 Socket.IO v1.x 的 Java 客户端类库，这个类库是从 <a href="https://link.zhihu.com/?target=https://github.com/socketio/socket.io-client">JavaScript client</a> 移植过来的。</p>
<p>参见：</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https://github.com/nkzawa/socket.io-android-chat">Android chat demo</a></li>
<li><a href="https://link.zhihu.com/?target=https://github.com/socketio/engine.io-client-java">engine.io-client-java</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>最新的包可以从 Maven 的中心仓库获取。你将需要安装依赖。</p>
<blockquote>
<p>注意：v0.6.1 之后，包名改为了 io.socket 。请确认更新了依赖配置。</p>
</blockquote>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>在 pom.xml 中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.socket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>socket.io-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>在 build.gradle 中，给 Android Studio 添加 gradle 依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">compile (<span class="string">&#x27;io.socket:socket.io-client:0.7.0&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// excluding org.json which is provided by Android</span></span><br><span class="line">  exclude group: <span class="string">&#x27;org.json&#x27;</span>, <span class="keyword">module</span>: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Socket.IO-client Java 几乎拥有跟原生 JS 客户端相同的 api 和特性。使用 IO.socket 初始化 Socket ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">socket = IO.socket(<span class="string">&quot;http://localhost&quot;</span>);</span><br><span class="line">socket.on(Socket.EVENT_CONNECT, <span class="keyword">new</span> <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">    socket.emit(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    socket.disconnect();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;).on(<span class="string">&quot;event&quot;</span>, <span class="keyword">new</span> <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;).on(Socket.EVENT_DISCONNECT, <span class="keyword">new</span>  <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">socket.connect();</span><br></pre></td></tr></table></figure>

<p>这个类库使用 <a href="https://link.zhihu.com/?target=http://www.json.org/">org.json</a> 解析和构造 JSON 字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sending an object</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">obj.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;server&quot;</span>);</span><br><span class="line">obj.put(<span class="string">&quot;binary&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">42</span>]);</span><br><span class="line">socket.emit(<span class="string">&quot;foo&quot;</span>, obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receiving an object</span></span><br><span class="line">socket.on(<span class="string">&quot;foo&quot;</span>, <span class="keyword">new</span> <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> (JSONObject)args[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>像下面这样设置选项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IO.<span class="type">Options</span> <span class="variable">opts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IO</span>.Options();</span><br><span class="line">opts.forceNew = <span class="literal">true</span>;</span><br><span class="line">opts.reconnection = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">socket = IO.socket(<span class="string">&quot;http://localhost&quot;</span>, opts);</span><br></pre></td></tr></table></figure>

<p>可以用 query 选项设置查询参数。请注意：如果当查询参数改变时不想复用一个缓存的 socket 实例，应该使用 forceNew 选项，可能的使用场景是如果你的应用允许用户退出，并且一个新的用户再次登录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IO.<span class="type">Options</span> <span class="variable">opts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IO</span>.Options();</span><br><span class="line">opts.forceNew = <span class="literal">true</span>;</span><br><span class="line">opts.query = <span class="string">&quot;auth_token=&quot;</span> + authToken;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> IO.socket(<span class="string">&quot;http://localhost&quot;</span>, opts);</span><br></pre></td></tr></table></figure>

<p>当服务器接收到一个消息时，可以用 Ack 获取一个回调：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">socket.emit(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;woot&quot;</span>, <span class="keyword">new</span> <span class="title class_">Ack</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>反之亦然：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ack from client to server</span></span><br><span class="line">socket.on(<span class="string">&quot;foo&quot;</span>, <span class="keyword">new</span> <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">    <span class="type">Ack</span> <span class="variable">ack</span> <span class="operator">=</span> (Ack) args[args.length - <span class="number">1</span>];</span><br><span class="line">    ack.call();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>SSL (HTTPS, WSS) 设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// default settings for all sockets</span></span><br><span class="line">IO.setDefaultSSLContext(mySSLContext);</span><br><span class="line">IO.setDefaultHostnameVerifier(myHostnameVerifier);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set as an option</span></span><br><span class="line">opts = <span class="keyword">new</span> <span class="title class_">IO</span>.Options();</span><br><span class="line">opts.sslContext = mySSLContext;</span><br><span class="line">opts.hostnameVerifier = myHostnameVerifier;</span><br><span class="line">socket = IO.socket(<span class="string">&quot;https://localhost&quot;</span>, opts);</span><br></pre></td></tr></table></figure>

<p>查阅 Javadoc 获取更多详情：<a href="http://socketio.github.io/socket.io-client-java/apidocs/">http://socketio.github.io/socket.io-client-java/apidocs/</a></p>
<h1 id="Transports-和-HTTP-头"><a href="#Transports-和-HTTP-头" class="headerlink" title="Transports 和 HTTP 头"></a>Transports 和 HTTP 头</h1><p>可以像下面这样访问 transports 和它们的 HTTP 头：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Called upon transport creation.</span></span><br><span class="line">socket.io().on(Manager.EVENT_TRANSPORT, <span class="keyword">new</span> <span class="title class_">Emitter</span>.listener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">    <span class="type">Transport</span> <span class="variable">transport</span> <span class="operator">=</span> (Transport)args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    transport.on(Transport.EVENT_REQUEST_HEADERS, <span class="keyword">new</span> <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; headers = (Map&lt;String, List&lt;String&gt;&gt;)args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// modify request headers</span></span><br><span class="line">        headers.put(<span class="string">&quot;Cookie&quot;</span>, Arrays.asList(<span class="string">&quot;foo=1;&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    transport.on(Transport.EVENT_RESPONSE_HEADERS, <span class="keyword">new</span> <span class="title class_">Emitter</span>.Listener() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Object... args)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; headers = (Map&lt;String, List&lt;String&gt;&gt;)args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// access response headers</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cookie</span> <span class="operator">=</span> headers.get(<span class="string">&quot;Set-Cookie&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>这个类库支持 JS 客户端支持的所有特性，包括 events、options、upgrading transport。完全支持 Android。</p>
<h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Socket.IO</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Socket.IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell条件变量替换</title>
    <url>/2016/09/11/Shell-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<p>Bash Shell可以进行变量的条件替换，条件放在<code>&#123;&#125;</code>中，只有条件发生时才进行替换：</p>
<ul>
<li>${v1:-$v2}</li>
</ul>
<p>当变量v1未定义或者值为空时，返回v2的值，否则返回v1的值。</p>
<ul>
<li>${v1:&#x3D;$v2}</li>
</ul>
<p>若变量v1未定义或者值为空时，在返回v2的值的同时将v2的值给v1。</p>
<ul>
<li>${v1:?message}</li>
</ul>
<p>若变量已赋值的话，正常替换。否则将消息message送到标准错误输出(若此替换出现在Shell程序中，那么该程序将终止运行)。</p>
<ul>
<li>${v1:+$v2}</li>
</ul>
<p>若变量已赋值的话，其值才用v2的值替换，否则不进行任何替换。</p>
<ul>
<li>${v1:offset}、${v1:offset:length}</li>
</ul>
<p>从变量中提取子串，这里offset和length可以是算术表达式。</p>
<ul>
<li>${&#35;v1}</li>
</ul>
<p>变量的字符个数(变量的字符个数，并不是变量个数）。</p>
<ul>
<li>${v1&#35;pattern}、${v1&#35;&#35;pattern}</li>
</ul>
<p>去掉v1中与pattern相匹配的部分，条件是v1的开头与pattern相匹配。&#35;与&#35;&#35;的区别在于一个是最短匹配模式，一个是最长匹配模式。</p>
<ul>
<li>${v1％pattern}、${v1％％pattern}</li>
</ul>
<p>与上一条规则类似，只是从v1的尾部与pattern相匹配，％与％％的区别与&#35;与&#35;&#35;一样。</p>
<ul>
<li>${v1&#x2F;pattern&#x2F;string}、${v1&#x2F;&#x2F;pattern&#x2F;string}</li>
</ul>
<p>进行变量内容的替换，把与pattern匹配的部分替换为string的内容，&#x2F;与&#x2F;&#x2F;的区别与上同。</p>
<p>注意：上述条件变量替换中，除第2条外，其余均不影响变量本身的值。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket.IO 聊天应用实例</title>
    <url>/2025/10/17/Socket-IO-%E8%81%8A%E5%A4%A9%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>本篇翻译自 <a href="http://socket.io/">http://Socket.IO</a> 官网的入门实例：<a href="http://socket.io/get-started/chat/">http://socket.io/get-started/chat/</a>。</p>
<p>在本篇指导中，我们将创建一个基本的聊天应用。这个应用几乎不要求事先具有 Node.JS 或 <a href="http://socket.io/">http://Socket.IO</a> 的基础知识，因此对任意知识水平的用户它都是适合的。</p>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>使用流行的 Web 应用工具栈（如 LAMP（PHP））写一个聊天应用通常是非常困难的。这涉及到从服务器拉取变化的信息，保持时间戳的跟踪，并且这比应该需要的速度慢很多。</p>
<p>通常是大多数实时聊天系统都是围绕 Sockets 设计解决方案，在客户端和服务端提供一个双向通信通道。</p>
<p>这意味着服务端可以推送消息给客户端。其思想是，每当你写了一个聊天消息，服务端将获取它，并把它推送给所有其他连接的客户端。</p>
<h1 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h1><p>第一个目标是，设置一个提供表单和消息列表的简单 HTML 网页。我们将使用 Node.JS Web 框架 express 来达到目的。确保已经安装了 Node.JS。</p>
<p>首先，创建清单文件 package.json 来描述我们的项目。建议你将这个文件放在专门的一个空目录下（如，chat-example）。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socket-chat-example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my first socket.io app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>现在，为了方便迁移需要的依赖，我们使用 npm install –save:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save express@4.10.2</span><br></pre></td></tr></table></figure>

<p>这样 Express 就安装好了。现在，我们创建应用的 index.js 文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title class_">Server</span>(app);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Hello world&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening on *:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>Express 初始化 app 作为功能处理器，你可以将它传给 HTTP 服务器（如第 2 行看到的）。</li>
<li>定义一个路由处理器 &#x2F; ，当我们访问网站主页时就会调用这个处理器。</li>
<li>HTTP 服务器监听端口 3000。</li>
</ul>
<p>执行命令 node index.js 将看到下面的信息：<br><img src="/images/202510/06.jpg"></p>
<p>在浏览器地址栏输入 <a href="http://localhost:3000/">http://localhost:3000</a> 访问我们的 Web 应用：<br><img src="/images/202510/07.jpg"></p>
<h1 id="HTML-服务"><a href="#HTML-服务" class="headerlink" title="HTML 服务"></a>HTML 服务</h1><p>目前为止，我们在 index.js 中调用 res.send，并且传给它一个 HTML 字符串。如果我们把整个应用的 HTML 都放到这里，代码会非常混乱。应该是，我们创建一个 index.html 文件并用它提供服务。</p>
<p>让我们使用 sendFile 方法重构路由处理器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>创建 index.html 文件，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">box-sizing</span>: border-box; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123; <span class="attribute">font</span>: <span class="number">13px</span> Helvetica, Arial; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> &#123; <span class="attribute">background</span>: <span class="number">#000</span>; <span class="attribute">padding</span>: <span class="number">3px</span>; <span class="attribute">position</span>: fixed; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">90%</span>; <span class="attribute">margin-right</span>: .<span class="number">5%</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> <span class="selector-tag">button</span> &#123; <span class="attribute">width</span>: <span class="number">9%</span>; <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">130</span>, <span class="number">224</span>, <span class="number">255</span>); <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">10px</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123; <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;m&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启进程（输入 Control+C 并再次运行 node index），并刷新，页面展示如下：<br><img src="/images/202510/09.jpg"></p>
<h1 id="整合-Socket-IO"><a href="#整合-Socket-IO" class="headerlink" title="整合 Socket.IO"></a>整合 <a href="http://socket.io/">Socket.IO</a></h1><p><a href="http://socket.io/">Socket.IO</a> 由两部分组成：</p>
<ul>
<li>整合（或挂载）了 Node.JS HTTP 服务器的服务器：<a href="http://socket.io/">Socket.IO</a></li>
<li>在浏览器端加载的客户端库：socket.io-client</li>
</ul>
<p>开发时，<a href="http://socket.io/">Socket.IO</a> 自动为我们提供这个客户端，像我们将看到的，因此现在我们仅需要安装一个模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save socket.io</span><br></pre></td></tr></table></figure>

<p>这个命令将安装这个模块并添加依赖到 package.json。现在修改 index.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title class_">Server</span>(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(http);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">sendfile</span>(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a user connected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening on *:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意，通过传递 http（HTTP 服务器）对象初始化了一个 <a href="http://socket.io/">Socket.IO</a> 的新实例。然后为到来的 socket 监听 connection 事件，并且输入日志到控制台。</p>
<p>现在，在 index.html 中 前添加下面的片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> socket = <span class="title function_">io</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这将加载 socket.io-client，创建全局变量 io，并且连接。</p>
<p>注意，当调用 io() 的时候没有制定任何 URL，因为它默认尝试连接提供页面服务的主机。</p>
<p>现在重新加载服务器和网站将会看到控制台打印“a user connected”。尝试打开多个标签页，将看到多条消息：<br><img src="/images/202510/10.jpg"></p>
<p>每个 socket 也监听一个特殊的 disconnect 事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a user connected&#x27;</span>);</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;user disconnected&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果多次刷新一个标签页将看到下面的动作：<br><img src="/images/202510/11.jpg"></p>
<h1 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h1><p>Socket.IO 背后主要的思想是你可以发送和接收想要的任何事件，携带你想要的任何数据。任何可以编码为 JSON 的对象都可以做到，并且也支持二进制数据。</p>
<p>让我们来实现当一个用户输入一条消息时，服务器作为一个 chat message 事件获取它。在 index.html 中的脚本现在看起来如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.jquery.com/jquery-1.11.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> socket = <span class="title function_">io</span>();</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    socket.<span class="title function_">emit</span>(<span class="string">&#x27;chat message&#x27;</span>, $(<span class="string">&#x27;#m&#x27;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#m&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 index.js 中我们打印出 chat message 事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>)&#123;</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;chat message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message: &#x27;</span> + msg);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>结果像下面的视频展示的：</p>
<video src="/images/202510/12.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video>

<h1 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h1><p>下一个目标是我们从服务器发送事件给其他用户。</p>
<p>为了发送事件给所有人，<a href="http://socket.io/">Socket.IO</a> 给我们提供了 io.emit：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.<span class="title function_">emit</span>(<span class="string">&#x27;some event&#x27;</span>, &#123; <span class="attr">for</span>: <span class="string">&#x27;everyone&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>如果你想发送一个确定 socket 的消息给所有人，我们有 broadcast 标识：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>)&#123;</span><br><span class="line">  socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个例子中，为了简单，为了简单我们发送消息给所有人，包括发送者。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>)&#123;</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;chat message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    io.<span class="title function_">emit</span>(<span class="string">&#x27;chat message&#x27;</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在客户端，当我们捕获到一个 chat message 事件，我们把它包含到页面中。客户端完整的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> socket = <span class="title function_">io</span>();</span><br><span class="line">  $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&#x27;chat message&#x27;</span>, $(<span class="string">&#x27;#m&#x27;</span>).<span class="title function_">val</span>());</span><br><span class="line">    $(<span class="string">&#x27;#m&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;chat message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;#messages&#x27;</span>).<span class="title function_">append</span>($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).<span class="title function_">text</span>(msg));</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>我们的聊天应用就完成了，用了大概 20 行代码！看起来像这样：</p>
<video src="/images/202510/13.mp4" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Socket.IO</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Socket.IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket.IO负载均衡</title>
    <url>/2016/10/16/Socket-IO-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="/images/202502/socketio.png" alt="Socket.IO负载均衡架构"></p>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p>为了负载均衡时连接保证始终连到一个节点上，使用Nginx的ip_hash实现session sticky，让客户端始终连接到集群内一台节点上。</p>
<p>在Nginx的<code>conf.d</code>目录下创建配置文件<code>socket_io.conf</code>，内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">upstream nodejs_websocket &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server 192.168.1.100:3000;</span><br><span class="line">  server 192.168.1.101:3000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name 127.0.0.1 localhost;</span><br><span class="line">  access_log off;</span><br><span class="line">  add_header Content-Type &quot;text/html; charset=UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://nodejs_websocket;</span><br><span class="line"></span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于Nginx的反向代理机制和Socket.IO的自动重连机制，上述架构还具备高可用的特性，即当某个节点宕机时，原先连接到该节点上的客户端会自动重连至其它节点上。</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Socket.IO</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Socket.IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark On Yarn External Shuffle Service</title>
    <url>/2021/10/25/Spark-On-Yarn-External-Shuffle-Service/</url>
    <content><![CDATA[<p>本文基于spark-3.1.2-bin-without-hadoop.tgz版本，所以spark-3.1.2-yarn-shuffle.jar已经在节点的<code>$&#123;SPARK_HOME&#125;/yarn</code>目录下。</p>
<h1 id="HADOOP-CLASSPATH"><a href="#HADOOP-CLASSPATH" class="headerlink" title="HADOOP_CLASSPATH"></a>HADOOP_CLASSPATH</h1><p>在所有NodeManager节点上设置环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_CLASSPATH=$&#123;SPARK_HOME&#125;/yarn/spark-3.1.2-yarn-shuffle.jar:$HADOOP_CLASSPATH</span><br></pre></td></tr></table></figure>

<h1 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h1><p>在yarn-site.xml中添加以下配置，并分发至所有NodeManager节点。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spark Configuration --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.spark_shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.spark.network.yarn.YarnShuffleService<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.yarn.shuffle.stopOnFailure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="重启NodeManager"><a href="#重启NodeManager" class="headerlink" title="重启NodeManager"></a>重启NodeManager</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn --daemon stop nodemanager</span><br><span class="line">yarn --daemon start nodemanager</span><br></pre></td></tr></table></figure>

<h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><p>在NodeManager节点上使用以下命令查看7337端口是否已被监听：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ntlp|grep 7337</span><br></pre></td></tr></table></figure>

<p>该端口通过spark.shuffle.service.port指定，默认是7337。</p>
<h1 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h1><p>在<code>$&#123;SPARK_HOME&#125;/conf/spark-defaults.conf</code>中添加以下配置，并分发至所有节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark.shuffle.service.enabled true</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Spark</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark的基本概念</title>
    <url>/2021/10/22/Spark%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="编程接口"><a href="#编程接口" class="headerlink" title="编程接口"></a>编程接口</h1><ul>
<li>RDD：弹性分布式数据集（Resilient Distributed Dataset ）。Spark2.0之前的编程接口。Spark2.0之后以不再推荐使用，而是被Dataset替代。</li>
<li>Dataset：Spark2.0之后的编程接口，用来替代RDD。与RDD不同Dataset是强数据类型的，但是这一点不适用与pyspark，因为Python是弱类型的。Spark引擎针对Dataset做了更丰富的优化，所以比RDD有更高的性能。</li>
<li>Dataframe：在Python（Pandas）和R中Dataset的组织形式；在Scala中没有这个概念。</li>
</ul>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="/images/202502/spark-cluster-overview.png" alt="Spark Cluster Overview"></p>
<ul>
<li>Application：基于Spark构建的用户程序。包含驱动程序和执行器。</li>
<li>Application jar：用户程序Jar包。</li>
<li>Driver program：驱动程序。用户程序中运行main()方法及创建SparkContext的进程。</li>
<li>Cluster manager：集群管理者。管理集群资源的外部服务。如：standalone manager, Mesos, YARN, Kubernetes。</li>
<li>Deploy mode：用来指明驱动程序运行位置。集群模式下框架在集群中调起驱动程序；客户端模式下在集群之外的程序提交者调起驱动程序。</li>
<li>Worker node：集群中运行应用程序的节点。</li>
<li>Executor：Worker节点上调起的为用户应用程序的进程，运行任务并在内存中或磁盘是行保持数据。每个应用程序都有自己的Executor。</li>
<li>Task：发送到Executor的工作单元。</li>
<li>Job：由多个任务组成的并行计算，这些任务响应Spark操作（例如保存、收集）而生成；您将在驱动程序日志中看到这个术语。</li>
<li>Stage：每个作业被划分为更小的任务集，称为相互依赖的阶段（类似于MapReduce中的map和reduce阶段）；您将在驱动程序日志中看到这个术语。</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Spark</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark SQL读写Hive Table部署</title>
    <url>/2021/10/26/Spark-SQL%E8%AF%BB%E5%86%99-Hive-Table-%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>官网参考文档：<a href="http://spark.apache.org/docs/3.1.2/sql-data-sources-hive-tables.html">Hive Tables</a>。</p>
<p>本文使用的组件版本如下：</p>
<ul>
<li>Spark 3.1.2</li>
<li>Hive 3.1.2</li>
</ul>
<h1 id="第一步：Hive部署"><a href="#第一步：Hive部署" class="headerlink" title="第一步：Hive部署"></a>第一步：Hive部署</h1><p>在所有Worker节点上部署Hive。主要是使用Hive下面的libs。</p>
<h1 id="第二步：Spark-CLASSPATH"><a href="#第二步：Spark-CLASSPATH" class="headerlink" title="第二步：Spark CLASSPATH"></a>第二步：Spark CLASSPATH</h1><p>在${SPARK_HOME}&#x2F;conf&#x2F;spark-env.sh中添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SPARK_DIST_CLASSPATH=$(hadoop classpath)</span><br></pre></td></tr></table></figure>

<h1 id="第三步：编译Spark"><a href="#第三步：编译Spark" class="headerlink" title="第三步：编译Spark"></a>第三步：编译Spark</h1><p>编译的目的是支持Hive。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./dev/make-distribution.sh --tgz -Phive -Phive-thriftserver -Pyarn -Dhadoop.version=3.2.2 -Phadoop-provided</span><br></pre></td></tr></table></figure>

<h1 id="第四步：部署Spark-On-Yarn"><a href="#第四步：部署Spark-On-Yarn" class="headerlink" title="第四步：部署Spark On Yarn"></a>第四步：部署Spark On Yarn</h1><p>部署过程比较简单。部署过程遇到的问题参见另外一篇博文：<a href="https://www.zhangjc.com/2021/10/25/Spark-on-YARN%E9%83%A8%E7%BD%B2/">Spark on YARN部署</a></p>
<h1 id="第五步：兼容Hive-3-1-2"><a href="#第五步：兼容Hive-3-1-2" class="headerlink" title="第五步：兼容Hive 3.1.2"></a>第五步：兼容Hive 3.1.2</h1><ul>
<li>将hive-site.xml复制到spark配置目录下。</li>
<li>在配置文件spark-defaults.conf中添加以下内容。假设Hive安装目录为：&#x2F;opt&#x2F;hive。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark.sql.hive.metastore.version 3.1.2</span><br><span class="line">spark.sql.hive.metastore.jars path</span><br><span class="line">spark.sql.hive.metastore.jars.path file:///opt/hive/lib/*.jar</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这些Jar包需要使用Hive 3.1.2版本的。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Spark</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop导入MySQL中含有回车换行符的数据</title>
    <url>/2017/07/05/Sqoop-%E5%AF%BC%E5%85%A5-MySQL-%E4%B8%AD%E5%90%AB%E6%9C%89%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E7%AC%A6%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>MySQL中的数据如下图：<img src="/images/202502/mysql-data.png" alt="MySQL中带回车换行符的数据"></p>
<p>检查HDFS上的目标文件内容可以看出，回车换行符位置的数据被截断了，导致数据列错位。<img src="/images/202502/hdfs-data.png" alt="HDFS问题数据"></p>
<p>Sqoop提供了配置参数，在导入时丢弃掉数据的分隔符（\n，\r，\01）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--hive-drop-import-delims : Drops \n, \r, and \01 from string fields when importing to Hive. </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>数据采集</tag>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>MySQL</tag>
        <tag>Sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop支持ORC文件格式</title>
    <url>/2018/12/28/Sqoop-%E6%94%AF%E6%8C%81-ORC-%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="ORC介绍"><a href="#ORC介绍" class="headerlink" title="ORC介绍"></a>ORC介绍</h1><p>ORC文件格式是Hive 0.11.0版本引入的一种文件格式。ORC的引入是为了解决其他Hive文件格式的局限性。使用ORC文件格式提升Hive读取、写入及处理数据的性能。</p>
<p>与RCFile对比，ORC文件格式有很多优点：</p>
<ul>
<li>每个Task只输出一个文件，降低NameNode的负载。</li>
<li>Hive数据类型支持，包括：datetime、decimal以及复杂数据类型（struct、list、map、union）。</li>
<li>文件中存储轻量级的索引：<ul>
<li>跳过不通过谓语过滤的行组</li>
<li>跳转到指定的行</li>
</ul>
</li>
<li>基于数据类型的块模式压缩：<ul>
<li>整型数据列采用行程长度编码（run-length encoding）</li>
<li>字符串数据列采用词典编码（dictionary encoding）</li>
</ul>
</li>
<li>使用独立的RecordReader并发读取相同的文件</li>
<li>无需扫描markers就可以分割文件的能力</li>
<li>绑定读写需要的内存量</li>
<li>使用Protocol Buffer存储元数据，允许添加、移除字段</li>
</ul>
<p>Hive官网介绍：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC</a></p>
<h1 id="Sqoop支持ORC"><a href="#Sqoop支持ORC" class="headerlink" title="Sqoop支持ORC"></a>Sqoop支持ORC</h1><p>通过Sqoop-HCatalog集成解决Sqoop不支持ORC的问题。</p>
<h2 id="HCatalog背景"><a href="#HCatalog背景" class="headerlink" title="HCatalog背景"></a>HCatalog背景</h2><p>HCatalog是Hadoop的一个table与存储管理的一个服务，用户可以更容易地使用不同的数据处理工具Pig、MapReduce和Hive读写数据。HCatalog表的抽象呈现给用户一个HDFS分布式文件系统（HDFS）中的关系视图，用户不需要担心数据存储在哪里及数据的存储格式：RCFile格式、text文件、或者SequenceFile。</p>
<p>HCatalog支持读写任何实现了Hive SerDe（serializer-deserializer）的文件格式。默认的，HCatalog支持RCFile、CSV、JSON和SequenceFile。要使用用户自定义格式，必须提供InputFormat和OutputFormat及SerDe。</p>
<p>Sqoop使用HCatalog抽象不同存储格式的能力来支持RCFile（以及未来的文件类型）。</p>
<h2 id="集成HCatalog后新增的参数"><a href="#集成HCatalog后新增的参数" class="headerlink" title="集成HCatalog后新增的参数"></a>集成HCatalog后新增的参数</h2><p>见Sqoop官方文档：<a href="http://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html#_sqoop_hcatalog_integration">http://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html#_sqoop_hcatalog_integration</a></p>
<h2 id="定制Sqoop改造"><a href="#定制Sqoop改造" class="headerlink" title="定制Sqoop改造"></a>定制Sqoop改造</h2><p>修改<code>bin/sqoop</code>命令脚本：为import操作增加Hive Table分区数据删除逻辑，在执行导入前不需要另行清理数据，从而简化Sqoop import脚本的开发工作。</p>
<h2 id="Sqoop导入ORC实例"><a href="#Sqoop导入ORC实例" class="headerlink" title="Sqoop导入ORC实例"></a>Sqoop导入ORC实例</h2><h3 id="第一步：创建Hive表"><a href="#第一步：创建Hive表" class="headerlink" title="第一步：创建Hive表"></a>第一步：创建Hive表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `dev.bims_device`(</span><br><span class="line">  `code` string,</span><br><span class="line">  `mac` string,</span><br><span class="line">  `wifi_mac` string,</span><br><span class="line">  `create_date` string,</span><br><span class="line">  `activate_date` string,</span><br><span class="line">  `state` string,</span><br><span class="line">  `area_id` <span class="type">bigint</span>,</span><br><span class="line">  `city_id` <span class="type">bigint</span>,</span><br><span class="line">  `sp_define_id` <span class="type">bigint</span>)</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (</span><br><span class="line">  `dt` string)</span><br><span class="line">stored <span class="keyword">as</span> orc;</span><br></pre></td></tr></table></figure>

<h3 id="第二步：Sqoop-import"><a href="#第二步：Sqoop-import" class="headerlink" title="第二步：Sqoop import"></a>第二步：Sqoop import</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">  <span class="comment">--hcatalog-database dev \</span></span><br><span class="line">  <span class="comment">--hcatalog-table bims_device \</span></span><br><span class="line">  <span class="comment">--hcatalog-partition-keys dt \</span></span><br><span class="line">  <span class="comment">--hcatalog-partition-values $&#123;dt&#125; \</span></span><br><span class="line">  <span class="comment">--connect jdbc:mysql://$&#123;host&#125;:$&#123;port&#125;/bims \</span></span><br><span class="line">  <span class="comment">--username &quot;$&#123;userName&#125;&quot; \</span></span><br><span class="line">  <span class="comment">--password &quot;$&#123;password&#125;&quot; \</span></span><br><span class="line">  <span class="comment">--table bims_device \</span></span><br><span class="line">  <span class="comment">--columns &quot;code,mac,wifi_mac,create_date,activate_date,state,area_id,city_id,sp_define_id&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Sqoop导出ORC实例"><a href="#Sqoop导出ORC实例" class="headerlink" title="Sqoop导出ORC实例"></a>Sqoop导出ORC实例</h2><h3 id="第一步：创建MySQL数据表"><a href="#第一步：创建MySQL数据表" class="headerlink" title="第一步：创建MySQL数据表"></a>第一步：创建MySQL数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test`.`bims_device`(</span><br><span class="line">  `code` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `mac` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `wifi_mac` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `create_date` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `activate_date` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `state` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `area_id` <span class="type">bigint</span>,</span><br><span class="line">  `city_id` <span class="type">bigint</span>,</span><br><span class="line">  `sp_define_id` <span class="type">bigint</span>);</span><br></pre></td></tr></table></figure>

<h3 id="第二步：Sqoop-export"><a href="#第二步：Sqoop-export" class="headerlink" title="第二步：Sqoop export"></a>第二步：Sqoop export</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqoop export \</span><br><span class="line">  <span class="comment">--hcatalog-database dev \</span></span><br><span class="line">  <span class="comment">--hcatalog-table bims_device \</span></span><br><span class="line">  <span class="comment">--hcatalog-partition-keys dt \</span></span><br><span class="line">  <span class="comment">--hcatalog-partition-values $&#123;dt&#125; \</span></span><br><span class="line">  <span class="comment">--connect jdbc:mysql://$&#123;host&#125;:$&#123;port&#125;/test?useCompression=true \</span></span><br><span class="line">  <span class="comment">--username $&#123;userName&#125; \</span></span><br><span class="line">  <span class="comment">--password $&#123;password&#125; \</span></span><br><span class="line">  <span class="comment">--table bims_device</span></span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>MySQL表字段名称必须与Hive仓库中的表字段名称一致</li>
<li>Sqoop ORC导出时，数据类型需要转换时如果存在脏数据会导致导出失败。例如，长度为0的String如果导出为int时。</li>
<li>导出时需要提前清理MySQL中之前导出的数据，避免重复运行时造成数据重复。</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
        <tag>ORC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark on YARN部署</title>
    <url>/2021/10/25/Spark-on-YARN%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>目前各大数据组件部署其实都比较简单，几乎接近开箱即用。此处只记录部署时遇到的问题。</p>
<h1 id="问题一：java-lang-ClassNotFoundException-org-apache-log4j-spi-Filter"><a href="#问题一：java-lang-ClassNotFoundException-org-apache-log4j-spi-Filter" class="headerlink" title="问题一：java.lang.ClassNotFoundException: org.apache.log4j.spi.Filter"></a>问题一：java.lang.ClassNotFoundException: org.apache.log4j.spi.Filter</h1><p>异常信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: A JNI error has occurred, please check your installation and try again</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/log4j/spi/Filter</span><br><span class="line">	at java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class="line">	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)</span><br><span class="line">	at java.lang.Class.privateGetMethodRecursive(Class.java:3048)</span><br><span class="line">	at java.lang.Class.getMethod0(Class.java:3018)</span><br><span class="line">	at java.lang.Class.getMethod(Class.java:1784)</span><br><span class="line">	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)</span><br><span class="line">	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.log4j.spi.Filter</span><br><span class="line">	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">	... 7 more</span><br></pre></td></tr></table></figure>

<p>从Spark3.1.2源码pom.xml中可以看到log4j的版本为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下载对应版本的Jar包，并分发到各Worker节点的${SPARK_HOME}&#x2F;jars下。</p>
<h1 id="问题二：java-lang-ClassNotFoundException-org-apache-hadoop-fs-FSDataInputStream"><a href="#问题二：java-lang-ClassNotFoundException-org-apache-hadoop-fs-FSDataInputStream" class="headerlink" title="问题二：java.lang.ClassNotFoundException: org.apache.hadoop.fs.FSDataInputStream"></a>问题二：java.lang.ClassNotFoundException: org.apache.hadoop.fs.FSDataInputStream</h1><p>异常信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: A JNI error has occurred, please check your installation and try again</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/hadoop/fs/FSDataInputStream</span><br><span class="line">	at java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class="line">	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)</span><br><span class="line">	at java.lang.Class.privateGetMethodRecursive(Class.java:3048)</span><br><span class="line">	at java.lang.Class.getMethod0(Class.java:3018)</span><br><span class="line">	at java.lang.Class.getMethod(Class.java:1784)</span><br><span class="line">	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)</span><br><span class="line">	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.hadoop.fs.FSDataInputStream</span><br><span class="line">	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">	... 7 more</span><br></pre></td></tr></table></figure>

<p>使用hadoop free版本部署遇到该问题。需要在spark-env.sh中设置包含hadoop的classpath。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SPARK_DIST_CLASSPATH=$(hadoop classpath)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>官方文档有明确说明，只不过初次阅读容易忽略。位置如下：<br><img src="/images/202502/hadoop-free-spark-env.png" alt="Spark Env"></p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Spark</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>SparkSQL 内置函数</title>
    <url>/2025/09/28/SparkSQL-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>SparkSQL 有很多方便且功能强大的内置函数。本篇文章用来记录我在实际工作中用到的一些函数，并结合自己的使用场景进行分享。我会不断更新本文的内容。</p>
<h1 id="last-day"><a href="#last-day" class="headerlink" title="last_day"></a>last_day</h1><p>last_day(date)：返回日期参数所属月最后一天的日期。</p>
<p>用例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_day(<span class="string">&#x27;2009-01-12&#x27;</span>);</span><br><span class="line"> <span class="number">2009</span><span class="number">-01</span><span class="number">-31</span></span><br></pre></td></tr></table></figure>

<p>可以用来快速选择月底数据。如数据表（T），包含从 2023-01-01 至 2024-09-18 连续日期的数据。</p>
<table>
<thead>
<tr>
<th>col1</th>
<th>col2</th>
</tr>
</thead>
<tbody><tr>
<td>2023-01-01</td>
<td>1</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>2024-09-18</td>
<td>18</td>
</tr>
</tbody></table>
<p>如果只查询期间每月底的数据，可以用以下 SQL 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> col1 <span class="operator">=</span> last_day(col1);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Spark</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset 数据探查</title>
    <url>/2025/09/28/Superset-%E6%95%B0%E6%8D%AE%E6%8E%A2%E6%9F%A5/</url>
    <content><![CDATA[<p>本文基于个人电脑部署的环境和 Superset 官网样例数据讲解数据探查。</p>
<h1 id="启用数据上传功能"><a href="#启用数据上传功能" class="headerlink" title="启用数据上传功能"></a>启用数据上传功能</h1><p>默认上传功能是不可用的。<br><img src="/images/202509/03.png"></p>
<p>要启用文件上传功能，在右上角“Settings”下拉菜单中选择“Database Connections”。<br><img src="/images/202509/04.png"></p>
<p>鼠标停留在要上传数据的数据库上，Actions 列中会显示可选操作，点击 Edit 图标。<br><img src="/images/202509/05.png"></p>
<p>在弹出编辑页“ADVANCED”选项卡“Security”下选中“Allow file uploads to database”，并点击 FINISH 按钮。<br><img src="/images/202509/06.png"><br><img src="/images/202509/07.png"></p>
<p>之后在右上角 “+” 下拉菜单 “Data” 中可以看到文件上传功能变为可用了。<br><img src="/images/202509/08.png"></p>
<h1 id="加载-CSV-数据"><a href="#加载-CSV-数据" class="headerlink" title="加载 CSV 数据"></a>加载 CSV 数据</h1><p>下载下面的样例数 。样例数据中包含一些旅途信息。</p>
<p><a href="https://raw.githubusercontent.com/apache-superset/examples-data/master/tutorial_flights.csv">https://raw.githubusercontent.com/apache-superset/examples-data/master/tutorial_flights.csv</a></p>
<p>选择上文启用的“Upload CSV to database”导入功能，选择文件及设置相应参数，点击“Save”按钮完成上传。<br><img src="/images/202509/09.png"></p>
<h1 id="表格可视化"><a href="#表格可视化" class="headerlink" title="表格可视化"></a>表格可视化</h1><p>上传完成后，在 Datasets 中可以看到 tutorial_flights 数据集。<br><img src="/images/202509/10.png"></p>
<p>点击编辑按钮进入数据集编辑界面，设置 Travel Date 为时间序列字段。这一步骤对下文的样例会有比较大的影响，如果不设置很多样例做不了。<br><img src="/images/202509/11.png"></p>
<p>点击数据集名称进入该数据集的探查工作流。<br><img src="/images/202509/12.png"></p>
<p>在本例中会创建一个展示每种旅行类别的航班数量和成本。在 DATA 选项卡 Query 的维度中选择 Travel Class 作为分析维度。<br><img src="/images/202509/13.png"></p>
<p>在统计指标中设置以下两项：</p>
<ul>
<li>COUNT(*)：用于在表格每行中显示每种旅行航班数量。</li>
<li>SUM(Cost)：显示每种旅行航班的成本。</li>
</ul>
<p><img src="/images/202509/14.png"></p>
<p>然后点击“CREATE CHART”按钮完成表格可视化的创建。<br><img src="/images/202509/15.png"></p>
<p>点击 SAVE 按钮保存。可以在保存时选择可视化表在哪个仪表盘中显示，也可以创建新的仪表盘时选择要展示的图表。</p>
<h1 id="仪表盘基础"><a href="#仪表盘基础" class="headerlink" title="仪表盘基础"></a>仪表盘基础</h1><p>点击左上角“Dashboard”菜单，进入仪表盘列表页面。点击列表的右上方的“+DASHBOARD”按钮进入仪表盘新建页面。给新建的仪表盘命名，并将刚才新建的差旅分析表拖入仪表盘，保存即可。这样一个简单的仪表盘就创建完成了。<br><img src="/images/202509/16.png"></p>
<p>创建完的仪表盘在仪表盘列表中选中并点击，进入仪表盘展示页面，点击右上角的编辑按钮可再次编辑。在仪表盘编辑页面可以用鼠标调整每个图表的大小，如下图（鼠标放在红圈图表右下角的位置）：<br><img src="/images/202509/17.png"></p>
<h1 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h1><p>数据透视表是一种更复杂的可视化分析工具。在这个例子中，将按照部门、旅行种类展示前6个月每个月的飞行花费。在仪表盘编辑页面点击“+ CREATE NEW CHART”按钮。<br><img src="/images/202509/18.png"></p>
<p>选择 tutorial_flights 作为数据集，选择 Pivot Table 作为图表类型（可通过搜索查找），如下图：<br><img src="/images/202509/19.png"></p>
<p>点击右下角“CREATE NEW CHAT”完成创建，并进入图表编辑页面。</p>
<p>进入透视表编辑页面，并做如下设置：</p>
<ul>
<li>查询列中选择 Department 和 Travel Classs</li>
<li>在行中选择在数据集中新建的计算列 Travel Date，时间粒度选择 Month。</li>
<li>在指标栏新增 Sum（Cost）</li>
<li>设置数据过滤条件 Travel Date ≥ ‘2011-01-01’ 和 Travel Date ≤ ‘2011-06-30’</li>
</ul>
<p>点击保存在右侧就可以看到透视表的效果：<br><img src="/images/202509/20.png"></p>
<p>完成以上工作后，点击保存按钮，并将该透视表发布至上文创建的仪表盘。</p>
<h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><p>这一小节，用折线图显示每个月平均票价。如上面的例子，依然是在仪表盘编辑页面添加新的图表。本例中图表类型选择折线图。进入图表编辑页面后，做如下设置：</p>
<ul>
<li>设置图表名称为：票价趋势分析</li>
<li>X轴选择 Travel Date，时间粒度选择 Month</li>
<li>指标设置为 AVG（Cost）</li>
</ul>
<p>保存后效果如下图：<br><img src="/images/202509/21.png"></p>
<p>从上图可以看出在 2011-12 月份票价大幅增高。现在图表数据未考虑单程和往返票的区别，更合理的应该是将两种票价做成两条折线。在图表编辑页面维度选择 Ticket Single or Return，更新后效果如下：<br><img src="/images/202509/22.png"></p>
<p>折线图的保存与发布至仪表盘与上面的例子一样。</p>
<h1 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h1><p>本节将在前文创建的仪表盘上增加一些文本信息。首先进入上文创建的“差旅分析”仪表盘的编辑页面。从右侧布局组件中拖动“Text”组件至仪表盘，此时在仪表盘中会有一个Markdown的编辑框，可以输入文本信息。点击文本框中的链接学习Markdown知识。<br><img src="/images/202509/23.png"></p>
<p>在文本框的左上角可以选择预览文本效果：<br><img src="/images/202509/24.png"></p>
<h1 id="发布仪表盘"><a href="#发布仪表盘" class="headerlink" title="发布仪表盘"></a>发布仪表盘</h1><p>根据上面的步骤已经创建了一个样例仪表盘，这个仪表盘随时可以再次编辑。如果要将该仪表盘发布给其他用户，则点击仪表盘左上角“Draft”按钮，这时仪表盘状态就变为“Published”状态了。点击状态按钮左侧的星号可收藏该仪表盘。<br><img src="/images/202509/25.png"></p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>使用注释可以在图表中添加说明，本例将在上文中折线图中增加说明。</p>
<p>点击“Settings”→“Manage”→“Annotation Layers”进入注释管理页面。<br><img src="/images/202509/26.png"></p>
<p>点击新建 Annotation Layer 按钮，输入信息后进入 Annotation 管理页面。点击新建 Annotation 按钮，输入信息创建新的 Annotation：<br><img src="/images/202509/27.png"></p>
<p>进入差旅折线图编辑页面，在Annotations and Layers部分选择添加，在弹出对话框中做如下设置：</p>
<ul>
<li>布局命名：特殊天气</li>
<li>Annotation Layer Type设置为：Event</li>
<li>Annotation Source设置为：Superset annotation</li>
<li>Annotation Layer选择上面新建的“特殊天气”</li>
<li>线宽设置为5。如果选择 Annotation Layer Type 为 Event 时，如果线宽不够，注释显示不明显。</li>
</ul>
<p>保存后在折线图中就可以看到补充信息。如下图：<br><img src="/images/202509/28.png"></p>
<h1 id="高级分析"><a href="#高级分析" class="headerlink" title="高级分析"></a>高级分析</h1><p>Superset 的高级分析特性允许对数据应用三种类型额外的转换。本节将建立一个基础图表，然后应用不同的高级分析特性。</p>
<p>首先，使用本文导入的 tutorial_flights 数据源和折线图，如下图：<br><img src="/images/202509/29.png"></p>
<h1 id="滚动平均值"><a href="#滚动平均值" class="headerlink" title="滚动平均值"></a>滚动平均值</h1><p>当数据中有相当多的变化时，会使得很难确定任何趋势。可以采用的一种方法是显示时间序列的滚动平均值。为此，在刚才创建的图表中的“高级分析” Rolling window 设置中选择 mean，并在“周期”和“最小周期”中输入7。周期是以时间粒度的倍数表示的滚动周期的长度。在我们的示例中，时间粒度是一天，所以滚动周期是7天，这样在2011年10月7日显示的值将对应于2011年10月的前7天。最后，通过指定最小周期为7，我们确保我们的平均值总是计算在7天。<br><img src="/images/202509/30.png"></p>
<h1 id="时间比较"><a href="#时间比较" class="headerlink" title="时间比较"></a>时间比较</h1><p>本节将比较时间序列中的值与一周前的值。首先创建基础的折线图，然后在高级分析时间比较中选择“1 week ago”，更新图表，效果如下：<br><img src="/images/202509/31.png"></p>
<p>然后，将“计算”类型更改为“绝对差异”并更新图表。现在只能看到一个系列，显示了之前两个系列之间的差异。<br><img src="/images/202509/32.png"></p>
<h1 id="重新取样数据"><a href="#重新取样数据" class="headerlink" title="重新取样数据"></a>重新取样数据</h1><p>本节将对数据进行重新取样，这样就不需要每天的数据，而是每周的数据。跟上面的章节一样，新创建一个折线图。然后，在 Advanced Analytics 的重新取样的 Rule 中输入“7 calendar day frequency” ，并将中位数作为过滤方法，然后保存，效果如下：<br><img src="/images/202509/33.png"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据探索</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>数据探索</tag>
        <tag>Superset</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop源码修改：增加落地HDFS文件数与MapTask数量一致性检查</title>
    <url>/2018/12/30/Sqoop-%E6%BA%90%E7%A0%81%E4%BF%AE%E6%94%B9%EF%BC%9A%E5%A2%9E%E5%8A%A0%E8%90%BD%E5%9C%B0-HDFS-%E6%96%87%E4%BB%B6%E6%95%B0%E4%B8%8E-MapTask-%E6%95%B0%E9%87%8F%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<p>本篇是对<a href="https://www.zhangjc.com/2018/12/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-Sqoop-%E4%BB%8E-MySQL-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0-Hive-%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E7%BB%8F%E8%BF%87/">记录一次Sqoop从MySQL导入数据到Hive问题的排查经过</a>的补充。</p>
<p>Sqoop命令通过bin下面的脚本调用，调用如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$&#123;HADOOP_COMMON_HOME&#125;</span>/bin/hadoop org.apache.sqoop.Sqoop <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>org.apache.sqoop.Sqoop</code>是Sqoop的入口类，在此主要是解析参数及初始化工具类，然后通过<code>org.apache.hadoop.util.ToolRunner</code>类调用对应的工具完成操作。Sqoop的Import操作对应的是<code>org.apache.sqoop.tool.ImportTool</code>类。</p>
<p>在ImportTool类的return代码前增加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">numMappers</span> <span class="operator">=</span> options.getNumMappers();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">hDbName</span> <span class="operator">=</span> options.getHCatDatabaseName();</span><br><span class="line"><span class="type">String</span> <span class="variable">hTableName</span> <span class="operator">=</span> options.getHCatTableName();</span><br><span class="line"><span class="type">String</span> <span class="variable">hPartKeys</span> <span class="operator">=</span> options.getHCatalogPartitionKeys();</span><br><span class="line"><span class="type">String</span> <span class="variable">hPartVals</span> <span class="operator">=</span> options.getHCatalogPartitionValues();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isStringNotEmpty(hDbName) &amp;&amp; isStringNotEmpty(hTableName) &amp;&amp; isStringNotEmpty(hPartKeys) &amp;&amp;     isStringNotEmpty(hPartVals)) &#123;</span><br><span class="line">  String[] partKeys = hPartKeys.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  String[] partVals = hPartVals.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">partPathStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span>(partKeys.length &gt; <span class="number">0</span> &amp;&amp; partVals.length == partKeys.length) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; partKeys.length; i++) &#123;</span><br><span class="line">      partPathStr += partKeys[i] + <span class="string">&quot;=&quot;</span> + partVals[i] + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">targetDir</span> <span class="operator">=</span> <span class="string">&quot;/user/hive/warehouse/&quot;</span> + hDbName + <span class="string">&quot;.db/&quot;</span> + hTableName + <span class="string">&quot;/&quot;</span> + partPathStr;</span><br><span class="line">  targetDir = targetDir.toLowerCase();</span><br><span class="line">  LOG.info(<span class="string">&quot;---------targetDir=&quot;</span> + targetDir);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(options.getConf());</span><br><span class="line">    RemoteIterator&lt;LocatedFileStatus&gt; rIter = fs.listFiles(<span class="keyword">new</span> <span class="title class_">Path</span>(targetDir), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">fileCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(rIter.hasNext()) &#123;</span><br><span class="line">      fileCount++;</span><br><span class="line">      rIter.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOG.info(<span class="string">&quot;---------------fileCount=&quot;</span> + fileCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numMappers != fileCount) &#123;</span><br><span class="line">      LOG.error(<span class="string">&quot;files number in hdfs not equals mapper task number !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    LOG.error(<span class="string">&quot;count files number from hdfs error !&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改动只针对Sqoop集成HCatalog方式导入ORC格式的情况。因为我们的数据仓库中都采用的是这种方式。</p>
<blockquote>
<p>优化：当MySQL中记录数特别少时，如少于4条记录，则默认Sqoop的MapTask数量为4但其实际执行时因为原始记录数不够则实际执行的MapTask数量会跟实际的记录数一致，此时split数量跟落地HDFS的文件数量一致。所以，可以根据Sqoop对应MR的实际split数量进行判断文件数量。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset连接本地MySQL异常</title>
    <url>/2024/12/25/Superset%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0MySQL%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>将Superset的元数据库配置为MySQL，配置方法见<a href="https://www.zhangjc.com/2024/12/25/Superset%E9%85%8D%E7%BD%AE/">Superset配置</a>。配置完成后，在启动Superset的时候，出现以下异常信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2024-09-01 16:28:36,614:ERROR:flask_appbuilder.security.sqla.manager:DB Creation and initialization failed: (MySQLdb.OperationalError) (2002, <span class="string">&quot;Can&#x27;t connect to local MySQL server through socket &#x27;/var/run/mysqld/mysqld.sock&#x27; (2)&quot;</span>)</span><br><span class="line">(Background on this error at: https://sqlalche.me/e/14/e3q8)</span><br><span class="line">Loaded your LOCAL configuration at [/home/zhangjc/github/superset/superset_config.py]</span><br></pre></td></tr></table></figure>

<p>这个错误跟连接MySQL的方式有关，详细信息见<a href="https://www.zhangjc.com/2024/12/26/%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0MySQL/">无法连接本地MySQL</a>。我的连接配置信息如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://superset:superset%4001@localhost/superset&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果想快速解决问题，可将连接串中的<strong>localhost</strong>改为<strong>127.0.0.1</strong>。但作为技术人，还是需要深究下。</p>
<p>根据<a href="https://www.zhangjc.com/2024/12/25/Superset%E9%85%8D%E7%BD%AE/">Superset配置</a>中的描述，连接MySQL用的是<strong>mysqlclient</strong>驱动，问题可能出现在该驱动上。用以下方式进行验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.11.9 (main, Aug 28 2024, 23:13:21) [GCC 8.3.0] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import MySQLdb</span><br><span class="line">&gt;&gt;&gt; from MySQLdb import _mysql</span><br><span class="line">&gt;&gt;&gt; db=_mysql.connect(host=<span class="string">&quot;localhost&quot;</span>,user=<span class="string">&quot;superset&quot;</span>, password=<span class="string">&quot;superset@01&quot;</span>, database=<span class="string">&quot;superset&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">MySQLdb.OperationalError: (2002, <span class="string">&quot;Can&#x27;t connect to local MySQL server through socket &#x27;/var/run/mysqld/mysqld.sock&#x27; (2)&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; db=_mysql.connect(host=<span class="string">&quot;localhost&quot;</span>,user=<span class="string">&quot;superset&quot;</span>, password=<span class="string">&quot;superset@01&quot;</span>, database=<span class="string">&quot;superset&quot;</span>, unix_socket=<span class="string">&#x27;/tmp/mysql.sock&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>从上面的验证可以看出，问题出在<strong>mysqlclient</strong>默认使用的<strong>Unix socket</strong>文件与MySQL服务的不同，在指定正确的<strong>Unix socket</strong>文件后，问题解决。</p>
<p>如何在superset中配置指定MySQL连接的Unix socket文件呢？查看MySQL官方文档，可以看到在连接串中通过<strong>socket</strong>参数设置。</p>
<p>参见：<a href="https://dev.mysql.com/doc/refman/8.4/en/connecting-using-uri-or-key-value-pairs.html#connection-parameters-base">Base Connection Parameters</a></p>
<p>修改Superset元数据库连接串配置，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://superset:superset%4001@localhost/superset?socket=(/tmp/mysql.sock)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>启动Superset出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ superset run -p 8088 --with-threads --reload --debugger</span><br><span class="line">Loaded your LOCAL configuration at [/home/zhangjc/github/superset/superset_config.py]</span><br><span class="line">logging was configured successfully</span><br><span class="line">2024-09-05 11:45:16,426:INFO:superset.utils.logging_configurator:logging was configured successfully</span><br><span class="line">2024-09-05 11:45:16,433:INFO:root:Configured event logger of <span class="built_in">type</span> &lt;class <span class="string">&#x27;superset.utils.log.DBEventLogger&#x27;</span>&gt;</span><br><span class="line">/home/zhangjc/frin/python/venvs/superset/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage <span class="keyword">for</span> tracking rate limits as no storage was explicitly specified. This is not recommended <span class="keyword">for</span> production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend <span class="keyword">for</span> documentation about configuring the storage backend.</span><br><span class="line">  warnings.warn(</span><br><span class="line">2024-09-05 11:45:16,438:ERROR:flask_appbuilder.security.sqla.manager:DB Creation and initialization failed: <span class="string">&#x27;socket&#x27;</span> is an invalid keyword argument <span class="keyword">for</span> connect()</span><br></pre></td></tr></table></figure>

<p>说明mysqlclient模块使用的参数名与MySQL文档中的不一致。但查询mysqlclient文档并未发现Unix socket文件参数的说明😂。没办法，只能使用码农基本能力 - 读源代码了😁。原来mysqlclient中的名称是unix_socket：</p>
<p><img src="/images/202412/09.png"></p>
<p>修改连接串如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://superset:superset%4001@localhost/superset?unix_socket=/tmp/mysql.sock&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再次启动Superset，Done！✌️✌️✌️</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Python</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Superset</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset暂不支持Python3.12</title>
    <url>/2024/12/25/Superset%E6%9A%82%E4%B8%8D%E6%94%AF%E6%8C%81Python3-12/</url>
    <content><![CDATA[<p>版本如下：</p>
<ul>
<li>Superset 4.0.2</li>
<li>Python 3.12.5</li>
</ul>
<p>报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install apache-superset</span><br><span class="line"><span class="comment"># 安装过程信息省略</span></span><br><span class="line">......</span><br><span class="line"><span class="comment"># 以下是错误信息部分，内容也很多</span></span><br><span class="line">ERROR: Exception:</span><br><span class="line">Traceback (most recent call last):                                                                                                                                </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/cli/base_command.py&quot;</span>, line 105, <span class="keyword">in</span> _run_wrapper         </span><br><span class="line">    status = _inner_run()                                                                                                                                         </span><br><span class="line">             ^^^^^^^^^^^^                                                                                                                                         </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/cli/base_command.py&quot;</span>, line 96, <span class="keyword">in</span> _inner_run            </span><br><span class="line">    <span class="built_in">return</span> self.run(options, args)                                                                                                                                </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                                </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/cli/req_command.py&quot;</span>, line 67, <span class="keyword">in</span> wrapper                </span><br><span class="line">    <span class="built_in">return</span> func(self, options, args)                                                                                                                              </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                              </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/commands/install.py&quot;</span>, line 379, <span class="keyword">in</span> run                  </span><br><span class="line">    requirement_set = resolver.resolve(                                                                                                                           </span><br><span class="line">                      ^^^^^^^^^^^^^^^^^                                                                                                                           </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/resolver.py&quot;</span>, line 95, <span class="keyword">in</span> resolve </span><br><span class="line">    result = self._result = resolver.resolve(                                                                                                                     </span><br><span class="line">                            ^^^^^^^^^^^^^^^^^                                                                                                                     </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py&quot;</span>, line 546, <span class="keyword">in</span> resolve            </span><br><span class="line">    state = resolution.resolve(requirements, max_rounds=max_rounds)                                                                                               </span><br><span class="line">            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                               </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py&quot;</span>, line 427, <span class="keyword">in</span> resolve            </span><br><span class="line">    failure_causes = self._attempt_to_pin_criterion(name)                                                                                                         </span><br><span class="line">                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                         </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py&quot;</span>, line 239, <span class="keyword">in</span> _attempt_to_pin_criterion                                                                                                                                                            </span><br><span class="line">    criteria = self._get_updated_criteria(candidate)                                                                                                              </span><br><span class="line">               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                              </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py&quot;</span>, line 230, <span class="keyword">in</span> _get_updated_criteria                                                                                                                                                                </span><br><span class="line">    self._add_to_criteria(criteria, requirement, parent=candidate)                                                                                                </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/resolvelib/resolvers.py&quot;</span>, line 173, <span class="keyword">in</span> _add_to_criteria   </span><br><span class="line">    <span class="keyword">if</span> not criterion.candidates:                                                                                                                                  </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^                                                                                                                                   </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/resolvelib/structs.py&quot;</span>, line 156, <span class="keyword">in</span> __bool__             </span><br><span class="line">    <span class="built_in">return</span> bool(self._sequence)                                                                                                                                   </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^                                                                                                                                   </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py&quot;</span>, line 174, <span class="keyword">in</span> __bool__                                                                                                                                                         </span><br><span class="line">    <span class="built_in">return</span> any(self)                                                                                                                                              </span><br><span class="line">           ^^^^^^^^^                                                                                                                                              </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py&quot;</span>, line 162, <span class="keyword">in</span> &lt;genexpr&gt;                                                                                                                                                        </span><br><span class="line">    <span class="built_in">return</span> (c <span class="keyword">for</span> c <span class="keyword">in</span> iterator <span class="keyword">if</span> <span class="built_in">id</span>(c) not <span class="keyword">in</span> self._incompatible_ids)                                                                                           </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                           </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py&quot;</span>, line 53, <span class="keyword">in</span> _iter_built                                                                                                                                                       </span><br><span class="line">    candidate = func()                                                                                                                                            </span><br><span class="line">                ^^^^^^                                                                                                                                            </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/factory.py&quot;</span>, line 186, <span class="keyword">in</span> _make_candidate_from_link                                                                                                                                                 </span><br><span class="line">    base: Optional[BaseCandidate] = self._make_base_candidate_from_link(                                                                                          </span><br><span class="line">                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                          </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/factory.py&quot;</span>, line 232, <span class="keyword">in</span> _make_base_candidate_from_link                                                                                                                                            </span><br><span class="line">    self._link_candidate_cache[<span class="built_in">link</span>] = LinkCandidate(                                                                                                             </span><br><span class="line">                                       ^^^^^^^^^^^^^^                                                                                                             </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py&quot;</span>, line 303, <span class="keyword">in</span> __init__                                                                                                                                                               </span><br><span class="line">    super().__init__(                                                                                                                                             </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py&quot;</span>, line 158, <span class="keyword">in</span> __init__                                                                                                                                                               </span><br><span class="line">    self.dist = self._prepare()                                                                                                                                   </span><br><span class="line">                ^^^^^^^^^^^^^^^                                                                                                                                   </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py&quot;</span>, line 235, <span class="keyword">in</span> _prepare                                                                                                                                                               </span><br><span class="line">    dist = self._prepare_distribution()                                                                                                                           </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                           </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py&quot;</span>, line 314, <span class="keyword">in</span> _prepare_distribution                                                                                                                                                  </span><br><span class="line">    <span class="built_in">return</span> preparer.prepare_linked_requirement(self._ireq, parallel_builds=True)                                                                                  </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                  </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/operations/prepare.py&quot;</span>, line 527, <span class="keyword">in</span> prepare_linked_requirement                                                                                                                                                           </span><br><span class="line">    <span class="built_in">return</span> self._prepare_linked_requirement(req, parallel_builds)                                                                                                 </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                 </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/operations/prepare.py&quot;</span>, line 642, <span class="keyword">in</span> _prepare_linked_requirement                                                                                                                                                          </span><br><span class="line">    dist = _get_prepared_distribution(                                                                                                                            </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                            </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/operations/prepare.py&quot;</span>, line 72, <span class="keyword">in</span> _get_prepared_distribution                                                                                                                                                            </span><br><span class="line">    abstract_dist.prepare_distribution_metadata(                                                                                                                  </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/distributions/sdist.py&quot;</span>, line 56, <span class="keyword">in</span> prepare_distribution_metadata                                                                                                                                                        </span><br><span class="line">    self._install_build_reqs(finder)                                                                                                                              </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/distributions/sdist.py&quot;</span>, line 126, <span class="keyword">in</span> _install_build_reqs                                                                                                                                                                 </span><br><span class="line">    build_reqs = self._get_build_requires_wheel()                                                                                                                 </span><br><span class="line">                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                 </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/distributions/sdist.py&quot;</span>, line 103, <span class="keyword">in</span> _get_build_requires_wheel                                                                                                                                                           </span><br><span class="line">    <span class="built_in">return</span> backend.get_requires_for_build_wheel()                                                                                                                 </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                 </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_internal/utils/misc.py&quot;</span>, line 706, <span class="keyword">in</span> get_requires_for_build_wheel                                                                                                                                                                 </span><br><span class="line">    <span class="built_in">return</span> super().get_requires_for_build_wheel(config_settings=cs)                                                                                               </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                               </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_impl.py&quot;</span>, line 166, <span class="keyword">in</span> get_requires_for_build_wheel                                                                                                                                                        </span><br><span class="line">    <span class="built_in">return</span> self._call_hook(<span class="string">&#x27;get_requires_for_build_wheel&#x27;</span>, &#123;                                                                                                      </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                      </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_impl.py&quot;</span>, line 321, <span class="keyword">in</span> _call_hook        </span><br><span class="line">    raise BackendUnavailable(data.get(<span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;&#x27;</span>))                                                                                                           </span><br><span class="line">pip._vendor.pyproject_hooks._impl.BackendUnavailable: Traceback (most recent call last):                                                                          </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/envs/superset3.12/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py&quot;</span>, line 77, <span class="keyword">in</span> _build_backend                                                                                                                                                     </span><br><span class="line">    obj = import_module(mod_path)                                                                                                                                 </span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^                                                                                                                                 </span><br><span class="line">  File <span class="string">&quot;/home/zhangjc/.pyenv/versions/3.12.5/lib/python3.12/importlib/__init__.py&quot;</span>, line 90, <span class="keyword">in</span> import_module                                                     </span><br><span class="line">    <span class="built_in">return</span> _bootstrap._gcd_import(name[level:], package, level)                                                                                                   </span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                   </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 1387, <span class="keyword">in</span> _gcd_import                                                                                                 </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 1360, <span class="keyword">in</span> _find_and_load                                                                                              </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 1310, <span class="keyword">in</span> _find_and_load_unlocked                                                                                     </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 488, <span class="keyword">in</span> _call_with_frames_removed                                                                                    </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 1387, <span class="keyword">in</span> _gcd_import                                                                                                 </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 1360, <span class="keyword">in</span> _find_and_load                                                                                              </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 1331, <span class="keyword">in</span> _find_and_load_unlocked                                                                                     </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 935, <span class="keyword">in</span> _load_unlocked                                                                                               </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap_external&gt;&quot;</span>, line 995, <span class="keyword">in</span> exec_module                                                                                         </span><br><span class="line">  File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line 488, <span class="keyword">in</span> _call_with_frames_removed                                                                                    </span><br><span class="line">  File <span class="string">&quot;/tmp/pip-build-env-u9f30fu2/overlay/lib/python3.12/site-packages/setuptools/__init__.py&quot;</span>, line 10, <span class="keyword">in</span> &lt;module&gt;                                            </span><br><span class="line">    import distutils.core                                                                                                                                         </span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;distutils&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面的报错信息很长，其实核心问题就出在“distutils”模块上。根据Python官方文档，<a href="https://docs.python.org/zh-cn/3.11/library/distutils.html#module-distutils">distutils</a>已被弃用并计划在Python 3.12中移除。</p>
<p>Superset 4.0.2在Python 3.11下可以正常使用，参见我的另外一篇博客：<a href="https://www.zhangjc.com/2024/12/25/%E4%BB%8EPyPI%E5%AE%89%E8%A3%85Superset/">从PyPI安装Superset</a>。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Python</tag>
        <tag>Superset</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset配置</title>
    <url>/2024/12/25/Superset%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="superset-config-py"><a href="#superset-config-py" class="headerlink" title="superset_config.py"></a>superset_config.py</h1><p>通过config.py模块，Superset对外暴露上百个配置参数。在这个模块中，可以找到这些参数，和这些参数的默认值。以注释的方式，这个模块也可以作为一个丰富的文档。</p>
<p>为了配置自己的应用，需要创建自己的配置模块，用来重载改写这些参数的默认值。为了不改变核心模块，一般需要创建自己的配置模块（通常是一个名称为superset_config.py的文件）。添加这个文件到PYTHONPATH或创建环境变量SUPERSET_CONFIG_PATH并指定superset_config.py的完整路径。</p>
<p>例如，在Linux系统下部署Superset，superset_config.py文件在&#x2F;app目录下，环境变量如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SUPERSET_CONFIG_PATH=/app/superset_config.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常只拷贝核心模块<a href="https://github.com/apache/superset/blob/master/superset/config.py">superset&#x2F;config.py</a>中需要修改的参数及注释到自己的superset_config.py文件中。</p>
</blockquote>
<p><a href="https://github.com/apache/superset/blob/master/superset/config.py">superset&#x2F;config.py</a>中定义的所有参数和默认值都可以在自己的superset_config.py中修改。</p>
<p>因为superset_config.py作为一个Flask的配置模块，它也可以用来修改Flask本身的设置，包括Superset绑定的Flask扩展，如flask-wtf、flask-caching、flask-migrate、和flask-appbuilder。每个扩展都提供了复杂的配置项。Flask App Builder是Superset使用的Web框架，也提供了很多配置。可以查阅<a href="https://flask-appbuilder.readthedocs.org/en/latest/config.html">Flask App Builder</a>文档获取如何配置的信息。</p>
<h1 id="指定SECRET-KEY"><a href="#指定SECRET-KEY" class="headerlink" title="指定SECRET_KEY"></a>指定SECRET_KEY</h1><h2 id="初始化SECRET-KEY"><a href="#初始化SECRET-KEY" class="headerlink" title="初始化SECRET_KEY"></a>初始化SECRET_KEY</h2><p>Superset需要一个用户设置的SECRET_KEY值才可以启动。这个必要条件是在 <a href="https://preset.io/blog/superset-security-update-default-secret_key-vulnerability/">2.1.0 版本的强制安全配置中添加的。</a>在superset_config.py中添加一个强SECRET_KEY，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SECRET_KEY = <span class="string">&#x27;YOUR_OWN_RANDOM_GENERATED_SECRET_KEY&#x27;</span></span><br></pre></td></tr></table></figure>

<p>用以下命令生成一个强安全key值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rand -<span class="built_in">base64</span> 42</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>使用强安全key值</strong><br>这个key值被用来为会话的cookies签名，以及把存储在Superset应用元数据库中的敏感信息加密。自己的部署必须使用一个复杂、唯一的key值。</p>
</blockquote>
<h2 id="更换SECRET-KEY"><a href="#更换SECRET-KEY" class="headerlink" title="更换SECRET_KEY"></a>更换SECRET_KEY</h2><p>如果想修改SECRET_KEY的值，添加已经已经存在的SECRET_KEY值到superset_config.py文件中的PREVIOUS_SECRET_KEY&#x3D;中，并且赋新值给SECRET_KEY&#x3D;。可以用下面的命令查看SECRET_KEY的当前值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">superset shell</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app; <span class="built_in">print</span>(current_app.config[<span class="string">&quot;SECRET_KEY&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>设置完后保存superset_config.py文件，并执行命令superset re-encrypt-secrets。</p>
<h1 id="配置元数据库"><a href="#配置元数据库" class="headerlink" title="配置元数据库"></a>配置元数据库</h1><p>Superset需要数据库来存储它管理的信息，如图表、面板及其他很多东西的定义。</p>
<p>默认的，Superset使用SQLite。SQLite是一个独立的、单个文件的数据库，提供简单且快速开始使用Superset的方式（不需要任何额外安装）。但是，由于安全、扩展性及数据完整性的原因，SQLite不推荐用作生产环境。在生产环境中使用支持的数据库非常重要。</p>
<p>Superset支持以下数据库引擎&#x2F;版本：</p>
<table>
<thead>
<tr>
<th>数据库引擎</th>
<th>支持的版本</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.postgresql.org/">PostgreSQL</a></td>
<td>10.X, 11.X, 12.X, 13.X, 14.X, 15.X</td>
</tr>
<tr>
<td><a href="https://www.mysql.com/">MySQL</a></td>
<td>5.7, 8.X</td>
</tr>
</tbody></table>
<p>使用下面的数据库驱动和连接设置：</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>PyPI包</th>
<th>连接串</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.postgresql.org/">PostgreSQL</a></td>
<td>pip install psycopg2</td>
<td>postgresql:&#x2F;&#x2F;<UserName>:<DBPassword>@<Database Host>&#x2F;<Database Name></td>
</tr>
<tr>
<td><a href="https://www.mysql.com/">MySQL</a></td>
<td>pip install mysqlclient</td>
<td>mysql:&#x2F;&#x2F;<UserName>:<DBPassword>@<Database Host>&#x2F;<Database Name></td>
</tr>
</tbody></table>
<p>要设置Superset的元数据库，在superset_config.py配置文件中设置SQLALCHEMY_DATABASE_URI配置项。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Python</tag>
        <tag>Superset</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Tez 0.10.1安装</title>
    <url>/2021/08/18/Tez-0-10-1%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>具体安装步骤参照官网安装手册即可。此处只对官网手册进行补充。</p>
<p>从官网下载apache-tez-0.10.1-bin.tar.gz进行安装未成功，出现下面的异常。最终按照官网源代码编译的方式安装测试成功。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Hadoop 3.2.2</li>
<li>Tez 0.10.1</li>
</ul>
<h1 id="二进制包安装异常"><a href="#二进制包安装异常" class="headerlink" title="二进制包安装异常"></a>二进制包安装异常</h1><ul>
<li>异常1：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-08-18 18:51:15,362 [INFO] [main] |service.AbstractService|: Service org.apache.tez.dag.app.DAGAppMaster failed in state STARTED</span><br><span class="line">org.apache.hadoop.service.ServiceStateException: java.lang.NoClassDefFoundError: org/eclipse/jetty/servlet/ServletContextHandler</span><br><span class="line">  at org.apache.hadoop.service.ServiceStateException.convert(ServiceStateException.java:105)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.startServices(DAGAppMaster.java:1879)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.serviceStart(DAGAppMaster.java:1943)</span><br><span class="line">  at org.apache.hadoop.service.AbstractService.start(AbstractService.java:194)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster$9.run(DAGAppMaster.java:2626)</span><br><span class="line">  at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">  at javax.security.auth.Subject.doAs(Subject.java:422)</span><br><span class="line">  at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.initAndStartAppMaster(DAGAppMaster.java:2622)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.main(DAGAppMaster.java:2409)</span><br><span class="line">Caused by: java.lang.NoClassDefFoundError: org/eclipse/jetty/servlet/ServletContextHandler</span><br><span class="line">  at org.apache.hadoop.yarn.webapp.WebApps.$for(WebApps.java:515)</span><br><span class="line">  at org.apache.hadoop.yarn.webapp.WebApps.$for(WebApps.java:521)</span><br><span class="line">  at org.apache.hadoop.yarn.webapp.WebApps.$for(WebApps.java:526)</span><br><span class="line">  at org.apache.tez.dag.app.web.WebUIService.serviceStart(WebUIService.java:92)</span><br><span class="line">  at org.apache.hadoop.service.AbstractService.start(AbstractService.java:194)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster$ServiceWithDependency.start(DAGAppMaster.java:1800)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster$ServiceThread.run(DAGAppMaster.java:1821)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.servlet.ServletContextHandler</span><br><span class="line">  at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">  at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">  ... 7 more</span><br></pre></td></tr></table></figure>

<ul>
<li>异常2：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-08-18 16:18:36,244 [INFO] [main] |service.AbstractService|: Service org.apache.tez.dag.app.DAGAppMaster failed in state STARTED</span><br><span class="line">org.apache.hadoop.service.ServiceStateException: java.lang.NoSuchMethodError: org.eclipse.jetty.server.session.SessionHandler.getSessionManager()Lorg/eclipse/jetty/server/SessionManager;</span><br><span class="line">  at org.apache.hadoop.service.ServiceStateException.convert(ServiceStateException.java:105)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.startServices(DAGAppMaster.java:1879)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.serviceStart(DAGAppMaster.java:1943)</span><br><span class="line">  at org.apache.hadoop.service.AbstractService.start(AbstractService.java:194)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster$9.run(DAGAppMaster.java:2626)</span><br><span class="line">  at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">  at javax.security.auth.Subject.doAs(Subject.java:422)</span><br><span class="line">  at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1729)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.initAndStartAppMaster(DAGAppMaster.java:2622)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster.main(DAGAppMaster.java:2409)</span><br><span class="line">Caused by: java.lang.NoSuchMethodError: org.eclipse.jetty.server.session.SessionHandler.getSessionManager()Lorg/eclipse/jetty/server/SessionManager;</span><br><span class="line">  at org.apache.hadoop.http.HttpServer2.initializeWebServer(HttpServer2.java:569)</span><br><span class="line">  at org.apache.hadoop.http.HttpServer2.&lt;init&gt;(HttpServer2.java:550)</span><br><span class="line">  at org.apache.hadoop.http.HttpServer2.&lt;init&gt;(HttpServer2.java:117)</span><br><span class="line">  at org.apache.hadoop.http.HttpServer2$Builder.build(HttpServer2.java:425)</span><br><span class="line">  at org.apache.hadoop.yarn.webapp.WebApps$Builder.build(WebApps.java:341)</span><br><span class="line">  at org.apache.hadoop.yarn.webapp.WebApps$Builder.start(WebApps.java:432)</span><br><span class="line">  at org.apache.hadoop.yarn.webapp.WebApps$Builder.start(WebApps.java:428)</span><br><span class="line">  at org.apache.tez.dag.app.web.WebUIService.serviceStart(WebUIService.java:94)</span><br><span class="line">  at org.apache.hadoop.service.AbstractService.start(AbstractService.java:194)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster$ServiceWithDependency.start(DAGAppMaster.java:1800)</span><br><span class="line">  at org.apache.tez.dag.app.DAGAppMaster$ServiceThread.run(DAGAppMaster.java:1821)</span><br></pre></td></tr></table></figure>

<h1 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>修改以下配置与使用的Hadoop版本一致：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改以下配置与<code>$&#123;HADOOP_HOME&#125;/share/hadoop/common/lib/guava-27.0-jre.jar</code>版本一致。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>27.0-jre<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="tez-site-xml"><a href="#tez-site-xml" class="headerlink" title="tez-site.xml"></a>tez-site.xml</h2><p>需要注意两点：</p>
<ul>
<li>与官网不同，<code>tez.use.cluster.hadoop-libs</code>配置为true。</li>
<li>该配置文件需要分发到Hadoop集群的所有节点。位置：<code>$&#123;HADOOP_HOME&#125;/etc/hadoop</code>目录下。</li>
</ul>
<p>完整内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>tez.lib.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;fs.defaultFS&#125;/lib/tez/tez-0.10.1.tar.gz<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>string<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>tez.use.cluster.hadoop-libs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>常用组件</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Tez</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPad E480安装Ubuntu 18.04无线网卡驱动</title>
    <url>/2019/10/23/ThinkPad-E480-%E5%AE%89%E8%A3%85-Ubuntu-18-04-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>遗憾的是虽然下面的方法可以解决，但是内核升级后需要重新安装。</p>
<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><ul>
<li>Ubuntu 18.04</li>
<li>ThinkPad E480</li>
<li>使用下面的命令查看 Linux 内核：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">5.0.0-32-generic</span><br></pre></td></tr></table></figure>

<ul>
<li>使用以下命令查看网卡型号信息：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> lshw -C network</span><br><span class="line">  *-network UNCLAIMED</span><br><span class="line">       description: Network controller</span><br><span class="line">       product: RTL8821CE 802.11ac PCIe Wireless Network Adapter</span><br><span class="line">       vendor: Realtek Semiconductor Co., Ltd.</span><br><span class="line">       physical <span class="built_in">id</span>: 0</span><br><span class="line">       bus info: pci@0000:05:00.0</span><br><span class="line">       version: 00</span><br><span class="line">       width: 64 bits</span><br><span class="line">       clock: 33MHz</span><br><span class="line">       capabilities: pm msi pciexpress cap_list</span><br><span class="line">       configuration: latency=0</span><br><span class="line">       resources: ioport:b000(size=256) memory:f2100000-f210ffff</span><br></pre></td></tr></table></figure>

<p>让人头疼的就是这款网卡RTL8821CE！！这款网卡在Linux的内核中还未支持，只能自行编译安装。</p>
<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><ul>
<li><a href="https://blog.csdn.net/fljhm/article/details/79281655">https://blog.csdn.net/fljhm/article/details/79281655</a></li>
<li><a href="https://unix.stackexchange.com/questions/379049/realtek-rtl8821ce-wifi-driver-problem-in-linux-mint-18-2">https://unix.stackexchange.com/questions/379049/realtek-rtl8821ce-wifi-driver-problem-in-linux-mint-18-2</a></li>
</ul>
<h1 id="驱动源码下载"><a href="#驱动源码下载" class="headerlink" title="驱动源码下载"></a>驱动源码下载</h1><p>以下源代码是我修改过之后，可以成功编译。原始的代码编译过程中会有不少异常，可以参考上面的网址解决一部分，对于头文件找不到的按照提示将缺少的头文件拷贝到对应的位置即可。</p>
<p>源码下载：<a href="/images/202501/rtl8821ce.zip">rtl8821ce.zip</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 15.10 安装 MongoDB</title>
    <url>/2025/10/27/Ubuntu-15-10-%E5%AE%89%E8%A3%85-MongoDB/</url>
    <content><![CDATA[<p>本篇主要参考官方安装文档，在 Ubuntu 15.10 上安装并启动。中间遇到一些问题，已经找到解决方案。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>从 3.2 版本开始，MongoDB 不再支持 32 位的平台。</p>
<p>使用本教程从 .deb 包在 LTS Ubuntu Linux 系统上安装 MongoDB 社区版。虽然 Ubuntu 包含自己的 MongoDB 包，官方 MongoDB 社区版包通常是更新的。</p>
<h1 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h1><p>MongoDB 在自己的仓库中提供了官方支持的安装包。这个仓库包含一下包：</p>
<ul>
<li>mongodb-org：一个元安装包，可以自动安装下面的四个组件安装包。</li>
<li>mongodb-org-server：包含 mongod 守护进程和相关的配置及初始脚本。</li>
<li>mongodb-org-mongos：包含 mongos 守护进程。</li>
<li>mongodb-org-shell：包含 mongo shell。</li>
<li>mongodb-org-tools：包含以下 MongoDB 工具：mongoimport、bsondump、mongodump、mongoexport、mongofiles、mongooplog、mongoperf、mongorestore、mongostat 和 mongotop。</li>
</ul>
<p>这些包与 Ubuntu 提供的 mongodb、mongodb-server 和 mongodb-clients 包冲突。</p>
<p>安装包提供的默认的 &#x2F;etc&#x2F;mongod.conf 配置文件默认设置 bind_ip 为 127.0.0.1。在初始化一个 replica set 之前根据环境的需要修改这个设置。</p>
<h1 id="初始化脚本"><a href="#初始化脚本" class="headerlink" title="初始化脚本"></a>初始化脚本</h1><p>mongodb-org 安装包包含许多初始化脚本，包含初始化脚本 &#x2F;etc&#x2F;init.d&#x2F;mongod。你可以用这些脚本停止、启动和重启守护进程。</p>
<p>安装包使用 &#x2F;etc&#x2F;mongod.conf 文件结合初始化脚本配置 MongoDB。查看<a href="https://link.zhihu.com/?target=https://docs.mongodb.org/manual/reference/configuration-options/">配置文件</a>参考获取配置文件中的设置参数。</p>
<p>从 3.2.5 版本开始，不再有 mongos 初始脚本。mongos 进程只在 sharding 时用。你可以用 mongod 初始脚本生成自己的 mongos 初始化脚本在这样的环境使用。查看 <a href="https://link.zhihu.com/?target=https://docs.mongodb.org/manual/reference/program/mongos/%23bin.mongos">mongos</a> 参考获取详细配置。</p>
<h1 id="安装-MongoDB-社区版"><a href="#安装-MongoDB-社区版" class="headerlink" title="安装 MongoDB 社区版"></a>安装 MongoDB 社区版</h1><p>MongoDB 只为 64 位长期支持的 Ubuntu 发行版提供安装包。当前，这意味着 12.04 LTS (Precise Pangolin) 和 14.04 LTS (Trusty Tahr) 两个版本。同时b安装包在其他 Ubuntu 发行版本也可以运行，这不是一个维持的配置。</p>
<h2 id="1、导入安装包管理系统使用的公钥"><a href="#1、导入安装包管理系统使用的公钥" class="headerlink" title="1、导入安装包管理系统使用的公钥"></a>1、导入安装包管理系统使用的公钥</h2><p>Ubuntu 包管理工具（例如 dpkg 和 apt) 通过要求发布者签名的 GPG 密钥确保安装包的一致和真实。输入下面的命令导入 MongoDB GPG 公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</span><br></pre></td></tr></table></figure>

<h2 id="2、为-MongoDB-创建一个文件列表"><a href="#2、为-MongoDB-创建一个文件列表" class="headerlink" title="2、为 MongoDB 创建一个文件列表"></a>2、为 MongoDB 创建一个文件列表</h2><p>使用适用你的 Ubuntu 版本的命令创建 &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-3.2.list 列表文件：</p>
<p>Ubuntu 12.04：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.2 multiverse&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.2.list</span><br></pre></td></tr></table></figure>

<p>Ubuntu 14.04：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.2.list</span><br></pre></td></tr></table></figure>

<h2 id="3、重新加载本地安装包数据库"><a href="#3、重新加载本地安装包数据库" class="headerlink" title="3、重新加载本地安装包数据库"></a>3、重新加载本地安装包数据库</h2><p>输入以下命令重新加载本地安装包数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>

<p>重新加载过程中可能会报以下错误信息，多试两次即可：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">错误 http://repo.mongodb.org trusty/mongodb-org/3.2/multiverse Translation-zh_CN                                                              </span><br><span class="line">  不能连接到 repo.mongodb.org：http：</span><br><span class="line">错误 http://repo.mongodb.org trusty/mongodb-org/3.2/multiverse Translation-zh</span><br><span class="line">  不能连接到 repo.mongodb.org：http：</span><br><span class="line">错误 http://repo.mongodb.org trusty/mongodb-org/3.2/multiverse Translation-en_US</span><br><span class="line">  不能连接到 repo.mongodb.org：http：</span><br><span class="line">错误 http://repo.mongodb.org trusty/mongodb-org/3.2/multiverse Translation-en</span><br><span class="line">  不能连接到 repo.mongodb.org：http：</span><br></pre></td></tr></table></figure>

<p>如果报以下错误信息，可以将添加到文件列表中的信息由 HTTP 改为 HTTPS：</p>
<p>错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">W: 无法下载 http://repo.mongodb.org/apt/ubuntu/dists/trusty/mongodb-org/3.2/multiverse/binary-amd64/Packages  Hash 校验和不符</span><br></pre></td></tr></table></figure>

<p>第 2 步创建文件列表命令改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-3.2.list</span><br></pre></td></tr></table></figure>

<p>再次执行更新命令成功。</p>
<h2 id="4、安装-MongoDB"><a href="#4、安装-MongoDB" class="headerlink" title="4、安装 MongoDB"></a>4、安装 MongoDB</h2><p>可以安装 MongoDB 最新稳定版本或者指定的版本。</p>
<h2 id="5、安装-MongoDB-最新稳定版本"><a href="#5、安装-MongoDB-最新稳定版本" class="headerlink" title="5、安装 MongoDB 最新稳定版本"></a>5、安装 MongoDB 最新稳定版本</h2><p>输入下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure>

<h2 id="6、安装特定版本的-MongoDB"><a href="#6、安装特定版本的-MongoDB" class="headerlink" title="6、安装特定版本的 MongoDB"></a>6、安装特定版本的 MongoDB</h2><p>安装特定发行版，你必须分别单独用版本号指定每个组件，像下面示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y mongodb-org=3.2.5 mongodb-org-server=3.2.5 mongodb-org-shell=3.2.5 mongodb-org-mongos=3.2.5 mongodb-org-tools=3.2.5</span><br></pre></td></tr></table></figure>

<p>如果你只安装 mongodb-org&#x3D;3.2.5，并且没有包含组件安装包，MongoDB 每个最新的版本将被安装，不管你指明了哪个版本。</p>
<h2 id="7、固定一个特定版本的-MongoDB"><a href="#7、固定一个特定版本的-MongoDB" class="headerlink" title="7、固定一个特定版本的 MongoDB"></a>7、固定一个特定版本的 MongoDB</h2><p>虽然你可以指定任何可以获取的 MongoDB 版本，当新版本可以获取时 apt-get 将更新安装包。为了防止无意的更新，固定安装包。为了固定当前安装的 MongoDB 版本，输入以下命令序列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb-org hold&quot;</span> | <span class="built_in">sudo</span> dpkg --set-selections</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb-org-server hold&quot;</span> | <span class="built_in">sudo</span> dpkg --set-selections</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb-org-shell hold&quot;</span> | <span class="built_in">sudo</span> dpkg --set-selections</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb-org-mongos hold&quot;</span> | <span class="built_in">sudo</span> dpkg --set-selections</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb-org-tools hold&quot;</span> | <span class="built_in">sudo</span> dpkg --set-selections</span><br></pre></td></tr></table></figure>

<h1 id="运行-MongoDB-社区版"><a href="#运行-MongoDB-社区版" class="headerlink" title="运行 MongoDB 社区版"></a>运行 MongoDB 社区版</h1><p>默认的 MongoDB 实例在 &#x2F;var&#x2F;lib&#x2F;mongodb 存储数据文件，并且在 &#x2F;var&#x2F;log&#x2F;mongodb 存储日志文件，并且用 mongodb 用户用户帐号运行。你可以在 &#x2F;etc&#x2F;mongod.conf 中指定替换的日志和数据文件目录。查看 systemLog.path 和 storage.dbPath 获取额外的信息。</p>
<p>如果改变运行 MongoDB 进程的用户，你必须修改 &#x2F;var&#x2F;lib&#x2F;mongodb 和 &#x2F;var&#x2F;log&#x2F;mongodb 目录的访问控制权限给这个用户对这些目录的访问权限。</p>
<h2 id="1、启动-MongoDB"><a href="#1、启动-MongoDB" class="headerlink" title="1、启动 MongoDB"></a>1、启动 MongoDB</h2><p>输入下面的命令启动 mongod：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mongod start</span><br></pre></td></tr></table></figure>

<p>执行上面的命令会报错，错误信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed to start mongod.service: Unit mongod.service failed to load: No such file or directory.</span><br></pre></td></tr></table></figure>

<p>原因是缺少 systemd 的 service 文件。不需要重新开始安装或者换用其他仓库。创建文件 &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod.service，并输入以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=High-performance, schema-free document-oriented database</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=mongodb</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/mongod --quiet --config /etc/mongod.conf</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod.service 和配置内容中的文件名可能需要对应的做修改，可能是 mongodb.service 和 mongodb.conf。参考网上的资料是 mongodb，而我的系统安装后都是 mongod。</p>
</blockquote>
<p>重新执行启动命令，提示以下信息，检查 mongo 进程不存在，说明未启动成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: mongod.service changed on disk. Run <span class="string">&#x27;systemctl daemon-reload&#x27;</span> to reload units.</span><br></pre></td></tr></table></figure>

<p>根据提示执行以下命令，并输入用户密码，再次执行启动命令，这次启动成功 :)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h2 id="2、确认-MongoDB-已经成功启动"><a href="#2、确认-MongoDB-已经成功启动" class="headerlink" title="2、确认 MongoDB 已经成功启动"></a>2、确认 MongoDB 已经成功启动</h2><p>通过读取检查 &#x2F;var&#x2F;log&#x2F;mongodb&#x2F;mongod.log 日志文件中的下面一行记录确认 mongod 进程已经成功启动。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[initandlisten] waiting for connections on port &lt;port&gt;</span><br></pre></td></tr></table></figure>

<p>是在 &#x2F;etc&#x2F;mongod.conf 文件中配置的端口号，默认是 27017。</p>
<p>以下是我的安装过程的启动日志信息：<br><img src="/images/202510/30.jpg"></p>
<h2 id="3、停止-MongoDB"><a href="#3、停止-MongoDB" class="headerlink" title="3、停止 MongoDB"></a>3、停止 MongoDB</h2><p>如果需要，你可以输入以下命令停止 mongod 进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mongod stop</span><br></pre></td></tr></table></figure>

<h2 id="4、重启-MongoDB"><a href="#4、重启-MongoDB" class="headerlink" title="4、重启 MongoDB"></a>4、重启 MongoDB</h2><p>输入以下命令重启 mongod 进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mongod restart</span><br></pre></td></tr></table></figure>

<h1 id="卸载-MongoDB-社区版"><a href="#卸载-MongoDB-社区版" class="headerlink" title="卸载 MongoDB 社区版"></a>卸载 MongoDB 社区版</h1><p>要从系统中完全移除 MongoDB，你必须移除 MongoDB 应用程序、配置文件和所有包含数据和日志的目录。下面的章节指导你通过必要的步骤完成卸载。</p>
<blockquote>
<p>警告：<br>这个过程将完全移除 MongoDB、配置和所有数据库。这个过程是不能恢复的，因此确认执行该过程前确保你的配置和数据应经备份。</p>
</blockquote>
<h2 id="1、停止-MongoDB"><a href="#1、停止-MongoDB" class="headerlink" title="1、停止 MongoDB"></a>1、停止 MongoDB</h2><p>输入以下命令停止 mongod 进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mongod stop</span><br></pre></td></tr></table></figure>

<h2 id="2、移除安装包"><a href="#2、移除安装包" class="headerlink" title="2、移除安装包"></a>2、移除安装包</h2><p>移除所有以前安装的 MongoDB 安装包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge mongodb-org*</span><br></pre></td></tr></table></figure>

<h2 id="3、移除数据目录"><a href="#3、移除数据目录" class="headerlink" title="3、移除数据目录"></a>3、移除数据目录</h2><p>移除 MongoDB 数据库和日志文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -r /var/log/mongodb</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -r /var/lib/mongodb</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04安装Lua</title>
    <url>/2016/07/23/Ubuntu-16-04-%E5%AE%89%E8%A3%85-Lua/</url>
    <content><![CDATA[<p>在Linux系统上使用以下命令编译安装Lua：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.3.tar.gz</span><br><span class="line">tar zxf lua-5.3.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-5.3.3</span><br><span class="line">make linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h1 id="安装make"><a href="#安装make" class="headerlink" title="安装make"></a>安装make</h1><p>编译过程如果提示以下信息则需要先安装make：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make linux test</span></span><br><span class="line">The program <span class="string">&#x27;make&#x27;</span> can be found <span class="keyword">in</span> the following packages:</span><br><span class="line"> * make</span><br><span class="line"> * make-guile</span><br><span class="line">Try: apt install &lt;selected package&gt;</span><br></pre></td></tr></table></figure>

<p>安装make</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install make</span></span><br></pre></td></tr></table></figure>

<h1 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h1><p>编译过程提示以下信息则需要安装gcc：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make linux test</span></span><br><span class="line"><span class="built_in">cd</span> src &amp;&amp; make linux</span><br><span class="line">make[1]: Entering directory <span class="string">&#x27;/root/lua/lua-5.3.3/src&#x27;</span></span><br><span class="line">make all SYSCFLAGS=<span class="string">&quot;-DLUA_USE_LINUX&quot;</span> SYSLIBS=<span class="string">&quot;-Wl,-E -ldl -lreadline&quot;</span></span><br><span class="line">make[2]: Entering directory <span class="string">&#x27;/root/lua/lua-5.3.3/src&#x27;</span></span><br><span class="line">gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX    -c -o lapi.o lapi.c</span><br><span class="line">make[2]: gcc: Command not found</span><br><span class="line">&lt;<span class="built_in">builtin</span>&gt;: recipe <span class="keyword">for</span> target <span class="string">&#x27;lapi.o&#x27;</span> failed</span><br><span class="line">make[2]: *** [lapi.o] Error 127</span><br><span class="line">make[2]: Leaving directory <span class="string">&#x27;/root/lua/lua-5.3.3/src&#x27;</span></span><br><span class="line">Makefile:110: recipe <span class="keyword">for</span> target <span class="string">&#x27;linux&#x27;</span> failed</span><br><span class="line">make[1]: *** [linux] Error 2</span><br><span class="line">make[1]: Leaving directory <span class="string">&#x27;/root/lua/lua-5.3.3/src&#x27;</span></span><br><span class="line">Makefile:55: recipe <span class="keyword">for</span> target <span class="string">&#x27;linux&#x27;</span> failed</span><br><span class="line">make: *** [linux] Error 2</span><br></pre></td></tr></table></figure>

<p>安装gcc：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install gcc</span></span><br></pre></td></tr></table></figure>

<p>安装gcc过程提示以下信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">E: Failed to fetch http://cn.archive.ubuntu.com/ubuntu/pool/main/b/binutils/binutils_2.26.1-1ubuntu1~16.04_amd64.deb  404  Not Found [IP: 115.28.122.210 80]</span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br></pre></td></tr></table></figure>

<p>先更新安装源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get update</span></span><br></pre></td></tr></table></figure>

<p>再次安装gcc成功。</p>
<h1 id="安装libreadline-dev"><a href="#安装libreadline-dev" class="headerlink" title="安装libreadline-dev"></a>安装libreadline-dev</h1><p>编译过程提示以下信息则需要安装libreadline-dev：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lua.c:80:31: fatal error: readline/readline.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<p>安装libreadline-dev：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install libreadline-dev</span></span><br></pre></td></tr></table></figure>

<p>再次编译成功。</p>
<h1 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h1><p>用以下方法检查安装，如果安装成功会有版本信息提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># src/lua -v</span></span><br><span class="line">Lua 5.3.3  Copyright (C) 1994-2016 Lua.org, PUC-Rio</span><br></pre></td></tr></table></figure>

<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make linux install</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Lua</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset配置数据库连接串密码不能包含@</title>
    <url>/2024/12/28/Superset%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%B2%E5%AF%86%E7%A0%81%E4%B8%8D%E8%83%BD%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>如果Superset元数据库连接配置SQLALCHEMY_DATABASE_URI中密码部分包含@符，则在执行superset db upgrade时异常，即使对@做转义也不能解决问题。例如，元数据配置参数SQLALCHEMY_DATABASE_URI如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://superset1:superset%4001@localhost/superset1?unix_socket=/tmp/mysql.sock&amp;charset=utf8&#x27;</span></span><br></pre></td></tr></table></figure>

<p>异常信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  File &quot;/home/zhangjc/.pyenv/versions/3.11.9/envs/superset/lib/python3.11/site-packages/MySQLdb/connections.py&quot;, line 195, in __init__</span><br><span class="line">    super().__init__(*args, **kwargs2)</span><br><span class="line">sqlalchemy.exc.OperationalError: (MySQLdb.OperationalError) (2005, &quot;Unknown MySQL server host &#x27;01@localhost&#x27; (-2)&quot;)</span><br><span class="line">(Background on this error at: https://sqlalche.me/e/14/e3q8)</span><br></pre></td></tr></table></figure>

<p>通过以上信息可以看出，所以进行了转义，但仍然将密码部分的@符作为密码和主机的分隔符。</p>
<p>该问题目前唯一的解决方法是修改元数据库访问密码，不要包含@符。这是因为Superset Server与数据库迁移组件Alembic之间对连接串的处理存在冲突。</p>
<p>Superset Server会将连接串转换为sqlalchemy.engine.url.URL进行处理，所以不会导致解析错误，参考代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_uri</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>._bind <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>]</span><br><span class="line">    binds = <span class="variable language_">self</span>._app.config.get(<span class="string">&#x27;SQLALCHEMY_BINDS&#x27;</span>) <span class="keyword">or</span> ()</span><br><span class="line">    <span class="keyword">assert</span> <span class="variable language_">self</span>._bind <span class="keyword">in</span> binds, \</span><br><span class="line">        <span class="string">&#x27;Bind %r is not specified.  Set it in the SQLALCHEMY_BINDS &#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;configuration variable&#x27;</span> % <span class="variable language_">self</span>._bind</span><br><span class="line">    <span class="keyword">return</span> binds[<span class="variable language_">self</span>._bind]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_engine</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="variable language_">self</span>._lock:</span><br><span class="line">        uri = <span class="variable language_">self</span>.get_uri()</span><br><span class="line">        echo = <span class="variable language_">self</span>._app.config[<span class="string">&#x27;SQLALCHEMY_ECHO&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> (uri, echo) == <span class="variable language_">self</span>._connected_for:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._engine</span><br><span class="line"></span><br><span class="line">        sa_url = make_url(uri)</span><br><span class="line">        sa_url, options = <span class="variable language_">self</span>.get_options(sa_url, echo)</span><br><span class="line">        <span class="variable language_">self</span>._engine = rv = <span class="variable language_">self</span>._sa.create_engine(sa_url, options)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _record_queries(<span class="variable language_">self</span>._app):</span><br><span class="line">            _EngineDebuggingSignalEvents(<span class="variable language_">self</span>._engine,</span><br><span class="line">                                         <span class="variable language_">self</span>._app.import_name).register()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._connected_for = (uri, echo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>

<p>Alembic使用Python内置配置文件解析器<a href="https://docs.python.org/zh-cn/3.11/library/configparser.html#module-configparser">configparser</a>处理配置信息，处理时只能用字符串，对SQLALCHEMY_DATABASE_URI处理前会先解码，所以导致解析不正确。参考代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASE_URI = current_app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;sqlite&quot;</span> <span class="keyword">in</span> DATABASE_URI:</span><br><span class="line">    logger.warning(</span><br><span class="line">        <span class="string">&quot;SQLite Database support for metadata databases will \</span></span><br><span class="line"><span class="string">        be removed in a future version of Superset.&quot;</span></span><br><span class="line">    )</span><br><span class="line">decoded_uri = urllib.parse.unquote(DATABASE_URI)</span><br><span class="line">config.set_main_option(<span class="string">&quot;sqlalchemy.url&quot;</span>, decoded_uri)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>虽然Alembic中可以用%%对%进行转义，但这样做会导致Superset Server解析配置异常。</p>
</blockquote>
<p>可参考的链接如下：</p>
<ul>
<li><a href="https://github.com/sqlalchemy/alembic/issues/1279">https://github.com/sqlalchemy/alembic/issues/1279</a></li>
<li><a href="https://github.com/sqlalchemy/alembic/discussions/1280">https://github.com/sqlalchemy/alembic/discussions/1280</a></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
        <tag>Superset</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 Realtek 8852无线网卡驱动</title>
    <url>/2022/01/05/Ubuntu-20-04-Realtek-8852-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install make gcc linux-headers-$(uname -r) build-essential git</span><br><span class="line"></span><br><span class="line">git clone https://github.com/lwfinger/rtw89.git -b v5</span><br><span class="line">cd rtw89 &amp;&amp; make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line">sudo modprobe rtw89pci</span><br></pre></td></tr></table></figure>

<p>执行完成后重启。</p>
<blockquote>
<p>参考链接：<a href="https://askubuntu.com/questions/1352731/ubuntu-20-04-no-wifi-adapter-found-lenovo-ideapad-realtek">https://askubuntu.com/questions/1352731/ubuntu-20-04-no-wifi-adapter-found-lenovo-ideapad-realtek</a></p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04安装Emacs 26.2问题解决</title>
    <url>/2019/06/04/Ubuntu-18-04-%E5%AE%89%E8%A3%85-Emacs-26-2-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="no-X-development-libraries-were-found"><a href="#no-X-development-libraries-were-found" class="headerlink" title="no X development libraries were found"></a>no X development libraries were found</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">checking for X... no</span><br><span class="line">checking for X... true</span><br><span class="line">configure: error: You seem to be running X, but no X development libraries</span><br><span class="line">were found.  You should install the relevant development files for X</span><br><span class="line">and for the toolkit you want, such as Gtk+ or Motif.  Also make</span><br><span class="line">sure you have development files for image handling, i.e.</span><br><span class="line">tiff, gif, jpeg, png and xpm.</span><br><span class="line">If you are sure you want Emacs compiled without X window support, pass</span><br><span class="line">  --without-x</span><br><span class="line">to configure.</span><br></pre></td></tr></table></figure>

<p>安装libgtk开发包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install libgtk2.0-dev</span><br></pre></td></tr></table></figure>

<h1 id="libXpm-libjpeg-libgif-libungif-libtiff-gnutls-were-not-found"><a href="#libXpm-libjpeg-libgif-libungif-libtiff-gnutls-were-not-found" class="headerlink" title="libXpm libjpeg libgif&#x2F;libungif libtiff gnutls were not found"></a>libXpm libjpeg libgif&#x2F;libungif libtiff gnutls were not found</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">configure: error: The following required libraries were not found:</span><br><span class="line">    libXpm libjpeg libgif/libungif libtiff gnutls</span><br><span class="line">Maybe some development libraries/packages are missing?</span><br><span class="line">If you don&#x27;t want to link with them give</span><br><span class="line">    --with-xpm=no --with-jpeg=no --with-gif=no --with-tiff=no --with-gnutls=no</span><br><span class="line">as options to configure</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">安装对应的包：</span><br><span class="line"></span><br><span class="line">````Bash</span><br><span class="line">sudo apt-get install libxpm-dev</span><br><span class="line">sudo apt-get install libjpeg62-dev</span><br><span class="line">sudo apt-get install libgif-dev</span><br><span class="line">sudo apt-get install libtiff5-dev</span><br><span class="line">sudo apt-get install libgnutls28-dev</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Emacs</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Emacs</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04用APT安装MySQL</title>
    <url>/2017/06/11/Ubuntu-16-04-%E7%94%A8-APT-%E5%AE%89%E8%A3%85-MySQL/</url>
    <content><![CDATA[<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>用以下命令安装MySQL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install mysql-server</span><br></pre></td></tr></table></figure>

<p>这个命令会安装MySQL服务器、客户端和公共文件。安装过程会出现两个要求输入的对话框：</p>
<ul>
<li>输入MySQL root用户的密码。</li>
<li>指明是否创建test数据库。</li>
</ul>
<h1 id="启动-停止MySQL"><a href="#启动-停止MySQL" class="headerlink" title="启动&#x2F;停止MySQL"></a>启动&#x2F;停止MySQL</h1><p>安装之后，MySQL服务器会自动启动。用下面的命令检查MySQL服务器状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> service mysql status</span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 日 2017-06-11 17:05:11 CST; 14min ago</span><br><span class="line"> Main PID: 11970 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysql.service</span><br><span class="line">           └─11970 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line">6月 11 17:05:09 frin systemd[1]: Starting MySQL Community Server...</span><br><span class="line">6月 11 17:05:11 frin systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></table></figure>

<p>使用下面的命令停止MySQL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql stop</span><br></pre></td></tr></table></figure>

<p>使用下面的命令启动MySQL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service mysql start</span><br></pre></td></tr></table></figure>

<h1 id="连接-断开MySQL服务器："><a href="#连接-断开MySQL服务器：" class="headerlink" title="连接&#x2F;断开MySQL服务器："></a>连接&#x2F;断开MySQL服务器：</h1><p>使用root用户连接MySQL服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -h 127.0.0.1 -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 4</span><br><span class="line">Server version: 5.7.18-0ubuntu0.16.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>使用以下命令断开连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>创建Hive元数据使用的数据库hive。使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE hive;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<p>使用以下命令切换到hive数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use hive;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<p>使用以下命令创建用户hive，并授权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hive@mysql123&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON hive.* TO <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hive@mysql123&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL ON hive.* TO <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04安装Protocol Buffers 2.5.0</title>
    <url>/2021/07/01/Ubuntu-20-04%E5%AE%89%E8%A3%85Protocol-Buffers-2-5-0/</url>
    <content><![CDATA[<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>Protocol Buffers 2.5.0源码下载：<a href="https://github.com/protocolbuffers/protobuf/tree/v2.5.0">https://github.com/protocolbuffers/protobuf/tree/v2.5.0</a>。下载并解压。</p>
<p>将autogen.sh文件中以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://googletest.googlecode.com/files/gtest-1.5.0.tar.bz2 | tar jx</span><br><span class="line">mv gtest-1.5.0 gtest</span><br></pre></td></tr></table></figure>

<p>替换为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/google/googletest/archive/release-1.5.0.tar.gz</span><br><span class="line">tar xzvf release-1.5.0.tar.gz</span><br><span class="line">mv googletest-release-1.5.0 gtest</span><br></pre></td></tr></table></figure>

<p>执行以下命令进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h1 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>执行 autogen.sh 时出现一下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">configure.ac:29: error: possibly undefined macro: AC_PROG_LIBTOOL</span><br><span class="line">      If this token and others are legitimate, please use m4_pattern_allow.</span><br><span class="line">      See the Autoconf documentation.</span><br><span class="line">autoreconf: /usr/bin/autoconf failed with exit status: 1</span><br></pre></td></tr></table></figure>

<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>安装 libtool：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libtool</span><br></pre></td></tr></table></figure>

<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题现象-1"><a href="#问题现象-1" class="headerlink" title="问题现象"></a>问题现象</h3><p>安装完成后验证出现以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">protoc --version</span></span><br><span class="line">protoc: error while loading shared libraries: libprotoc.so.8: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<h3 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h3><ul>
<li>使用find命令找到libprotoc.so.8文件位置。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -name libprotoc.so.8</span></span><br><span class="line">./lib/libprotoc.so.8</span><br></pre></td></tr></table></figure>

<ul>
<li>创建<code>/etc/ld.so.conf.d/libprotobuf.conf</code>文件，并输入以下内容：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令：<code>sudo ldconfig</code></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>常用组件</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 24.04 安装 Jenkins</title>
    <url>/2025/10/11/Ubuntu-24-04-%E5%AE%89%E8%A3%85-Jenkins/</url>
    <content><![CDATA[<p>使用 apt 安装 Jenkins LTS 版本。首先， 需要在系统中添加 key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wget -O /etc/apt/keyrings/jenkins-keyring.asc \</span><br><span class="line">  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key</span><br></pre></td></tr></table></figure>

<p>然后，添加 Jenkins 的 apt 入口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]&quot;</span> \</span><br><span class="line">  https://pkg.jenkins.io/debian-stable binary/ | <span class="built_in">sudo</span> <span class="built_in">tee</span> \</span><br><span class="line">  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<p>更新本地包索引后安装 Jenkins：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install fontconfig openjdk-17-jre</span><br><span class="line"><span class="built_in">sudo</span> apt-get install jenkins</span><br></pre></td></tr></table></figure>

<p>通过地址 <a href="http://localhost:8080/">http://localhost:8080</a> 访问 Jenkins。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 24.04 中 nvm 安装 Node 权限问题解决</title>
    <url>/2025/09/05/Ubuntu-24-04-%E4%B8%AD-nvm-%E5%AE%89%E8%A3%85-Node-%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>参考nvm的一个issue：<a href="https://github.com/nvm-sh/nvm/issues/3363">https://github.com/nvm-sh/nvm/issues/3363</a>。</p>
<p>异常信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ nvm install 22</span><br><span class="line">Downloading and installing node v22.19.0...</span><br><span class="line">Downloading https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-x64.tar.xz...</span><br><span class="line">-#O=#    #       #                                                                                                                                                                       Warning: Failed to open the file /home/zhangjc/.nvm/.cache/bin/node-v22.19.0-linux-x64/node-v22.19.0-linux-x64.tar.xz: Permission denied</span><br><span class="line">curl: (23) client returned ERROR on write of 1360 bytes</span><br><span class="line"> </span><br><span class="line">download from https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-x64.tar.xz failed</span><br><span class="line">grep: /home/zhangjc/.nvm/.cache/bin/node-v22.19.0-linux-x64/node-v22.19.0-linux-x64.tar.xz: 没有那个文件或目录</span><br><span class="line">Provided file to checksum does not exist.</span><br><span class="line">Binary download failed, trying source.</span><br><span class="line">Downloading https://nodejs.org/dist/v22.19.0/node-v22.19.0.tar.xz...</span><br><span class="line">-=#=- #     #       #                                                                                                                                                                    Warning: Failed to open the file /home/zhangjc/.nvm/.cache/src/node-v22.19.0/node-v22.19.0.tar.xz: Permission denied</span><br><span class="line">curl: (23) client returned ERROR on write of 1360 bytes</span><br><span class="line"> </span><br><span class="line">download from https://nodejs.org/dist/v22.19.0/node-v22.19.0.tar.xz failed</span><br><span class="line">grep: /home/zhangjc/.nvm/.cache/src/node-v22.19.0/node-v22.19.0.tar.xz: 没有那个文件或目录</span><br><span class="line">Provided file to checksum does not exist.</span><br></pre></td></tr></table></figure>

<p>卸载使用 snap 安装的 curl：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> snap remove curl --purge</span><br></pre></td></tr></table></figure>

<p>重新安装 curl：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install curl</span><br></pre></td></tr></table></figure>

<p>再次安装 node 成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ nvm install 22</span><br><span class="line">Downloading and installing node v22.19.0...</span><br><span class="line">Downloading https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-x64.tar.xz...</span><br><span class="line"><span class="comment">################################################################################################################################################################################## 100.0%</span></span><br><span class="line">Computing checksum with <span class="built_in">sha256sum</span></span><br><span class="line">Checksums matched!</span><br><span class="line">Now using node v22.19.0 (npm v10.9.3)</span><br><span class="line">Creating default <span class="built_in">alias</span>: default -&gt; 22 (-&gt; v22.19.0)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Node.js</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu SSH 免密码登陆</title>
    <url>/2025/10/14/Ubuntu-SSH-%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</url>
    <content><![CDATA[<p>使用 Ubuntu 系统远程登陆时，一般使用用户名加密码登陆，但这种方式每次需要输入用户名和密码，比较繁琐。我们可以用更具安全性的 RSA 密钥认证方式避免频繁输入用户名和密码。</p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>如果我们需要从一台机器上同时操作多台 Ubuntu 服务器，免密码登陆操作起来就方便多了。</p>
<h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="安装-SSH-服务"><a href="#安装-SSH-服务" class="headerlink" title="安装 SSH 服务"></a>安装 SSH 服务</h2><p>在 Ubuntu 服务器上安装 SSH 服务，方法参见我的另外一篇博客：<a href="https://www.zhangjc.com/2025/10/14/Ubuntu-%E5%AE%89%E8%A3%85-SSH%EF%BC%8C%E5%B9%B6%E5%BC%80%E5%90%AF-root-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/">Ubuntu 安装 SSH，并开启 root 远程登录</a>。</p>
<h2 id="Client-端生成公钥和密钥"><a href="#Client-端生成公钥和密钥" class="headerlink" title="Client 端生成公钥和密钥"></a>Client 端生成公钥和密钥</h2><p>使用以下命令生成客户端公钥和密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>生成的密钥对在目录 ~&#x2F;.ssh&#x2F; 下，id_rsa.pub 是公钥，id_rsa 是密钥。</p>
<h2 id="将-Client-端的公钥添加到-Server-端的公钥文件中"><a href="#将-Client-端的公钥添加到-Server-端的公钥文件中" class="headerlink" title="将 Client 端的公钥添加到 Server 端的公钥文件中"></a>将 Client 端的公钥添加到 Server 端的公钥文件中</h2><p>首先检查 Server 端需要认证的用户（如 root）的 Home 目录下，隐藏目录 .ssh 中是否存在一个名为 authorized_keys 的文件，若不存在，使用命令：touch authorized_keys 创建一个空文件创建完成后，则可以执行如下步骤：</p>
<ol>
<li>复制 Clinet 端公钥的内容。</li>
<li>将复制的 Client 端公钥内容粘贴至 Server 端的 authorized_keys 文件中，保存文件。</li>
<li>更改 authorized_keys 文件的权限为 600，执行命令 <code>chmod 600 authorized_keys</code>。</li>
<li>重启服务端 sshd 服务：<code>service sshd restart</code>。</li>
</ol>
<h2 id="验证无密码登陆"><a href="#验证无密码登陆" class="headerlink" title="验证无密码登陆"></a>验证无密码登陆</h2><p>在客户端输入命令：<code>ssh root@192.168.1.133</code>（用户名和 IP 自行替换），看到如下结果则无密码登陆配置成功。<br><img src="/images/202510/02.jpg"></p>
<blockquote>
<p>在将客户端公钥添加到服务端时，如果是从一台客户端登陆多台服务器，则可以先将公钥添加至客户端的 authorized_keys 文件，直接将客户端 authorized_keys 文件 scp 到服务器对应的目录下，然后重启服务器 sshd 服务。但这个过程中还是需要先输入用户名和密码登陆服务器重启 sshd 服务。是否有更便捷的方式有待学习。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 SSH，并开启 root 远程登录</title>
    <url>/2025/10/14/Ubuntu-%E5%AE%89%E8%A3%85-SSH%EF%BC%8C%E5%B9%B6%E5%BC%80%E5%90%AF-root-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="安装-SSH"><a href="#安装-SSH" class="headerlink" title="安装 SSH"></a>安装 SSH</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>

<p>其中包含了 openssh-client 和 openssh-server。</p>
<h1 id="开启-root-远程登录"><a href="#开启-root-远程登录" class="headerlink" title="开启 root 远程登录"></a>开启 root 远程登录</h1><p>修改配置文件 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 中的 PermitRootLogin 参数值为 yes：<br><img src="/images/202510/01.jpg"></p>
<p>重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>

<p><strong>PermitRootLogin 参数</strong></p>
<p>指定 root 是否可以用 ssh 登录。参数值必须是“yes”、“prohibit-password”、“without-password”、“orced-commands-only”或者“no”。默认值是“prohibit-password”。</p>
<p>如果这个选项设置为“prohibit-password”、“without-password”，通过密码和键盘交互的授权方式对 root 用户禁用。</p>
<p>如果这个选项设置为“orced-commands-only”，root 用户只允许通过公钥授权登录，但只是指定了 conmmand 选项的时候（这可能对远程备份是有好处的，即使 root 不允许登录）。其他授权方式对 root 无效。</p>
<p>如果这个选项设置为“no”，root 不允许登录。</p>
<p>其他参数说明，请查阅<a href="https://man.openbsd.org/sshd_config">官方文档</a>。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu启动终端时默认窗口最大化</title>
    <url>/2025/09/05/Ubuntu%E5%90%AF%E5%8A%A8%E7%BB%88%E7%AB%AF%E6%97%B6%E9%BB%98%E8%AE%A4%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%8C%96/</url>
    <content><![CDATA[<p>通过以下两种方式，可以优雅的实现从快捷栏和使用快捷键启动终端时，默认窗口最大化。</p>
<h1 id="快捷栏"><a href="#快捷栏" class="headerlink" title="快捷栏"></a>快捷栏</h1><p>打开快捷栏图标配置文件 <code>/usr/share/applications/org.gnome.Terminal.desktop</code>，在启动命令后添加 <code>--maximize</code> 参数，如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Exec=gnome-terminal --maximize</span><br></pre></td></tr></table></figure>

<p>保存文件并退出，此时再从快捷栏启动终端时，窗口默认最大化。</p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>首先，取消系统默认的终端启动快捷键。如下图：</p>
<p><img src="/images/202509/01.png"></p>
<p>然后，新建终端启动快捷键。如下图：</p>
<p><img src="/images/202509/02.png"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu终端CTRL+S被锁定后解锁快捷键</title>
    <url>/2020/11/30/Ubuntu-%E7%BB%88%E7%AB%AF-CTRL-S-%E8%A2%AB%E9%94%81%E5%AE%9A%E5%90%8E%E8%A7%A3%E9%94%81%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p><code>CTRL + S</code>表示暂停终端的作用，停止终端输入。使用快捷键<code>CTRL + Q</code>恢复，可以继续向终端输入。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code中Python代码调试</title>
    <url>/2025/01/05/VS-Code%E4%B8%ADPython%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>Python扩展通过<a href="https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy">Python调试器扩展</a>支持多种类型的Python应用调试。简短了解基本调试，见<a href="https://code.visualstudio.com/docs/python/python-tutorial#_configure-and-run-the-debugger">Tutorial - Configure and run the debugger</a>。此外也查看<a href="https://code.visualstudio.com/docs/python/tutorial-flask">Flask tutorial</a>。两个手册展示了像设置断点和步入代码核心技能。</p>
<p>学习通用的调试特性，像检查变量、设置断点和其他不依赖语言的活动，回顾<a href="https://code.visualstudio.com/docs/editor/debugging">VS Code debugging</a>。</p>
<p>本文主要讲述Python特定的调试配置，包含特定应用类型和远程调试必要的步骤。</p>
<h1 id="Python调试器扩展"><a href="#Python调试器扩展" class="headerlink" title="Python调试器扩展"></a>Python调试器扩展</h1><p>在VS Code中，<a href="https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy">Python调试器扩展</a>会随着<a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python扩展</a>一起安装。Python调试器基于实现了Python调试适配器协议的<a href="https://pypi.org/project/debugpy/">debugpy</a>模块，可以调试多种类型的Python应用，包括脚本、Web应用、远程进程等。</p>
<p>验证上面插件安装的方法是，打开<strong>扩展面板</strong>（<code>Ctrl+Shift+X</code>），在搜索框中输入<code>@installed python debugger</code>，在结果列表中可以看到Python和Python调试器插件。</p>
<p><img src="/images/202501/05.png"></p>
<h1 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h1><p>VS Code通过配置控制调试行为。这些配置在<code>launch.json</code>文件中进行定义。<code>launch.json</code>文件存储在工作空间的<code>.vscode</code>目录中。</p>
<p>初始化调试配置，首先打开<strong>运行和调试面板</strong>（<code>Ctrl+Shift+D</code>）。如果还未做配置，会看到<strong>运行和调试</strong>按钮和创建launch.json文件的超链接。</p>
<p>按照以下步骤创建<code>launch.json</code>文件：</p>
<ol>
<li><p>点击创建launch.json文件链接。</p>
</li>
<li><p>从调试选项列表中选择<strong>Python Debugger</strong>。</p>
</li>
</ol>
<p><img src="/images/202501/06.png"></p>
<ol start="3">
<li>从弹出的配置类型选择列表中，根据需要选择：如果调试单个Python脚本，选择<strong>Python文件</strong>。其他类型及选项在列表中有说明，如下：</li>
</ol>
<p><img src="/images/202501/07.png"></p>
<ol start="4">
<li>这时候Python调试器扩展会创建并打开<code>launch.json</code>文件。根据上一步骤选择的类型，文件中已经预先定义了一些配置，如本例中选择的<strong>Python文件</strong>。可以根据需要修改文件内容添加配置（如添加参数）。</li>
</ol>
<p><img src="/images/202501/08.png"></p>
<blockquote>
<p>下文会讲解配置细节和不同类型应用的配置。</p>
</blockquote>
<h1 id="附加配置"><a href="#附加配置" class="headerlink" title="附加配置"></a>附加配置</h1><p>默认的，VS Code只展示Python调试器扩展最通用的配置。可点击其他配置下拉框中选择<strong>添加配置</strong>命令或点击<code>launch.json</code>文件编辑器中的<strong>添加配置</strong>按钮，VS Code会展示所有可选配置的列表（注意选择<strong>Python调试程序</strong>选项）：</p>
<p><img src="/images/202501/09.png"></p>
<p>选择带有参数的Python文件后，效果如下：</p>
<p><img src="/images/202501/10.png"></p>
<p>调试的时候，状态栏会显示当前的配置和当前的解释器。点击状态栏上的配置，可以选择其他配置。</p>
<p><img src="/images/202501/11.png"></p>
<p>在工作空间下，默认调试器跟其他扩展一样使用相同的解释器。如果调试器要使用不同的解释器，设置<code>launch.json</code>中的<code>python</code>值，或者使用状态栏的Python解释器指示器。</p>
<h1 id="基础调试"><a href="#基础调试" class="headerlink" title="基础调试"></a>基础调试</h1><p>如果只是调试Python脚本，最简单的方式是脚本编辑器运行下拉列表中选择<strong>Python调试程序：调试Python文件</strong>。</p>
<p><img src="/images/202501/12.png"></p>
<p>如果调试使用Flask、Django或FastAPI开发的web应用，Python调试器扩展在<strong>运行和调试面板</strong>中，提供了根据项目结构提供动态调试配置的选项。</p>
<p><img src="/images/202501/13.png"></p>
<p>如果调试其他类型应用，可以通过点击<strong>运行和调试面板</strong>中的<strong>运行和调试</strong>按钮。</p>
<p><img src="/images/202501/14.png"></p>
<p>当没有设置配置时，VS Code会给出调试选项，选择适合的选项快速进入调试。有两个常用的选项，<strong>Python文件</strong>配置运行当前打开的Python文件，或者<strong>使用进程ID进行附加</strong>配置连结调试器到一个运行中的进程。添加配置后，就可以在列表中选择，并使用<strong>开始调试（F5）</strong>进行调试。</p>
<p><img src="/images/202501/15.png"></p>
<h1 id="命令行调试"><a href="#命令行调试" class="headerlink" title="命令行调试"></a>命令行调试</h1><p>如果安装了<code>debugpy</code>也可以在命令行运行调试器。</p>
<h2 id="安装debugpy"><a href="#安装debugpy" class="headerlink" title="安装debugpy"></a>安装debugpy</h2><p>使用以下命令安装<a href="https://pypi.org/project/debugpy/">debugpy</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade debugpy</span><br><span class="line">Looking <span class="keyword">in</span> indexes: https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">Collecting debugpy</span><br><span class="line">  Downloading https://mirrors.aliyun.com/pypi/packages/fd/b6/ee71d5e73712daf8307a9e85f5e39301abc8b66d13acd04dfff1702e672e/debugpy-1.8.5-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.4 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.4/1.4 MB 11.6 MB/s eta 0:00:00</span><br><span class="line">Installing collected packages: debugpy</span><br><span class="line">Successfully installed debugpy-1.8.5</span><br><span class="line"></span><br><span class="line">[notice] A new release of pip is available: 24.0 -&gt; 24.2</span><br><span class="line">[notice] To update, run: pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<blockquote>
<p>虽然不是必须的，但使用虚拟环境仍然是推荐的最佳实践。在VS Code中，可以打开命令面板（<code>Ctrl+Shift+P</code>），运行**Python: 创建环境…**命令创建虚拟环境。</p>
</blockquote>
<h2 id="命令行语法"><a href="#命令行语法" class="headerlink" title="命令行语法"></a>命令行语法</h2><p>调试器命令行语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m debugpy</span><br><span class="line">    --listen | --connect</span><br><span class="line">    [&lt;host&gt;:]&lt;port&gt;</span><br><span class="line">    [--wait-for-client]</span><br><span class="line">    [--configure-&lt;name&gt; &lt;value&gt;]...</span><br><span class="line">    [--log-to &lt;path&gt;] [--log-to-stderr]</span><br><span class="line">    &lt;filename&gt; | -m &lt;module&gt; | -c &lt;code&gt; | --pid &lt;pid&gt;</span><br><span class="line">    [&lt;arg&gt;]...</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在命令行，可以使用一个特定的端口（5678）启动要调试脚本的调试器。如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m debugpy --listen 5678 ./myscript.py</span><br></pre></td></tr></table></figure>

<p>这个示例假设这个脚本是长期运行且忽略<code>--wait-for-client</code>标识，意味着脚本不会等待客户端连结。</p>
<p>然后，VS Code调试器插件使用下面的配置连结。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Python Debugger: Attach&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">  &quot;request&quot;: &quot;attach&quot;,</span><br><span class="line">  &quot;connect&quot;: &#123;</span><br><span class="line">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;port&quot;: 5678</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>：可以指定<strong>监听</strong>的主机，默认使用127.0.0.1。</p>
</blockquote>
<p>如果调试远程机器上的远程代码或运行在docker容器中的代码，需要修改前文的 CLI 命令指定一台机器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m debugpy --listen 0.0.0.0:5678 ./myscript.py</span><br></pre></td></tr></table></figure>


<p>关联的配置文件看起来如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Attach&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;debugpy&quot;</span>,</span><br><span class="line">  <span class="string">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">  <span class="string">&quot;connect&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;remote-machine-name&quot;</span>, // replace this with remote machine name</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: 5678</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>：注意，如果指定了<code>127.0.0.1</code>或<code>localhost</code>以外的机器，就打开了一个从任何机器允许访问的一个端口，这将带来安全风险。在远程调试时，需确保已采取了适合的预防措施，例如SSH隧道。</p>
</blockquote>
<h2 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h2><table>
<thead>
<tr>
<th><strong>标识</strong></th>
<th><strong>选项</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>–listen</strong> or <strong>–connect</strong></td>
<td><code>[&lt;host&gt;:]&lt;port&gt;</code></td>
<td><strong>必须</strong>。为调试适配器服务器指定主机地址和端口号，来等待连接（–listen）或连接一个等待连接的客户端（–connect) 。这跟VS Code调试配置使用的地址相同。默认，主机地址是<code>localhost (127.0.0.1)</code>。</td>
</tr>
<tr>
<td><strong>–wait-for-client</strong></td>
<td>none</td>
<td><strong>可选</strong>。 指定从调试服务器有一个连接连入时才运行代码。这个设置允许从第一行代码开始调试。</td>
</tr>
<tr>
<td><strong>–log-to</strong></td>
<td><code>&lt;path&gt;</code></td>
<td><strong>可选</strong>。指定保存日志的一个已存在目录。</td>
</tr>
<tr>
<td><strong>–log-to-stderr</strong></td>
<td>none</td>
<td><strong>可选</strong>。启用 debugpy 写日志到标准错误输出。</td>
</tr>
<tr>
<td><strong>–pid</strong></td>
<td><code>&lt;pid&gt;</code></td>
<td><strong>可选</strong>。指定一个已经运行中待调试服务器进入的进程。</td>
</tr>
<tr>
<td><strong>–configure-<name></strong></td>
<td><code>&lt;value&gt;</code></td>
<td><strong>可选</strong>。设置在客户端连接前调试服务器必须知道的调试属性。这些属性可以直接在<em>调用</em>配置中直接使用，但是必须以这种方式设置的<em>连结</em>配置。例如，不想调试服务器自动引入连结的进程创建的子进程，使用<code>--configure-subProcess false</code>。</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>提示</strong>：可以使用<code>[&lt;arg&gt;]</code>将命令行参数传递给已启动的应用程序。</p>
</blockquote>
<h1 id="通过网络连结调试"><a href="#通过网络连结调试" class="headerlink" title="通过网络连结调试"></a>通过网络连结调试</h1><h2 id="本地脚本调试"><a href="#本地脚本调试" class="headerlink" title="本地脚本调试"></a>本地脚本调试</h2><p>在某些实例中，需要调试由另外一个进程在本地调用的Python脚本。例如，调试一个web服务器运行的一些处理特定任务的脚本。在这个例子中，一旦这个脚本被调用则需要VS Code调试器就连结它：</p>
<ol>
<li>运行VS Code，打开这个脚本所在的文件夹或工作空间，如果<code>launch.json</code>不存在则创建它。</li>
<li>在脚本代码中，添加下面的代码并保存：</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">import debugpy</span><br><span class="line"></span><br><span class="line"># 5678 is the default attach port in the VS Code debug configurations. Unless a host and port are specified, host defaults to 127.0.0.1</span><br><span class="line">debugpy.listen(5678)</span><br><span class="line">print(&quot;Waiting for debugger attach&quot;)</span><br><span class="line">debugpy.wait_for_client()</span><br><span class="line">debugpy.breakpoint()</span><br><span class="line">print(&#x27;break on this line&#x27;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用<strong>终端：创建新的终端</strong>命令创建一个终端，终端会自动激活脚本选择的环境。</li>
<li>在终端中安装debugpy（见<strong>安装debugpy</strong>一节）。</li>
<li>在终端中，用该脚本开启Python，如<code>python3 myscript.py</code>。会看到包含在代码中的“Waiting for debugger attach”信息，脚本会在<code>debugpy.wait_for_client()</code>处等待调用。</li>
<li>切换至<strong>运行和调试（<code>Ctrl+Shift+D</code>）</strong>面板，从调试器下拉列表中选择合适的配置进入调试器。</li>
<li>调试器在<code>debugpy.breakpoint()</code>处等待调用，在该处可以正常的使用调试器。也可以使用UI界面设置其他断点，而不是用<code>debugpy.breakpoint()</code>。</li>
</ol>
<h2 id="用SSH调试远程脚本"><a href="#用SSH调试远程脚本" class="headerlink" title="用SSH调试远程脚本"></a>用SSH调试远程脚本</h2><p>远程调试能力允许在本地VS Code内单步调试远程服务器上运行的程序，而不需要在远程服务器安装VS Code。为了安全，在连接远程服务器调试时需要使用安全连接，如SSH。</p>
<blockquote>
<p><strong>提示</strong>：在Windows系统上，需要安装<a href="https://learn.microsoft.com/windows-server/administration/openssh/openssh_install_firstuse">Windows 10 OpenSSH</a>才可以使用<code>ssh</code>命令。</p>
</blockquote>
<p>下面的步骤简要列出了设置SSH隧道的步骤。与开放一个可公共访问的端口比，SSH隧道允许安全的在本地连接远程机器进行工作。</p>
<p><strong>在远程主机上：</strong></p>
<ol>
<li>要启用端口，打开<code>sshd_config</code>配置文件（Linux服务器在<code>/etc/ssh/</code>下，Windows在<code>%programfiles(x86)%/openssh/etc</code>下），添加或修改以下内容：</li>
</ol>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">AllowTcpForwarding yes</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>：AllowTcpForwarding默认值为yes，可能不需要修改。</p>
</blockquote>
<ol start="2">
<li>如果必须添加<code>AllowTcpForwarding</code>，则需要重启SSH服务。在Linux&#x2F;macOS上，运行<code>sudo service ssh restart</code>；在Windows上，运行<code>services.msc</code>，在服务列表中选择OpenSSH或sshd。</li>
</ol>
<p><strong>在本地主机上：</strong></p>
<ol>
<li>执行<code>ssh -2 -L sourceport:localhost:destinationport -i identityfile user@remoteaddress</code>创建一个SSH隧道，为<code>destinationport</code>选择一个端口，并在<code>user@remoteaddress</code>中指定合适的用户名和远程主机的IP。例如，在IP地址1.2.3.4上使用端口5678，命令为<code>ssh -2 -L 5678:localhost:5678 -i identityfile user@1.2.3.4</code>。可以使用<code>-i</code>标识指定认证文件的路径。</li>
<li>确定在SSH会话中可以看到提示信息。</li>
<li>在VS Code工作空间中，在<code>launch.json</code>文件中为远程调试创建配置项，设置匹配<code>ssh</code>命令使用的端口号，并设置主机为<code>localhost</code>。使用<code>localhost</code>是因为已经设置了SSH隧道。</li>
</ol>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Python Debugger: Attach&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">  &quot;request&quot;: &quot;attach&quot;,</span><br><span class="line">  &quot;port&quot;: 5678,</span><br><span class="line">  &quot;host&quot;: &quot;localhost&quot;,</span><br><span class="line">  &quot;pathMappings&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;localRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, // Maps C:\Users\user1\project1</span><br><span class="line">      &quot;remoteRoot&quot;: &quot;.&quot; // To current working directory ~/project1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>开始调试</strong></p>
<p>现在已经设置了连接远程主机的SSH隧道，可以开始调试了。</p>
<ol>
<li>远程和本地主机：保证可以获取相同的代码。</li>
<li>远程和本地主机：安装debugpy（见<strong>安装debugpy</strong>一节）。</li>
<li>远程主机：有两种指定连结远程主机的方式。</li>
</ol>
<p>  a. 在源代码中，添加下面的代码，<code>address</code>替换为远程主机的IP和端口（这里用1.2.3.4作为示例）。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> debugpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow other computers to attach to debugpy at this IP address and port.</span></span><br><span class="line">debugpy.listen((<span class="string">&#x27;1.2.3.4&#x27;</span>, <span class="number">5678</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pause the program until a remote debugger is attached</span></span><br><span class="line">debugpy.wait_for_client()</span><br></pre></td></tr></table></figure>

<p>  在<code>listen</code>中应该使用远程主机的私有IP。然后可以正常启动程序，直到调试器连结使其暂停。</p>
<p>  b. 通过debugpy启动远程进程，例如：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m debugpy --listen 1.2.3.4:5678 --wait-for-client -m myproject</span><br></pre></td></tr></table></figure>

<p>  以上命令使用<code>python3</code>启动<code>myproject</code>，使用远程主机的私有IP<code>1.2.3.4</code>，并监听端口<code>5678</code>（也可以不使用<code>-m</code>，而是指定文件路径启动远程Python进程，例如<code>./hello.py</code>）。</p>
<ol start="4">
<li>本地主机：<strong>只有在上面列出的远程主机上的代码被修改</strong>，然后在远程主机的源代码中，拷贝添加注释的相同代码。添加这些代码确保远程和本地主机上的代码每行都是匹配的。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import debugpy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow other computers to attach to debugpy at this IP address and port.</span></span><br><span class="line"><span class="comment">#debugpy.listen((&#x27;1.2.3.4&#x27;, 5678))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pause the program until a remote debugger is attached</span></span><br><span class="line"><span class="comment">#debugpy.wait_for_client()</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>本地机器：切换至<strong>运行和调试（Ctrl+Shift+D）</strong>面板，选择<strong>Python Debugger: 远程附加</strong>配置。</li>
<li>本地机器：在打算调试的代码位置设置一个断点。</li>
<li>本地机器：使用修改过的<strong>Python Debugger:附加</strong>配置文件和启动调试按钮启动VS Code调试器。VS Code会停在本地设置的断点位置，允许单步调试代码、检查变量并执行其他调试动作。在<strong>Debug Console</strong>中输入的表达式也会在远程主机上运行。</li>
</ol>
<blockquote>
<p>像来自<code>print</code>表达式的内容，输出到标准输出的文本，会出现在两边的主机上。但是其他输出，像来自matplotlib包的图像，只会出现在远程主机上。</p>
</blockquote>
<ol start="8">
<li>在远程调试时，调试工具栏如下面：</li>
</ol>
<p><img src="/images/202501/16.png"></p>
<p>  在工具栏上，断开连接按钮（<code>Shift+F5</code>）可以停止调试器，并允许远程程序运行完成。重启按钮（<code>Ctrl+Shift+F5</code>）重启调试器本地主机上的调试器，但不会重启远程程序。只有在已经重启远程程序并需要重新连结调试器时使用重启按钮。</p>
<h1 id="设置配置项"><a href="#设置配置项" class="headerlink" title="设置配置项"></a>设置配置项</h1><p>当第一次创建<code>launch.json</code>时，有两种标准配置可以在集成终端（VS Code内）或外部终端（VS Code外部）运行编辑器中活动的文件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;configurations&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Python Debugger: Current File (Integrated Terminal)&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">      &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">      &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line">      &quot;console&quot;: &quot;integratedTerminal&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Python Debugger: Current File (External Terminal)&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">      &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">      &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line">      &quot;console&quot;: &quot;externalTerminal&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体设置将在下面的章节中描述。也可以添加其他不在标准配置中的设置，如<code>args</code>。</p>
<blockquote>
<p><strong>提示</strong>：在项目中，创建一个运行特定启动文件的配置会很有帮助。例如，启动调试器时总是使用参数<code>--port 1593</code>调用<code>startup.py</code>，如下创建一个配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Python Debugger: startup.py&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">    &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">    &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/startup.py&quot;,</span><br><span class="line">    &quot;args&quot; : [&quot;--port&quot;, &quot;1593&quot;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>name</strong></p>
<p>给展示在VS Code调试配置下拉列表中的配置命名。</p>
<p><strong>type</strong></p>
<p>标识调试器的类型；保持该设置为<code>debugpy</code>来调试Python代码。</p>
<p><strong>request</strong></p>
<p>指定开始调试的模式：</p>
<ul>
<li>launch：在指定为<code>program</code>的文件上启动调试器。</li>
<li>attach：附加调试器至已运行的一个进程。参见“通过网络连结调试”一节。</li>
</ul>
<p><strong>program</strong></p>
<p>提供Python程序入口模块（启动文件）的全路径。在默认配置中经常使用<code>$&#123;file&#125;</code>，用作编辑器当前活动的文件。指定一个特定的启动文件时，需要确保不管打开的是哪个文件，都用同一个入口调用程序。例如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&quot;program&quot;: &quot;/Users/Me/Projects/MyProject/src/event_handlers/__init__.py&quot;,</span><br></pre></td></tr></table></figure>

<p>也可基于工作空间根目录设置相对路径。例如，工作空间根目录是<code>/Users/Me/Projects/MyProject</code>，则可以使用下面的配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/src/event_handlers/__init__.py&quot;,</span><br></pre></td></tr></table></figure>

<p><strong>module</strong></p>
<p>提供给被调试模块指定名称的能力，跟命令行运行时的<code>-m</code>参数类似。更多信息见<a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m">Python.org</a>。</p>
<p><strong>python</strong></p>
<p>指向调试使用的Python解释器的全路径。</p>
<p>如果不指定，这个设置默认指向工作空间选择的解释器，跟<code>$&#123;command:python.interpreterPath&#125;</code>等同。使用其他解释器，则指定<code>python</code>值为解释器的路径。</p>
<p>可选的，可以在不同平台上使用包含使用的Python解释器路径的环境变量，因此就不再需要目录路径了。</p>
<p>如果需要传递参数给Python解释器，可以使用<code>pythonArgs</code>属性。</p>
<p><strong>pythonArgs</strong></p>
<p>用语法<code>&quot;pythonArgs&quot;: [&quot;&lt;arg 1&gt;&quot;, &quot;&lt;arg 2&gt;&quot;,...]</code>指定传递给Python解释器的参数。</p>
<p><strong>args</strong></p>
<p>指定传递给Python程序的参数。每个用空格分开的参数字符串需在引号内，如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&quot;args&quot;: [&quot;--quiet&quot;, &quot;--norepeat&quot;, &quot;--port&quot;, &quot;1593&quot;],</span><br></pre></td></tr></table></figure>

<p>如果想每次调试运行提供不同的参数，可以设置<code>args</code>为<code>$&#123;command:pickArgs&#125;</code>。每次启动调试时，将提示输入变量。</p>
<p><strong>stopOnEntry</strong></p>
<p>设置为true时，在程序第一行代码被调试时中断调试器。如果忽略（默认）或设置为false，调试器运行程序至第一个断点。</p>
<p><strong>console</strong></p>
<p>在<code>redirectOutput</code>默认值没被修改时，指定程序输出如何展示。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>显示输出信息的地方</th>
</tr>
</thead>
<tbody><tr>
<td><code>&quot;internalConsole&quot;</code></td>
<td><strong>VS Code调试控制台</strong>。如果 <code>redirectOutput</code> 设置为False，不展示输出信息。</td>
</tr>
<tr>
<td><code>&quot;integratedTerminal&quot;</code> （默认）</td>
<td><a href="https://code.visualstudio.com/docs/terminal/basics">VS Code集成终端</a>。如果<code>redirectOutput</code> 设置为True，在调试控制台也会展示输出信息。</td>
</tr>
<tr>
<td><code>&quot;externalTerminal&quot;</code></td>
<td><strong>独立的控制台窗口</strong>。如果<code>redirectOutput</code> 设置为True，在调试控制台也会展示输出信息。</td>
</tr>
</tbody></table>
<p><strong>purpose</strong></p>
<p>使用<code>purpose</code>选项，不止一种方法配置<strong>运行</strong>按钮。设置选项值为<code>debug-test</code>，定义当在VS Code中调试单元测试时使用该配置。然而，设置该选项为<code>debug-in-terminal</code>，定义只有在访问编辑器右上方的<strong>运行Python文件</strong>按钮时才使用该配置（无论是该按钮的<strong>运行Python文件</strong>还是<strong>调试Python文件</strong>选项被使用）。<strong>注意</strong>，<code>purpose</code>选项不能用来通过<code>F5</code>或<strong>运行→启动调试</strong>启动调试器<strong>。</strong></p>
<p><strong>autoReload</strong></p>
<p>允许在调试器碰到断点后，代码做了修改时自动重新加载调试器。如下面代码设置<code>&#123;&quot;enable&quot;: true&#125;</code>启用这个特性：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Python Debugger: Current File&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">  &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">  &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line">  &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">  &quot;autoReload&quot;: &#123;</span><br><span class="line">    &quot;enable&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>提示</strong>：当调试器重新加载时，导入代码可能会再次执行。要避免这种情况，尝试只在模块中使用导、常量和定义，将所有代码放到函数中。可选的，用<code>if __name__==&quot;__main__&quot;</code>做检查。</p>
</blockquote>
<p><strong>subprocess</strong></p>
<p>指定是否启用子进程调试。默认是false，设置为true启用。获取更多信息见<a href="https://code.visualstudio.com/docs/editor/debugging#_multitarget-debugging">multi-target debugging</a>。</p>
<p><strong>cwd</strong></p>
<p>为调试器指定当前工作目录，作为其他任何相对路径的基础目录。如果忽略，默认为<code>$&#123;workspaceFolder&#125;</code>（VS Code打开的文件夹）。</p>
<p>例如，<code>$&#123;workspaceFolder&#125;</code>包含的一个有<code>app.py</code>的<code>py_code</code>文件夹，和有<code>salaries.csv</code>的<code>data</code>文件夹。如果在<code>py_code/app.py</code>上启动调试器，则指向data文件的相对路径就非常依赖<code>cwd</code>的值：</p>
<table>
<thead>
<tr>
<th>cwd</th>
<th>data的相对路径</th>
</tr>
</thead>
<tbody><tr>
<td>忽略 or <code>$&#123;workspaceFolder&#125;</code></td>
<td><code>data/salaries.csv</code></td>
</tr>
<tr>
<td><code>$&#123;workspaceFolder&#125;/py_code</code></td>
<td><code>../data/salaries.csv</code></td>
</tr>
<tr>
<td><code>$&#123;workspaceFolder&#125;/data</code></td>
<td><code>salaries.csv</code></td>
</tr>
</tbody></table>
<p><strong>redirectOutput</strong></p>
<p>设置为true时（默认internalConsole），调试器打印程序所有输出至VS Code调试输出窗口。如果设置为false（默认integratedTerminal和externalTerminal），程序输出不会展示在调试输出窗口。</p>
<p>使用<code>&quot;console&quot;: &quot;integratedTerminal&quot;</code>或<code>&quot;console&quot;: &quot;externalTerminal&quot;</code>时，该选项通常被禁用，因为不需要重复输出到调试控制台。</p>
<p><strong>justMyCode</strong></p>
<p>当忽略或设置为true时（默认），限制只调试用户代码。设置为false时也允许调试标准库函数。</p>
<p><strong>django</strong></p>
<p>设置为true时，激活调试Django web框架的特性。</p>
<p><strong>sudo</strong></p>
<p>设置为true且使用<code>&quot;console&quot;: &quot;externalTerminal&quot;</code>时，允许调试需要提升权限的应用。使用一个外部控制台捕获密码是必要的。</p>
<p><strong>pyramid</strong></p>
<p>当设置为true时，确保使用必要的<code>pserve</code>命令调用<a href="https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/startup.html">Pyramid</a>应用。</p>
<p><strong>env</strong></p>
<p>在系统环境变量之上，为调试器进程设置总是继承的可选环境变量。这些参数的值必须作为字符串输入。</p>
<p><strong>envFile</strong></p>
<p>指向包含环境变量定义的一个可选文件路径。见：<a href="https://code.visualstudio.com/docs/python/environments#_environment-variable-definitions-file">Configuring Python environments - environment variable definitions file</a>。</p>
<p><strong>gevent</strong></p>
<p>如果设置为true，启用调试<a href="https://www.gevent.org/intro.html">gevent monkey-patched code</a>。</p>
<p><strong>jinja</strong></p>
<p>当设置为true，激活<a href="https://jinja.palletsprojects.com/">Jinja</a>模板框架调试特性。</p>
<h1 id="断点和日志点"><a href="#断点和日志点" class="headerlink" title="断点和日志点"></a>断点和日志点</h1><p>Python调试器扩展支持为调试代码设置<a href="https://code.visualstudio.com/docs/editor/debugging#_breakpoints">断点</a>和<a href="https://code.visualstudio.com/docs/editor/debugging#_logpoints">日志点</a>。简短了解基础的调试和断点使用，<a href="https://code.visualstudio.com/docs/python/python-tutorial#_configure-and-run-the-debugger">Tutorial - Configure and run the debugger</a>。</p>
<h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><p>断点也可以被设置在表达式、命中计数或两者组合满足时被触发。Python调试器扩展支持命中计数是整数，进而支持&#x3D;&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;和%操作。例如，设置命中次数&gt;5，会在发生5次后设置的断点被触发。获取更多信息，见<a href="https://code.visualstudio.com/docs/editor/debugging#_conditional-breakpoints">conditional breakpoints</a>。</p>
<h2 id="在代码中调用断点"><a href="#在代码中调用断点" class="headerlink" title="在代码中调用断点"></a>在代码中调用断点</h2><p>调试会话中，可以在想要暂停调试器的位置调用<code>debugpy.breakpoint()</code>。</p>
<h2 id="断点验证"><a href="#断点验证" class="headerlink" title="断点验证"></a>断点验证</h2><p>Python调试器扩展会自动探测在非可执行行设置的断点，类似<code>pass</code>表达式或多行表达式的中间。在这些场景中，调试器会移动断点至最近的代码行，确保代码执行停在这个断点。</p>
<h1 id="调试特定的应用类型"><a href="#调试特定的应用类型" class="headerlink" title="调试特定的应用类型"></a>调试特定的应用类型</h1><p>配置下拉表中为一般应用提供了多种不同的选项：</p>
<table>
<thead>
<tr>
<th>配置</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Attach</td>
<td>见前文“通过网络连结调试”一节。</td>
</tr>
<tr>
<td>Django</td>
<td>指定<code>&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/manage.py&quot;</code>、<code>&quot;args&quot;: [&quot;runserver&quot;]</code>，并且添加<code>&quot;django&quot;: true</code>启用Django HTML模板的调试。</td>
</tr>
<tr>
<td>Flask</td>
<td>见下文“Flask调试”一节。</td>
</tr>
<tr>
<td>Gevent</td>
<td>添加 <code>&quot;gevent&quot;: true</code> 到集成的标准终端配置。</td>
</tr>
<tr>
<td>Pyramid</td>
<td>移除<code>program</code>，添加<code>&quot;args&quot;: [&quot;$&#123;workspaceFolder&#125;/development.ini&quot;]</code>，添加<code>&quot;jinja&quot;: true</code>，启用模板调试，并且添加<code>&quot;pyramid&quot;: true</code>，确保使用必要的<code>pserve</code>命令调用<a href="https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/startup.html">Pyramid</a>应用。</td>
</tr>
</tbody></table>
<p>远程调试和Google App Engine需要特定的步骤。了解调试单元测试的详情，见<a href="https://code.visualstudio.com/docs/python/testing">Testing</a>。</p>
<p>调试需要管理员权限的应用，使用<code>&quot;console&quot;: &quot;externalTerminal&quot;</code>和<code>&quot;sudo&quot;: &quot;True&quot;</code>。</p>
<h2 id="Flask调试"><a href="#Flask调试" class="headerlink" title="Flask调试"></a>Flask调试</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Python Debugger: Flask&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">    &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;flask&quot;,</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;FLASK_APP&quot;: &quot;app.py&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;args&quot;: [</span><br><span class="line">        &quot;run&quot;,</span><br><span class="line">        &quot;--no-debugger&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;jinja&quot;: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


<p>如上配置，指定<code>&quot;env&quot;: &#123;&quot;FLASK_APP&quot;: &quot;app.py&quot;&#125;</code>和<code>&quot;args&quot;: [&quot;run&quot;, &quot;--no-debugger&quot;]</code>。<code>&quot;module&quot;: &quot;flask&quot;</code>属性替代<code>program</code>。（可能在<code>env</code>属性中看到<code>&quot;FLASK_APP&quot;: &quot;$&#123;workspaceFolder&#125;/app.py&quot;</code>，在这个场景中修改配置只有文件名。然而，可能会看到“Cannot import module C”错误，C是一个驱动器字符。）</p>
<p><code>&quot;jinja&quot;: true</code>也是启用Flask默认的Jinja模板引擎调试的设置。</p>
<p>如果以开发模式运行Flask开发服务器，使用下面的配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Python Debugger: Flask (development mode)&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">    &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;flask&quot;,</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;FLASK_APP&quot;: &quot;app.py&quot;,</span><br><span class="line">        &quot;FLASK_ENV&quot;: &quot;development&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;args&quot;: [</span><br><span class="line">        &quot;run&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;jinja&quot;: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>为什么调试器不工作有很多原因。有时调试控制台会显示出原因，但主要的原因如下：</p>
<ul>
<li>打开扩展面板（<code>Ctrl+Shift+X</code>）并搜索<code>@installed python debugger</code>，确保<a href="https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy">Python调试器扩展</a>已安装并已启用。</li>
<li>指向可执行程序python的路径是否正确：通过运行<strong>Python：选择解释器</strong>命令并查看当前值，检查选择的解释器路径。</li>
</ul>
<p><img src="/images/202501/17.png"></p>
<ul>
<li>在<code>launch.json</code>文件中<code>&quot;type&quot;</code>设置为过时的值<code>&quot;python&quot;</code>：用Python调试器正常工作的<code>&quot;debugpy&quot;</code>替代<code>&quot;python&quot;</code>。</li>
<li>在监视窗口中有无效的表达式：清理监视窗口中的所有表达式并重启调试器。</li>
<li>如果在使用本地现成API的多线程应用上工作（例如Win32的<code>CreateThread</code>函数，而不是Python的线程API），非常有必要在每个要调试文件的头部加入以下代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> debugpy</span><br><span class="line">debugpy.debug_this_thread()</span><br></pre></td></tr></table></figure>

<ul>
<li>如果在<strong>Linux</strong>系统中工作，当尝试应用调试器至任何运行中的进程时，可能会收到“timed out”错误信息。要防止该错误，可以临时运行下面的命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 | <span class="built_in">sudo</span> <span class="built_in">tee</span> /proc/sys/kernel/yama/ptrace_scope</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 常见安装源更新问题</title>
    <url>/2025/10/27/Ubuntu-%E5%B8%B8%E8%A7%81%E5%AE%89%E8%A3%85%E6%BA%90%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>以下两种情况都是因为无效安装源导致的，可以直接删除无效安装源解决。</p>
<p>有两个位置可以添加仓库。&#x2F;etc&#x2F;apt&#x2F;sources.list 文件和所有在 &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F; 目录下以 .list 结尾的文件。所以，只需要检查这个目录下的文件并移除不需要的即可。</p>
<h1 id="1、Duplicate-sources-list-entry"><a href="#1、Duplicate-sources-list-entry" class="headerlink" title="1、Duplicate sources.list entry"></a>1、Duplicate sources.list entry</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">W: Duplicate sources.list entry http://archive.ubuntukylin.com:10006/ubuntukylin/ trusty/main amd64 Packages (/var/lib/apt/lists/archive.ubuntukylin.com:10006_ubuntukylin_dists_trusty_main_binary-amd64_Packages)</span><br><span class="line">W: Duplicate sources.list entry http://archive.ubuntukylin.com:10006/ubuntukylin/ trusty/main i386 Packages (/var/lib/apt/lists/archive.ubuntukylin.com:10006_ubuntukylin_dists_trusty_main_binary-i386_Packages)</span><br><span class="line">W: 您可能需要运行 apt-get update 来解决这些问题</span><br></pre></td></tr></table></figure>

<p>通过以下命令查找目标文件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#cd /etc/apt/sources.list.d &amp;&amp; find . -name &#x27;*.list*&#x27;|xargs grep &quot;archive.ubuntukylin.com:10006&quot;</span><br><span class="line">./wps-office.list.save:deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main</span><br><span class="line">./sogoupinyin.list:deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main</span><br><span class="line">./sogoupinyin.list.save:deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main</span><br><span class="line">./wps-office.list:deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main</span><br></pre></td></tr></table></figure>

<p>删除对应的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sudo rm -f wps-office.list*</span></span><br><span class="line"><span class="comment">#sudo rm -f sogoupinyin.list*</span></span><br></pre></td></tr></table></figure>

<p>再次执行安装源更新命令，问题解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>

<h1 id="2、404-Not-Found"><a href="#2、404-Not-Found" class="headerlink" title="2、404 Not Found"></a>2、404 Not Found</h1><p>还有一种常见问题是找不到的错误，如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">错误 http://ppa.launchpad.net wily/main amd64 Packages</span><br><span class="line">  404  Not Found</span><br><span class="line">错误 http://ppa.launchpad.net wily/main i386 Packages</span><br><span class="line">  404  Not Found</span><br><span class="line">忽略 http://ppa.launchpad.net wily/main Translation-en_US</span><br><span class="line">忽略 http://ppa.launchpad.net wily/main Translation-zh_CN</span><br><span class="line">忽略 http://ppa.launchpad.net wily/main Translation-en</span><br><span class="line">忽略 http://ppa.launchpad.net wily/main Translation-zh</span><br><span class="line">下载 1,525 kB，耗时 43秒 (35.3 kB/s)</span><br><span class="line">W: 无法下载 http://ppa.launchpad.net/tldm217/tahutek.net/ubuntu/dists/wily/main/binary-amd64/Packages  404  Not Found</span><br><span class="line">W: 无法下载 http://ppa.launchpad.net/tldm217/tahutek.net/ubuntu/dists/wily/main/binary-i386/Packages  404  Not Found</span><br><span class="line">E: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。</span><br></pre></td></tr></table></figure>

<p>删除来源自 <a href="http://ppa.launchpad.net/">http://ppa.launchpad.net</a> 的安装源列表，重新更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ls -l /etc/apt/sources.list.d/tldm217-ubuntu-tahutek_net-wily.list*</span></span><br><span class="line">-rw-r--r-- 1 root root 138  4月 16 02:03 /etc/apt/sources.list.d/tldm217-ubuntu-tahutek_net-wily.list</span><br><span class="line">-rw-r--r-- 1 root root 138  4月 16 02:03 /etc/apt/sources.list.d/tldm217-ubuntu-tahutek_net-wily.list.save</span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo rm -f /etc/apt/sources.list.d/tldm217-ubuntu-tahutek_net-wily.list*</span></span><br></pre></td></tr></table></figure>

<p>再次执行更新，问题解决。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox can&#39;t enable the AMD-V extension</title>
    <url>/2025/01/20/VirtualBox-can-t-enable-the-AMD-V-extension/</url>
    <content><![CDATA[<p>最近一次完成Deepin的系统更新后，进入VirtualBox创建的虚拟机（Widows10）时，出现以下错误：<img src="/images/202501/20.png"></p>
<p>根据网址“<a href="https://askubuntu.com/questions/403591/amd-v-is-being-used-by-another-hypervisor-verr-svm-in-use">https://askubuntu.com/questions/403591/amd-v-is-being-used-by-another-hypervisor-verr-svm-in-use</a>”对问题的提示，检查我的问题，是因为同时安装了Virtualbox和KVM冲突导致的。如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Virtualbox modules</span></span><br><span class="line">$ <span class="built_in">sudo</span> lsmod | grep vbox</span><br><span class="line">vboxnetadp             28672  0</span><br><span class="line">vboxnetflt             32768  0</span><br><span class="line">vboxdrv               638976  2 vboxnetadp,vboxnetflt</span><br><span class="line"></span><br><span class="line"><span class="comment">#kvm</span></span><br><span class="line">$ <span class="built_in">sudo</span> lsmod| grep kvm</span><br><span class="line">kvm_amd               200704  0</span><br><span class="line">kvm                  1232896  1 kvm_amd</span><br><span class="line">ccp                   147456  2 i2c_designware_platform,kvm_amd</span><br></pre></td></tr></table></figure>

<p>从上面的信息可以看出，VirtualBox模块和KVM模块都存在。运行一下命令移除KVM模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> rmmod kvm_amd</span><br><span class="line">$ <span class="built_in">sudo</span> rmmod kvm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，执行移除命令的顺序，首先移除依赖kvm的kvm_amd模块，否则会提示以下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> rmmod kvm</span><br><span class="line">rmmod: ERROR: Module kvm is <span class="keyword">in</span> use by: kvm_amd</span><br></pre></td></tr></table></figure>
</blockquote>
<p>再次启动虚拟机，问题解决。</p>
<p>但是，还存在一个问题，每次重启电脑都需要按照以上步骤操作才行，未免太麻烦了。解决方法是，将kvm和kvm_amt加入黑名单模块列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;blacklist kvm&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/modprobe.d/blacklist.conf</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;blacklist kvm_amd&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/modprobe.d/blacklist.conf</span><br><span class="line">$ <span class="built_in">sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>执行完成后，重启后再试，问题解决。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
        <tag>Deepin</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox启用无缝模式</title>
    <url>/2025/10/27/VirtualBox%E5%90%AF%E7%94%A8%E6%97%A0%E7%BC%9D%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>VirtualBox是个不错的产品，免费而且轻量。平时学习、开发使用很方便。vbox安装ubuntu后不能启用无缝模式，外观不能全屏，操作也很不方便，如下图：<br><img src="/images/202510/32.jpg"></p>
<p>要启用vbox无缝模式需要安装增强功能，如下图：<br><img src="/images/202510/33.jpg"></p>
<p>点击“安装增强功能”后，在客户机中会出现安装界面，根据提示安装即可。如下图：<br><img src="/images/202510/34.jpg"></p>
<p>如果提示没有光驱错误（如下图一），则需要在虚拟机设置中增加光驱，并且将增强功能的包添加进该光驱（如下图二）。增强功能包通常在vbox安装目录下，名为VBoxGuestAdditions.iso的文件。<br><img src="/images/202510/35.jpg" alt="图一：安装增强功能错误"><br><img src="/images/202510/36.jpg" alt="图二：虚拟机配置光驱"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox快捷键</title>
    <url>/2025/10/27/VirtualBox%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Right Ctrl + Home – 显示控制菜单</p>
<p>Right Ctrl + F – 切换到全屏模式</p>
<p>Right Ctrl + L – 切换到无缝模式</p>
<p>Right Ctrl + C – 切换到比例模式</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code修改terminal字体</title>
    <url>/2019/10/17/Visual-Studio-Code-%E4%BF%AE%E6%94%B9-terminal-%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p>默认打开中断后字体显示如下：<img src="/images/202501/vs-code-terminal.png" alt="VS 字体设置前效果"></p>
<p>打开设置，搜索配置项<code>terminal.integrated.fontFamily</code>，修改配置为<code>monospace</code>。修改后效果如下：<img src="/images/202501/vs-code-terminal-font.png" alt="VS 字体设置后效果"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11主机Ubuntu 24.04虚机共享目录权限问题</title>
    <url>/2025/09/05/Windows-11%E4%B8%BB%E6%9C%BAUbuntu-24-04%E8%99%9A%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>问题如下图：</p>
<p><img src="/images/202509/virtualbox%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.jpg"></p>
<p>问题原因是在虚机中挂在目录的属主非系统登陆用户引起的，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /media/</span><br><span class="line">总计 8</span><br><span class="line">drwxrwx---  1 root vboxsf 4096  9月  5 09:58 sf_Downloads</span><br></pre></td></tr></table></figure>

<p>可通过以下方法解决：</p>
<p><strong>1. 修改用户组权限</strong></p>
<p>在虚机终端执行以下命令，将当前用户添加到 boxsf 组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG vboxsf $(<span class="built_in">whoami</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2. 重启虚机</strong></p>
<p>执行上述命令后，需重启虚拟机使权限生效。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Windows</tag>
        <tag>VirtualBox</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows PySide6 MySQL驱动问题</title>
    <url>/2025/01/01/Windows-PySide6-MySQL%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Windows 11 家庭中文版 64 位操作系统 23H2</li>
<li>Python 3.12.4</li>
<li>PySide 6.6.0</li>
<li>MySQL 8.0.38</li>
</ul>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>安装PySide 6.6.0后连接MySQL时出现以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D:\gitee\Scrat&gt; &amp; d:/gitee/Scrat/.venv/Scripts/python.exe d:/gitee/Scrat/main.py</span><br><span class="line">QSqlDatabase: QMYSQL driver not loaded</span><br><span class="line">QSqlDatabase: available drivers: QSQLITE QMIMER QODBC QPSQL</span><br></pre></td></tr></table></figure>

<p>根据错误信息可以清晰看出，在可获取的驱动中中没有MySQL，这是因为PySide6没有内置MySQL的驱动。官方或网上通常的解决方案是自行编译。</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>这里介绍一个不需要自行编译的解决方法，参考网址：<a href="https://github.com/thecodemonkey86/qt_mysql_driver">https://github.com/thecodemonkey86/qt_mysql_driver</a>。注意，一定要下载跟自己安装的PySide一致的版本。</p>
<p>按照说明将驱动文件拷贝至个人安装目录，如我在虚拟环境下安装的位置：<img src="/images/202501/01.png"></p>
<p>完成后，再次运行出现以下错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D:\gitee\Scrat&gt; &amp; d:/gitee/Scrat/.venv/Scripts/python.exe d:/gitee/Scrat/main.py</span><br><span class="line">QSqlDatabase: QMYSQL driver not loaded</span><br><span class="line">QSqlDatabase: available drivers: QSQLITE QMIMER QMARIADB QMYSQL QODBC QPSQL</span><br></pre></td></tr></table></figure>

<p>可以看出MySQL驱动已经存在，未加载成功是因为缺少其他库。从MySQL安装目录下，拷贝以下3个动态库到PySide安装目录，如下图：<br><img src="/images/202501/02.png"><br><img src="/images/202501/03.png"></p>
<p>拷贝后的目录截图：<img src="/images/202501/04.png"></p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>MySQL</tag>
        <tag>PySide6</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10下Maven编译Hive2.3.0找不到tools.jar问题</title>
    <url>/2025/10/27/Windows10%E4%B8%8BMaven%E7%BC%96%E8%AF%91Hive2-3-0%E6%89%BE%E4%B8%8D%E5%88%B0tools-jar%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>详细报错信息如图：<br><img src="/images/202510/39.jpg"></p>
<p>在Hive源代码目录下搜索tools.jar发现没有指明特定目录的配置。如下：<br><img src="/images/202510/40.png"></p>
<p>怀疑是Maven配置或者依赖包中存在指定的情况。在.m2目录下搜索：<br><img src="/images/202510/41.jpg"></p>
<p>从上面的搜索可以看到很多从${JAVA_HOME}下查找该包的配置。检查环境变量${JAVA_HOME}发现未配置，错误原因就出在这里。</p>
<p>配置JAVA_HOME后问题解决。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据仓库</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11 + Deepin 双系统，卸载 Deepin</title>
    <url>/2025/10/15/Windows11-Deepin-%E5%8F%8C%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%8D%B8%E8%BD%BD-Deepin/</url>
    <content><![CDATA[<p>在 Windows 11 和 Deepin 双系统环境下卸载 Deepin，需要完成两个主要步骤：</p>
<ol>
<li>在 Windows 中修复引导，恢复单一的 Windows 启动管理器；</li>
<li>删除 Deepin 所占用的磁盘空间。</li>
</ol>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><strong>备份数据</strong>：非常重要，确保 Windows 和 Deepin 系统下的重要数据做好备份，以防万一。</li>
<li>下载并安装 EasyUEFI。EasyUEFI 是系统引导修复的第三方工具，相比使用启动 U 盘进行引导修复，非常简单快捷。</li>
</ul>
<h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="使用-EasyUEFI-修复引导"><a href="#使用-EasyUEFI-修复引导" class="headerlink" title="使用 EasyUEFI 修复引导"></a>使用 EasyUEFI 修复引导</h2><ul>
<li>在 Windows 11 中，下载并安装 EasyUEFI（免费试用版）。</li>
<li>打开 EasyUEFI，在管理 EFI 启动项中，会看到 Windows Boot Manager 和 Deepin 或 grub 等启动项。</li>
<li>选择 Deepin 或 grub 的条目，点击“删除”。</li>
<li>然后将 Windows Boot Manager 条目上移到第一位。</li>
<li>重启电脑，就可以直接进入 Windows 了。</li>
</ul>
<h2 id="删除-Deepin-分区并合并空间"><a href="#删除-Deepin-分区并合并空间" class="headerlink" title="删除 Deepin 分区并合并空间"></a>删除 Deepin 分区并合并空间</h2><ol>
<li>打开磁盘管理：</li>
</ol>
<p>在 Windows 11 中，按<code>Win + X</code>快捷键，选择“磁盘管理”。</p>
<ol start="2">
<li>在磁盘管理窗口中，找到并识别出 Deepin 所使用的分区。通常它们有以下特征：</li>
</ol>
<ul>
<li>文件系统不是 NTFS 或 FAT32（例如，可能是 EXT4、Swap 等，在 Windows 下会显示为“未知分区”或“RAW”）。</li>
<li>没有驱动器号（即 C:， D: 这样的盘符）。</li>
<li>你记得当初给 Deepin 分配的大小，可以根据分区大小来辅助判断。</li>
<li>常见情况：Deepin 通常会有一个 根分区 &#x2F; (主分区，容量大) 和一个 交换分区 swap (容量小，通常与内存大小相仿)。</li>
</ul>
<ol start="3">
<li>逐个右键点击这些属于 Deepin 的分区，选择“删除卷…”。</li>
</ol>
<blockquote>
<p>注意：务必确认删除的是正确的分区！如果你不确定某个分区是做什么的，不要删除。删除操作会立即永久清除该分区上的所有数据。</p>
</blockquote>
<ol start="4">
<li>删除成功后，这些分区会变成“未分配”空间，可以供相邻的磁盘分区扩展使用，或者新建分区。</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Windows</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows7 Emacs设置及中文乱码解决</title>
    <url>/2017/01/08/Windows7-Emacs-%E8%AE%BE%E7%BD%AE%E5%8F%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>Windows7</li>
<li>GNU Emacs 25.1.1</li>
<li>安装路径：D:&#x2F;apps&#x2F;emacs&#x2F;</li>
</ul>
<h1 id="配置Emacs"><a href="#配置Emacs" class="headerlink" title="配置Emacs"></a>配置Emacs</h1><p>在Windows7下安装完Emacs后，默认情况下Emacs不会在一启动的时候就生成.emacs配置文件和.emacs.d目录。为了生成配置文件需要做如下操作：</p>
<ul>
<li>启动Emacs</li>
<li>在Options菜单中随便更改一下设置，如选中“Highlight Matching Parentheses”</li>
<li>点Save Options保存</li>
</ul>
<p>生成的.emacs目录还是在<code>C:\Users\&lt;username&gt;\AppData\Roaming</code>下。打开<code>C:\Users\&lt;username&gt;\AppData\Roaming\.emacs</code>配置文件，添加如下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(load-file &quot;D:/apps/emacs/.emacs&quot;)</span><br></pre></td></tr></table></figure>

<p>Emacs在启动的时候会加载<code>C:\Users\&lt;username&gt;\AppData\Roaming\.emacs</code>这个配置文件，而该文件又加载<code>D:/apps/emacs/.emacs</code>配置文件。这样不用进入<code>C:\Users\&lt;username&gt;\AppData\Roaming\.emacs</code>这个冗的路径了。</p>
<p>使用以下配置修改<code>HOME PATH</code>配置项：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(setenv &quot;HOME&quot; &quot;D:/emacs-23.2&quot;)</span><br><span class="line">(setenv &quot;PATH&quot; &quot;D:/emacs-23.2&quot;)</span><br><span class="line">;;set the default file path</span><br><span class="line">(setq default-directory &quot;~/&quot;)</span><br><span class="line">(setq load-path (cons &quot;~/.emacs.d/elisp&quot; load-path))</span><br></pre></td></tr></table></figure>

<h1 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h1><p>在.emacs文件中加入如下配置：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 编码设置 begin</span></span><br><span class="line">(<span class="name">set-language-environment</span> &#x27;Chinese-GB)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; default-buffer-file-coding-system变量在emacs23.2之后已被废弃，使用buffer-file-coding-system代替</span></span><br><span class="line">(<span class="name">set-default</span> buffer-file-coding-system &#x27;utf-8-unix)</span><br><span class="line">(<span class="name">set-default-coding-systems</span> &#x27;utf-8-unix)</span><br><span class="line">(<span class="name">setq-default</span> pathname-coding-system &#x27;euc-cn)</span><br><span class="line">(<span class="name">setq</span> file-name-coding-system &#x27;euc-cn)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 另外建议按下面的先后顺序来设置中文编码识别方式。</span></span><br><span class="line"><span class="comment">;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。</span></span><br><span class="line"><span class="comment">;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成</span></span><br><span class="line"><span class="comment">;; utf-16 (utf-16 实际上还细分为 utf-16le, utf-16be, utf-16le-with-signature等多种)</span></span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;cp950)</span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;gb2312)</span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;cp936)</span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;gb18030)</span><br><span class="line"></span><br><span class="line"><span class="comment">;(prefer-coding-system &#x27;utf-16le-with-signature)</span></span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;utf-16)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 新建文件使用utf-8-unix方式</span></span><br><span class="line"><span class="comment">;; 如果不写下面两句，只写</span></span><br><span class="line"><span class="comment">;; (prefer-coding-system &#x27;utf-8)</span></span><br><span class="line"><span class="comment">;; 这一句的话，新建文件以utf-8编码，行末结束符平台相关</span></span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;utf-8-dos)</span><br><span class="line">(<span class="name">prefer-coding-system</span> &#x27;utf-8-unix)</span><br><span class="line"><span class="comment">;; 编码设置 end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Emacs</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Emacs</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10安装MySQL找不到MSVCR120.dll和MSVCP120.dll问题解决</title>
    <url>/2022/01/18/Windows10%E5%AE%89%E8%A3%85MySQL%E6%89%BE%E4%B8%8D%E5%88%B0MSVCR120-dll%E5%92%8CMSVCP120-dll%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>msvcp120.dll、msvcr120.dll、vcomp120.dll属于VC++2013版中的动态链接库，如果丢失重新安装VC++2013即可。下载地址：<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784</a>。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Windows</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows7上构建并安装Hadoop 2.7.3</title>
    <url>/2017/02/11/Windows7-%E4%B8%8A%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%AE%89%E8%A3%85-Hadoop-2-7-3/</url>
    <content><![CDATA[<h1 id="构建Hadoop-Windows版本"><a href="#构建Hadoop-Windows版本" class="headerlink" title="构建Hadoop Windows版本"></a>构建Hadoop Windows版本</h1><p>不要尝试从Cygwin中运行安装。Cygwin既不是必须的也不被支持的。</p>
<h2 id="选择Java版本并设置JAVA-HOME"><a href="#选择Java版本并设置JAVA-HOME" class="headerlink" title="选择Java版本并设置JAVA_HOME"></a>选择Java版本并设置JAVA_HOME</h2><p>Hadoop开发者已经测试了Oracle JDK 1.7和1.6，并且已知可以正常工作的版本。</p>
<p>确保设置了JAVA_HOME，并且不包含任何空字符。</p>
<h2 id="获取Hadoop源代码"><a href="#获取Hadoop源代码" class="headerlink" title="获取Hadoop源代码"></a>获取Hadoop源代码</h2><p>下载Hadoop 2.7.3源代码。下载地址：<a href="http://hadoop.apache.org/releases.html">http://hadoop.apache.org/releases.html</a></p>
<h2 id="安装依赖并配置构建环境"><a href="#安装依赖并配置构建环境" class="headerlink" title="安装依赖并配置构建环境"></a>安装依赖并配置构建环境</h2><p>请阅读我的另外一篇博文：<a href="https://www.zhangjc.com/2017/02/11/Windows7-%E6%90%AD%E5%BB%BA-Hadoop-2-7-3-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%88%97%E8%A1%A8/">Windows7搭建Hadoop-2.7.3源码阅读环境问题解决列表</a>。我环境及依赖列表如下：</p>
<ul>
<li>Windows 7</li>
<li>java version 1.7.0_80</li>
<li>Apache Maven 3.2.3</li>
<li>ProtocolBuffer 2.5.0</li>
<li>cmake version 3.7.2 win64 x64</li>
<li>Windows SDK 7.1</li>
</ul>
<h2 id="构建并拷贝打包文件"><a href="#构建并拷贝打包文件" class="headerlink" title="构建并拷贝打包文件"></a>构建并拷贝打包文件</h2><p>在源代码根目录下运行下面的命令构建二进制发布代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn package -Pdist,native-win -DskipTests -Dtar</span><br></pre></td></tr></table></figure>

<p>注意这个命令像<code>BUILDING.txt</code>文档中要求的必须从Windows SDK command prompt窗口运行。成功构建后会在<code>hadoop-dist\target\</code>目录下生成一个<code>hadoop.tar.gz</code>二进制包。</p>
<p>Hadoop版本号会出现在包文件名中。构建不同的版本则报名也会不一样。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>选择一个安装的目标目录。用<code>c:\deploy</code>作为示例。解压<code>tar.gz</code>文件（hadoop-2.7.3.tar.gz）到<code>c:\deploy</code>下。这将生成一个如下结构的目录。如果安装一个多节点的集群，那么在每台节点上重复该步骤。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\deploy&gt;<span class="built_in">dir</span></span><br><span class="line"> Volume <span class="keyword">in</span> drive C has no label.</span><br><span class="line"> Volume Serial Number is 9D1F-7BAC</span><br><span class="line"></span><br><span class="line"> Directory of C:\deploy</span><br><span class="line"></span><br><span class="line">01/18/2014  08:11 AM    &lt;DIR&gt;          .</span><br><span class="line">01/18/2014  08:11 AM    &lt;DIR&gt;          ..</span><br><span class="line">01/18/2014  08:28 AM    &lt;DIR&gt;          bin</span><br><span class="line">01/18/2014  08:28 AM    &lt;DIR&gt;          etc</span><br><span class="line">01/18/2014  08:28 AM    &lt;DIR&gt;          include</span><br><span class="line">01/18/2014  08:28 AM    &lt;DIR&gt;          libexec</span><br><span class="line">01/18/2014  08:28 AM    &lt;DIR&gt;          sbin</span><br><span class="line">01/18/2014  08:28 AM    &lt;DIR&gt;          share</span><br><span class="line">               0 File(s)              0 bytes</span><br></pre></td></tr></table></figure>

<h1 id="启动一个单节点（伪分布式）集群"><a href="#启动一个单节点（伪分布式）集群" class="headerlink" title="启动一个单节点（伪分布式）集群"></a>启动一个单节点（伪分布式）集群</h1><h2 id="HDFS配置示例"><a href="#HDFS配置示例" class="headerlink" title="HDFS配置示例"></a>HDFS配置示例</h2><p>在可以启动Hadoop守护进程之前，需要编辑几个配置文件。配置文件模板可以在<code>c:\deploy\etc\hadoop</code>下找到，假设你的安装目录是<code>c:\deploy</code>。</p>
<p>首先编辑文件<code>hadoop-env.cmd</code>，在文件末尾添加下面的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> HADOOP_PREFIX=c:\deploy</span><br><span class="line"><span class="built_in">set</span> HADOOP_CONF_DIR=%HADOOP_PREFIX%\etc\hadoop</span><br><span class="line"><span class="built_in">set</span> YARN_CONF_DIR=%HADOOP_CONF_DIR%</span><br><span class="line"><span class="built_in">set</span> PATH=%PATH%;%HADOOP_PREFIX%\bin</span><br></pre></td></tr></table></figure>
<p>编辑或创建文件<code>core-site.xml</code>，并确保文件有下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://0.0.0.0:19000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编辑或创建文件<code>hdfs-site.xml</code>，并添加下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后，编辑或创建文件slaves，并确保有下面的配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">localhost</span><br></pre></td></tr></table></figure>

<p>按照默认配置HDFS元数据及数据文件放在当前磁盘的<code>\tmp</code>目录下。在上面的示例中这个目录是<code>c:\tmp</code>。作为第一次测试安装可以保留默认配置。</p>
<h2 id="YARN配置示例"><a href="#YARN配置示例" class="headerlink" title="YARN配置示例"></a>YARN配置示例</h2><p>编辑或创建<code>%HADOOP_PREFIX%\etc\hadoop</code>下的文件<code>mapred-site.xml</code>，并添加下面的配置，用你的Windows用户名替换<code>%USERNAME%</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.user.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>%USERNAME%<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.apps.stagingDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/%USERNAME%/staging<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobtracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后，编辑或创建文件<code>yarn-site.xml</code>，并添加下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.server.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.server.resourcemanager.application.expiry.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.server.nodemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:45454<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.server.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/app-logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/dep/logs/userlogs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.server.mapreduce-appmanager.attempt-listener.bindAddress<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.server.mapreduce-appmanager.client-service.bindAddress<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>%HADOOP_CONF_DIR%,%HADOOP_COMMON_HOME%/share/hadoop/common/*,%HADOOP_COMMON_HOME%/share/hadoop/common/lib/*,%HADOOP_HDFS_HOME%/share/hadoop/hdfs/*,%HADOOP_HDFS_HOME%/share/hadoop/hdfs/lib/*,%HADOOP_MAPRED_HOME%/share/hadoop/mapreduce/*,%HADOOP_MAPRED_HOME%/share/hadoop/mapreduce/lib/*,%HADOOP_YARN_HOME%/share/hadoop/yarn/*,%HADOOP_YARN_HOME%/share/hadoop/yarn/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化环境变量"><a href="#初始化环境变量" class="headerlink" title="初始化环境变量"></a>初始化环境变量</h2><p>运行<code>c:\deploy\etc\hadoop\hadoop-env.cmd</code>设置启动脚本及守护进程使用的环境变量。</p>
<h2 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h2><p>用下面的命令格式化文件系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%HADOOP_PREFIX%\bin\hdfs namenode -format</span><br></pre></td></tr></table></figure>

<p>这个命令将打印文件系统的参数。查找下面的两个字符串确保格式化名称执行成功。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">14/01/18 08:36:23 INFO namenode.FSImage: Saving image file \tmp\hadoop-username\dfs\name\current\fsimage.ckpt_0000000000000000000 using no compression</span><br><span class="line">14/01/18 08:36:23 INFO namenode.FSImage: Image file \tmp\hadoop-username\dfs\name\current\fsimage.ckpt_0000000000000000000 of size 200 bytes saved in 0 seconds.</span><br></pre></td></tr></table></figure>

<h2 id="启动HDFS守护进程"><a href="#启动HDFS守护进程" class="headerlink" title="启动HDFS守护进程"></a>启动HDFS守护进程</h2><p>运行下面的命令在本机启动NameNode和DataNode。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%HADOOP_PREFIX%\sbin\start-dfs.cmd</span><br></pre></td></tr></table></figure>

<p>为了验证HDFS守护进程已经运行，试着拷贝一个文件到HDFS。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\deploy&gt;%HADOOP_PREFIX%\bin\hdfs dfs -put myfile.txt /</span><br><span class="line"></span><br><span class="line">C:\deploy&gt;%HADOOP_PREFIX%\bin\hdfs dfs -<span class="built_in">ls</span> /</span><br><span class="line">Found 1 items</span><br><span class="line">drwxr-xr-x   - username supergroup          4640 2014-01-18 08:40 /myfile.txt</span><br><span class="line"></span><br><span class="line">C:\deploy&gt;</span><br></pre></td></tr></table></figure>

<h2 id="启动YARN守护进程并运行一个YARN任务"><a href="#启动YARN守护进程并运行一个YARN任务" class="headerlink" title="启动YARN守护进程并运行一个YARN任务"></a>启动YARN守护进程并运行一个YARN任务</h2><p>最后，启动YARN守护进程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%HADOOP_PREFIX%\sbin\start-yarn.cmd</span><br></pre></td></tr></table></figure>

<p>集群应该已经启动并运行了。为了验证，我们可以在刚拷贝到HDFS上的文件上运行一个wordcount的示例任务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%HADOOP_PREFIX%\bin\yarn jar %HADOOP_PREFIX%\share\hadoop\mapreduce\hadoop-mapreduce-examples-2.5.0.jar wordcount /myfile.txt /out</span><br></pre></td></tr></table></figure>

<h1 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h1><p>现在可以在自己的个人电脑上跟踪Hadoop源代码，并远程调试本机上的Hadoop。具体做法阅读我的另外一篇博文：<a href="https://www.zhangjc.com/2016/09/11/%E8%B0%83%E8%AF%95-Hadoop-%E6%BA%90%E4%BB%A3%E7%A0%81/">调试Hadoop源代码</a>。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows7搭建Hadoop-2.7.3源码阅读环境问题解决列表</title>
    <url>/2017/02/11/Windows7-%E6%90%AD%E5%BB%BA-Hadoop-2-7-3-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>Windows 7</li>
<li>java version “1.7.0_80”</li>
<li>Apache Maven 3.2.3</li>
<li>ProtocolBuffer 2.5.0</li>
<li>cmake version 3.7.2 win64 x64</li>
<li>Windows SDK 7.1</li>
</ul>
<p>构建过程参照源代码目录下<code>BUILDING.txt</code>说明文件中的“Building on Windows”中的内容；以及我的另外一篇文章：<a href="https://www.zhangjc.com/2016/08/29/%E6%90%AD%E5%BB%BA-Hadoop-%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/">搭建Hadoop源代码阅读环境</a>。</p>
<h1 id="LINK-fatal-error-LNK1123-转换到-COFF-期间失败"><a href="#LINK-fatal-error-LNK1123-转换到-COFF-期间失败" class="headerlink" title="LINK : fatal error LNK1123: 转换到 COFF 期间失败"></a>LINK : fatal error LNK1123: 转换到 COFF 期间失败</h1><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">LINK : fatal error LNK1123: 转换到 COFF 期间失败: 文件无效或损坏 [C:\hadoop-2.7.3\hadoop-common-project\hadoop-common\src\main\winutils\winutils.vcxproj]</span><br></pre></td></tr></table></figure>

<p>安装VS SP1后重现编译。VS SP1下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=23691">https://www.microsoft.com/en-us/download/details.aspx?id=23691</a></p>
<h1 id="fatal-error-C1083-Cannot-open-include-file-‘ammintrin-h’"><a href="#fatal-error-C1083-Cannot-open-include-file-‘ammintrin-h’" class="headerlink" title="fatal error C1083: Cannot open include file: ‘ammintrin.h’"></a>fatal error C1083: Cannot open include file: ‘ammintrin.h’</h1><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\intrin.h(26): fatal error C1083: Cannot open include file: &#x27;ammintrin.h&#x27;: No such file or directory [D:\hadoop-2.7.3\hadoop-common-project\hadoop-common\src\main\native\native.vcxproj]</span><br></pre></td></tr></table></figure>

<p>下载<code>ammintrin.h</code>文件，然后放置到目录<code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\</code>下，然后重新编译。下载地址：<a href="http://wenku.baidu.com/link?url=a1MMc5tWY2SnczBiVLk0MiKFfnSpRWGRHKNIwS3vwCNCCAmTIT7fbyayzu1gJrjY4-0UCs7FLbXvMLItmLa-BPZOqHOQxy5cs--X_vSpYam">http://wenku.baidu.com/link?url=a1MMc5tWY2SnczBiVLk0MiKFfnSpRWGRHKNIwS3vwCNCCAmTIT7fbyayzu1gJrjY4-0UCs7FLbXvMLItmLa-BPZOqHOQxy5cs--X_vSpYam</a></p>
<h1 id="error-You-are-attempting-to-build-a-Win32-application-from-an-x64-environment"><a href="#error-You-are-attempting-to-build-a-Win32-application-from-an-x64-environment" class="headerlink" title="error : You are attempting to build a Win32 application from an x64 environment"></a>error : You are attempting to build a Win32 application from an x64 environment</h1><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\Platforms\Win32\PlatformToolsets\Windows7.1SDK\Microsoft.Cpp.Win32.Windows7.1SDK.targets(20,5): error : You are attempting to build a Win32 application from an x64 environment. If using the Windows 7.1 SDK build environment, type setenv /x86 [D:\hadoop-2.7.3\hadoop-common-project\hadoop-common\src\main\winutils\libwinutils.vcxproj]</span><br></pre></td></tr></table></figure>

<p>这个错误是由于没有按照<code>BUILDING.txt</code>中的说明编译之前必须设置平台环境变量导致。编译前先用下面的命令设置平台环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> Platform=x64 (when building on a 64-bit system)</span><br><span class="line"><span class="built_in">set</span> Platform=Win32 (when building on a 32-bit system)</span><br></pre></td></tr></table></figure>

<h1 id="CMake-Error"><a href="#CMake-Error" class="headerlink" title="CMake Error"></a>CMake Error</h1><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[exec] CMake Error: Could not create named generator Visual Studio 10 Win64</span><br></pre></td></tr></table></figure>

<p>最开始我安装的是<code>cmake 2.6.4</code>，因为这个版本没有win64的版本，所以出错。卸载重新安装cmake-3.7.2-win64-x64版本，重新编译成功。cmake各版本下载地址：<a href="https://cmake.org/files/">https://cmake.org/files/</a></p>
<blockquote>
<p>网上也有类似错误是因为系统中装了cygwin，且cygwin 在环境变量path中的位置在cmake之前。如果是这种情况则将cmake目录路径在环境变量path中的位置移到cygwin前面就解决了。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Jenkins控制台中文乱码</title>
    <url>/2025/09/28/Windows%E4%B8%8BJenkins%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>问题情况如下图：<br><img src="/images/202509/38.png"></p>
<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><ul>
<li>Windows 11 家庭中文版</li>
<li>java 21.0.4 2024-07-16 LTS</li>
<li>Jenkins 2.452.3</li>
</ul>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>增加系统 JAVA_TOOL_OPTIONS，并设置值为 <code>-Dfile.encoding=GBK</code>。</p>
<p>打开设置方法：桌面上右键点击“此电脑”图标，选择“属性”。</p>
<p>环境变量添加如下图：<br><img src="/images/202509/39.png"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Windows</tag>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Jenkins服务未自动重启问题解决</title>
    <url>/2025/10/15/Windows%E4%B8%8BJenkins%E6%9C%8D%E5%8A%A1%E6%9C%AA%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>成功安装 Jenkins 服务后，有时开机后 Jenkins 服务未自动启动。查看 Jenkins 服务安装目录下的日志发现没有服务启动的日志，所以猜测是系统启动后 Jenkins 服务未调起。</p>
<p>通过按 Win + R，然后输入 services.msc 并按回车来打开服务管理工具。找到 Jenkins 服务，点击右键，查看“属性”，Jenkins 默认设置如下：<br><img src="/images/202510/03.jpg"></p>
<p>为了每次开机能自动启动 Jenkins 服务，更改配置如下：</p>
<p>首先，将启动类型修改为“自动（延迟启动）”：<br><img src="/images/202510/04.jpg"></p>
<p>其次，设置失败重试机制：<br><img src="/images/202510/05.jpg"></p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper单机操作</title>
    <url>/2017/03/29/Zookeeper-%E5%8D%95%E6%9C%BA%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>从Apache下载镜像站点下载当前稳定<a href="http://zookeeper.apache.org/releases.html">发布版</a>。</p>
<h1 id="单机操作"><a href="#单机操作" class="headerlink" title="单机操作"></a>单机操作</h1><p>安装单机模式的Zookeeper服务器是简单明了的。服务器包含在一个单独的JAR文件中，因此安装包含创建配置。</p>
<p>下载稳定的ZooKeeper发布版后，解压并切换到包的根目录。</p>
<p>启动ZooKeeper前需要一个配置文件。下面是示例配置文件，创建<code>conf/zoo.cfg</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure>

<p>这个配置文件可以叫任意名字，在此我们叫它<code>conf/zoo.cfg</code>。创建目录<code>/data/zookeeper</code>，并修改dataDir为该目录。</p>
<p><strong>tickTime</strong></p>
<p>Zookeeper使用的单位为毫秒的基本时间。用来做心跳，会话超时的最小时间是两次tickTime。</p>
<p><strong>dataDir</strong></p>
<p>目录位置用来保存内存数据库快照及数据库更新的事务日志，除非另有规定。</p>
<p><strong>clientPort</strong></p>
<p>监听客户端连接的端口号。</p>
<p>创建配置文件后就可以启动ZooKeeper了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>ZooKeeper用log4j记录日志消息 – 可以在程序员指导手册中的<a href="http://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html#Logging">Logging</a> 一节获取更多详细信息。可以从控制台（默认）并且&#x2F;或者看到日志信息，这依赖log4j的配置。</p>
<p>这里列出的步骤是运行单机模式ZooKeeper的。单机模式没有副本，因此，如果ZooKeeper进程失败，则服务就会宕掉。这对于大多数开发场景是没问题的，运行副本模式的ZooKeeper，请参见<a href="http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html#sc_RunningReplicatedZooKeeper">运行副本模式的Zookeeper</a>。</p>
<h1 id="管理ZooKeeper存储"><a href="#管理ZooKeeper存储" class="headerlink" title="管理ZooKeeper存储"></a>管理ZooKeeper存储</h1><p>对于长期运行的生产系统，ZooKeeper存储必须从外部进行管理（dataDir和logs）。参见在 <a href="http://zookeeper.apache.org/doc/trunk/zookeeperAdmin.html#sc_maintenance">maintenance</a> 中的章节获取更多信息。</p>
<h1 id="连接到ZooKeeper"><a href="#连接到ZooKeeper" class="headerlink" title="连接到ZooKeeper"></a>连接到ZooKeeper</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>

<p>这使你可以执行简单的、像文件一样的操作。</p>
<p>当建立了连接，应该可以看到像下面的一些信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Connecting to localhost:2181</span><br><span class="line">log4j:WARN No appenders could be found for logger (org.apache.zookeeper.ZooKeeper).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">[zkshell: 0]</span><br></pre></td></tr></table></figure>

<p>在shell中，输入help获取可以从客户端执行的命令列表，像下面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span></span><br><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">        connect host:port</span><br><span class="line">        get path [watch]</span><br><span class="line">        <span class="built_in">ls</span> path [watch]</span><br><span class="line">        <span class="built_in">set</span> path data [version]</span><br><span class="line">        rmr path</span><br><span class="line">        delquota [-n|-b] path</span><br><span class="line">        quit </span><br><span class="line">        printwatches on|off</span><br><span class="line">        create [-s] [-e] path data acl</span><br><span class="line">        <span class="built_in">stat</span> path [watch]</span><br><span class="line">        close </span><br><span class="line">        ls2 path [watch]</span><br><span class="line">        <span class="built_in">history</span> </span><br><span class="line">        listquota path</span><br><span class="line">        setAcl path acl</span><br><span class="line">        getAcl path</span><br><span class="line">        <span class="built_in">sync</span> path</span><br><span class="line">        redo cmdno</span><br><span class="line">        addauth scheme auth</span><br><span class="line">        delete path [version]</span><br><span class="line">        setquota -n|-b val path</span><br></pre></td></tr></table></figure>

<p>从这里，可以尝试几个简单的命令来体验简单的命令行接口。首先，从命令列表开始，像ls：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 1] <span class="built_in">ls</span> /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure>

<p>接下来，通过运行<code>create /zk_test my_data</code>创建一个新的znode。这会创建一个新的znode并与这个节点关联字符串“my_data”：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 2] create /zk_test my_data</span><br><span class="line">Created /zk_test</span><br></pre></td></tr></table></figure>

<p>输入<code>ls /</code>命令查看目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 3] <span class="built_in">ls</span> /</span><br><span class="line">[zookeeper, zk_test]</span><br></pre></td></tr></table></figure>

<p>现在zk_test目录被创建了。</p>
<p>接下来，通过get命令确认数据已经与znode关联，像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 4] get /zk_test</span><br><span class="line">my_data</span><br><span class="line">cZxid = 0x2</span><br><span class="line">ctime = Tue Mar 28 23:37:16 CST 2017</span><br><span class="line">mZxid = 0x2</span><br><span class="line">mtime = Tue Mar 28 23:37:16 CST 2017</span><br><span class="line">pZxid = 0x2</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 7</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>

<p>可以输入set命令修改与zk_test关联的数据，像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 5] <span class="built_in">set</span> /zk_test junk</span><br><span class="line">cZxid = 0x2</span><br><span class="line">ctime = Tue Mar 28 23:37:16 CST 2017</span><br><span class="line">mZxid = 0x3</span><br><span class="line">mtime = Tue Mar 28 23:46:12 CST 2017</span><br><span class="line">pZxid = 0x2</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 0</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 6] get /zk_test</span><br><span class="line">junk</span><br><span class="line">cZxid = 0x2</span><br><span class="line">ctime = Tue Mar 28 23:37:16 CST 2017</span><br><span class="line">mZxid = 0x3</span><br><span class="line">mtime = Tue Mar 28 23:46:12 CST 2017</span><br><span class="line">pZxid = 0x2</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>

<p>最后，输入以下命令删除节点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 7] delete /zk_test</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 8] <span class="built_in">ls</span> /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>常用组件</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper集群搭建</title>
    <url>/2017/04/01/Zookeeper-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h1><p>在<code>/etc/hosts</code>配置文件中添加如下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">10.142.165.40 frin-zookeeper1</span><br><span class="line">10.142.165.41 frin-zookeeper2</span><br><span class="line">10.142.165.44 frin-zookeeper3</span><br></pre></td></tr></table></figure>

<h1 id="创建用户及目录"><a href="#创建用户及目录" class="headerlink" title="创建用户及目录"></a>创建用户及目录</h1><ul>
<li>创建zookeeper用户，用来启动zookeeper进程。</li>
<li>创建<code>/frin/zookeeper</code>目录作为zookeeper的home目录。修改该目录的属主与组为zookeeper。</li>
</ul>
<h1 id="下载zookeeper并解压"><a href="#下载zookeeper并解压" class="headerlink" title="下载zookeeper并解压"></a>下载zookeeper并解压</h1><p>当前最新稳定版本是zookeeper-3.4.10.tar.gz，下载地址：<a href="http://www.apache.org/dyn/closer.cgi/zookeeper/">http://www.apache.org/dyn/closer.cgi/zookeeper/</a>。下载并解压到<code>/frin/zookeeper</code>目录下。</p>
<p>创建软连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /frin/zookeeper/zookeeper-3.4.10 /usr/local/zookeeper-3.4.10</span><br></pre></td></tr></table></figure>

<h1 id="Java-heap设置"><a href="#Java-heap设置" class="headerlink" title="Java heap设置"></a>Java heap设置</h1><p>设置Java heap大小，避免内存与磁盘空间的交换，能够大大提升ZK的性能，设置合理的heap大小则能有效避免此类空间交换的触发。在正式发布上线之前，建议是针对使用场景进行一些压力测试，确保正常运行后内存的使用不会触发此类交换。通常在一个物理内存为4G的机器上，最多设置-Xmx为3G。</p>
<p>因为存储数据量很小，此处使用默认值。</p>
<h1 id="zookeeper配置"><a href="#zookeeper配置" class="headerlink" title="zookeeper配置"></a>zookeeper配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<p>在zoo.cfg中添加如下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=frin-zookeeper1:2888:3888</span><br><span class="line">server.2=frin-zookeeper2:2888:3888</span><br><span class="line">server.3=frin-zookeeper3:2888:3888</span><br></pre></td></tr></table></figure>

<p>创建数据目录：&#x2F;data&#x2F;zookeeper</p>
<h1 id="创建myid文件"><a href="#创建myid文件" class="headerlink" title="创建myid文件"></a>创建myid文件</h1><p>myid文件中只有一个数字，即一个Server ID。例如，server.1的myid文件内容就是“1”。注意，请确保每个server的myid文件中id数字不同，并且和server.id&#x3D;host:port:port中的id一致。另外，id的范围是1~255。</p>
<p>分别在三台机器上的<code>/data/zookeeper</code>目录下创建myid文件，并设置相应的值。</p>
<h1 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkCli.sh -server frin-zookeeper1:2181</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>常用组件</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper概览</title>
    <url>/2021/12/07/Zookeeper%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h1 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h1><ul>
<li>简单的：方便使用以实现复杂的业务应用。</li>
<li>复制式的：跟Zookeeper协调的分布式进程一样，它也是在一组服务器上复制的。集群的每个节点间互相知道。它们维护一个状态数据在内存中的镜像、一个事务日志和持久存储的快照。只要集群的多数节点可用则Zookeeper服务可用。客户端连接到一个Zookeeper服务器。客户端维持一个TCP连接来发送请求、获取响应、获取监听事件、发送心跳。如果这个TCP连接中断，则客户端会连接另外一个服务器。</li>
<li>顺序的：Zookeeper赋予每次更新操作一个数字戳以标明事务的顺序。其后的操作可以用这个顺序实现高级别的抽象，例如同步原语。</li>
<li>快速的：在读取操作占优势的场景尤其快速。Zookeeper应用运行在上千台机器上，在读操作比写操作常见的情况下很高效，通常读写比例为10：1。</li>
</ul>
<h1 id="保障"><a href="#保障" class="headerlink" title="保障"></a>保障</h1><ul>
<li>顺序一致性：顺序应用客户端发送的更新操作。</li>
<li>原子性：更新操作要么成功要么失败，没有不完整的结果。</li>
<li>单一系统镜像：不管客户端连接到哪个服务器都会看到相同系统视图。例如，客户端使用同一个Session连接永远不会看到系统旧的视图，即使客户端失败后重连到另外一个服务器。</li>
<li>可靠性：一旦一个更新被应用，它就在这一刻被保持直到一个客户端覆盖这次更新。</li>
<li>时效性：系统的客户端视图保证在一定的时间范围内变为最新。</li>
</ul>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>ZooKeeper被设计为高性能的。真的是吗？Yahoo ZooKeeper开发团队的研究表明是的。尤其是在读远多于写的应用程序中。因为写会涉及所有服务器的同步。</p>
<blockquote>
<p>读远多于写是协调服务典型的使用场景。</p>
</blockquote>
<p>下图是ZooKeeper吞吐量随读写比率的变化而变化：</p>
<p><img src="/images/202501/zkperfRW-3.2.jpg" alt="ZooKeeper Throughput as the Read-Write Ratio Varies"></p>
<p>上图是ZooKeeper 3.2运行在拥有双2Ghz Xeon和两个SATA 15K RPM驱动器的服务器上的吞吐量图。一个驱动专用于ZooKeeper日志。快照写到OS的驱动。写和读都是1K的数据。“Servers”是ZooKeeper集群的规模。大概30台另外的服务器模拟客户端。ZooKeeper集群配置leaders不允许客户端连接。</p>
<blockquote>
<p>3.2版本比3.1版本读写效率提升2倍以上。</p>
</blockquote>
<p>基准测试也表明它是可靠的。“存在错误时的可靠性”图展示了如何响应各种失败。图中标注的事件如下：</p>
<ol>
<li>一个follower的失败恢复</li>
<li>另外一个follower的失败恢复</li>
<li>leader失败</li>
<li>两个follower的失败恢复</li>
<li>另外一个leader失败</li>
</ol>
<h1 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h1><p>为了显示系统故障随时间变化的行为，我们运行了一个由7台机器组成的ZooKeeper服务。我们运行了与之前相同的饱和基准测试，但这次我们将写入百分比保持在30%，这是我们预期工作负载的比例。</p>
<p><img src="/images/202501/zkperfreliability.jpg" alt="Reliability in the Presence of Errors"></p>
<p>从这张图中可以看出一些重要的观察结果。首先，如果follower失败并快速恢复，那么即使出现故障，ZooKeeper也能够维持高吞吐量。但也许更重要的是，领导者选举算法允许系统足够快地恢复以防止吞吐量大幅下降。在我们的观察中，ZooKeeper花费不到200毫秒的时间来选举一个新的领导者。第三，随着follower的恢复，一旦他们开始处理请求，ZooKeeper能够再次提高吞吐量。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>常用组件</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>addShutdownHook</title>
    <url>/2025/10/27/addShutdownHook/</url>
    <content><![CDATA[<h1 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h1><p><strong>addShutdownHook</strong> 是 Runtime 类中的一个方法，方法声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShutdownHook</span><span class="params">(Thread hook)</span></span><br></pre></td></tr></table></figure>

<p>JDK 帮助手册中的解释如下：</p>
<p>注册一个新的虚拟机关闭钩子。</p>
<p>Java 虚拟机在响应两种事件时关闭：</p>
<ul>
<li>当最后的非守护线程退出，或者调用 exit （等同于 System.exit ）方法时，程序正常退出。</li>
<li>响应用户中断而终止虚拟机，例如键入 ^C；或者响应系统事件终止虚拟机，例如用户注销或者系统关闭。</li>
</ul>
<p>关闭钩子只是一个已初始化但尚未启动的线程。当虚拟机开启关闭序列时，它会以不确定的顺序启动全部注册的关闭钩子，并让它们并发运行。当所有的钩子已经运行完，如果已启用退出终结方法，那么虚拟机接着会运行所有未调用的终结方法。最后，虚拟机会停止。注意，在关闭序列执行期间守护线程会继续运行，如果通过调用 exit 方法启动关闭非守护线程也会继续运行。</p>
<p>一旦关闭序列开始执行，只能通过调用 halt 方法停止它，该方法可强制终止虚拟机。</p>
<p>一旦关闭序列开始执行就不能注册一个新的关闭钩子或者取消注册已经注册的钩子。尝试这些操作会导致抛出 IllegalStateException 。</p>
<p>关闭钩子运行在虚拟机生命周期中的一个微妙的时间，因此应保护性地对其进行编码。特别是关闭钩子应该编写为线程安全的，并且尽可能避免死锁。关闭钩子还应该不盲目地依靠某些服务，这些服务可能已注册了自己的关闭钩子，所以其本身可能正处于关闭进程中。例如，试图使用其他基于线程的服务（如 AWT 事件指派线程）可能导致死锁。</p>
<p>关闭钩子应该快速地完成它们的工作。当程序调用 exit 的时候，期望的结果是虚拟机及时关闭并且退出。当由于用户注销或者系统关闭引起虚拟机终止时，底层操作系统可能只允许在固定的时间内关闭并退出。因此，在关闭钩子中尝试任何用户交互或执行长时间的计算是不可取的。就像在其他线程中一样，通过调用线程的 ThreadGroup 对象的 uncaughtException 方法，未被捕获的异常可在关闭钩子中处理。此方法的默认实现是将该异常的堆栈跟踪信息打印至 System.err 并终止线程；它不会导致虚拟机退出或停止。</p>
<p>仅在很少的情况下，虚拟机可能会中止，也就是没有完全关闭就停止运行。这种情况会发生在虚拟机被从外部终止时，比如在 Unix 上使用 SIGKILL 信号或在 Microsoft Windows 上调用 TerminateProcess。如果由于例如内部数据结构损坏或试图访问不存在的内存而导致本地方法执行错误，虚拟机也可能会中止。如果虚拟机中止，则不能保证所有的关闭钩子都被运行。</p>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>hook - 已初始化但尚未启动的线程对象</p>
<h1 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h1><p>IllegalArgumentException - 如果指定的钩子已注册，或者可以确定钩子正在运行或者已运行完毕</p>
<p>IllegalStateException - 如果虚拟机已经处于关闭过程中</p>
<p>SecurityException - 如果安全管理器存在并且拒绝 RuntimePermission(”shutdownHooks“)</p>
<h1 id="Since："><a href="#Since：" class="headerlink" title="Since："></a>Since：</h1><p>1.3</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>git bash中文显示问题</title>
    <url>/2024/12/20/git-bash%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>默认情况下git bash中文以ASCII编码，不方便查看，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git rm --cached &lt;文件&gt;...&quot;</span> 以取消暂存）</span><br><span class="line"></span><br><span class="line">        新文件：   <span class="string">&quot;source/_posts/Airflow\345\210\235\344\275\223\351\252\214.md&quot;</span></span><br></pre></td></tr></table></figure>

<p>要显示正确的中文，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 内置字符串（String）函数</title>
    <url>/2025/10/26/hive-%E5%86%85%E7%BD%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88String%EF%BC%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>Hive 支持以下内置字符串函数：</p>
<ol>
<li>int ascii(string str)：返回字符串第一个字符的 ASCII 码值。</li>
<li>string base64(binary bin)：将二进制参数转换为 base 64 编码的字符串。</li>
<li>string concat(string|binary A, string|binary B…)：将作为参数的字符串或者二进制数据依次拼接，并返回拼接后的结果。例如：concat(‘foo’, ‘bar’)，返回结果为‘foobar’。这个函数可以接受任意数量的字符串参数。</li>
<li>array&lt;struct&lt;string,double&gt;&gt; context_ngrams(array&lt;array<string>&gt;, array<string>, int K, int pf)：给定一个字符串作“语境”，返回一组标记句子的Top-k语境n-grams。更多信息参见 <a href="https://link.zhihu.com/?target=https://cwiki.apache.org/confluence/display/Hive/StatisticsAndDataMining">StatisticsAndDataMining</a>。</li>
<li>string concat_ws(string SEP, string A, string B…)：像上面的 concat() 函数一样，不过可以自定义分隔符 SEP。</li>
<li>string concat_ws(string SEP, array)：像上面的 concat_ws() 函数一样，不过传入一个字符串数据作为参数。</li>
<li>string decode(binary bin, string charset)：用提供的字符集（’US-ASCII’, ‘ISO-8859-1’, ‘UTF-8’, ‘UTF-16BE’, ‘UTF-16LE’, ‘UTF-16’ 中的一个）解码第一个参数为一个字符串。如果任一个参数为 null，则结果也为 null。</li>
<li>binary encode(string src, string charset)：用提供的字符集（’US-ASCII’, ‘ISO-8859-1’, ‘UTF-8’, ‘UTF-16BE’, ‘UTF-16LE’, ‘UTF-16’ 中的一个）编码第一个参数为二进制。</li>
<li>int find_in_set(string str, string strList)：返回 str 在 strList 中第一次出现的序号；strList 是一个逗号分隔的字符串。如果任何一个参数为 null，则返回 null。如果第一个参数包含逗号则返回 0。例如，find_in_set(‘ab’, ‘abc,b,ab,c,def’) 返回 3。</li>
<li>string format_number(number x, int d)：格式化数字 X 为像 ‘#,###,###.##’ 的格式，四舍五入到 D 的小数点位置，并返回结果为一个字符串。如果 D 是 0，结果没有小数点或分数部分。</li>
<li>string get_json_object(string json_string, string path)：基于给定的 json 路径从 json 字符串中提取 json 对象，返回提取 json 对象的 json 字符串。如果输入的 json 字符串非法则返回 null。备注：json 路径只能包含 [0-9a-z_] 字符，即，没有大写或特殊字符。并且键不能以数字开头。这是由于 Hive 列名称的限制。</li>
<li>boolean n_file(string str, string filename)：如果字符串 str 在 filename 中整行出现则返回 true。</li>
<li>int instr(string str, string substr)：返回 substr 在 str 中第一次出现的位置。如果任一个参数为 null，则返回 null；如果在 str 中找不到 substr，则返回 0。注意这个函数不是以 0 为基础的。str 中第一个字符的索引是 1。</li>
<li>int length(string A)：返回字符串的长度。</li>
<li>int locate(string substr, string str[, int pos])：返回 pos 位置之后 substr 在 str 中第一次出现的位置。</li>
<li>string lower(string A) lcase(string A)： 返回全部字符转为小写之后的字符串。例如，lower(‘fOoBaR’) 结果为 ‘foobar’。</li>
<li>string lpad(string str, int len, string pad)：左边添加 pad 参数输入的字符使字符串长度为 len，然后返回该字符串。</li>
<li>string ltrim(string A)：返回从 A 的开头（左手边）删除空白字符后的字符串。例如，ltrim(‘ foobar ‘) 结果为 ‘foobar’。</li>
<li>array&lt;struct&lt;string,double&gt;&gt; ngrams(array&lt;array<string>&gt;, int N, int K, int pf)：返回一组标记句子的Top-k语境n-grams，就像 sentences() UDAF 返回的结果。参见 <a href="https://link.zhihu.com/?target=https://cwiki.apache.org/confluence/display/Hive/StatisticsAndDataMining">StatisticsAndDataMining</a> 获取更多信息。</li>
<li>string parse_url(string urlString, string partToExtract [, string keyToExtract])：返回指定的 URL 中的部分。partToExtract 合法的取值有 HOST、PATH、QUERY、REF、PROTOCOL、AUTHORITY、FILE 和 USERINFO。例如，parse_url(‘<a href="http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1%E2%80%98">http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1‘</a>, ‘HOST’) 返回 ‘facebook.com’。并且通过提供第三个参数，可以提取 QUERY 中普通的键值，例如，parse_url(‘<a href="http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1%E2%80%98">http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1‘</a>, ‘QUERY’, ‘k1’) 返回 ‘v1’。</li>
<li>string printf(String format, Obj… args)：返回按照输入的格式输出格式化的字符串。</li>
<li>string regexp_extract(string subject, string pattern, int index)：返回使用模式提取的字符串。例如，regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 2) 返回 ‘bar’。注意，使用预定义字符类型有一些必要的关注：使用 ‘\s’ 作为第二个参数将匹配字母 s；匹配空白字符 ‘\s’ 是必须的，等。‘index’ 参数是 Java 正则 Matcher group() 方法索引。查阅 docs&#x2F;api&#x2F;java&#x2F;util&#x2F;regex&#x2F;Matcher.html 获取‘index’或 Java 正则 group() 方法的更多信息。</li>
<li>string regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)：返回用 REPLACEMENT 的实例替换 INITIAL_STRING 中所有 PATTERN 中定义的匹配 java 正则表达式的子字符串的结果字符串。例如，regexp_replace(“foobar”, “oo|ar”, “”) 返回‘fb’。注意，使用预定义字符类型有一些必要的关注：使用 ‘\s’ 作为第二个参数将匹配字母 s；匹配空白字符 ‘\s’ 是必须的，等。</li>
<li>string repeat(string str, int n)：重复 str n 次。</li>
<li>string reverse(string A)：返回反转后的字符串。</li>
<li>string rpad(string str, int len, string pad)：右边添加 pad 参数输入的字符使字符串长度为 len，然后返回该字符串。</li>
<li>string rtrim(string A)：返回从 A 的末尾（右手边）删除空白字符后的字符串。例如，rtrim(‘ foobar ‘) 结果为 ‘foobar’。</li>
<li>array&lt;array<string>&gt; sentences(string str, string lang, string locale)：标记一个自然语言文本字符串为单词和句子，每个句子在适当的句子边界被拆分并且作为一个单词数组返回。‘lang’和‘locale’是可选参数。例如，sentences(‘Hello there! How are you?’) 返回 ( (“Hello”, “there”), (“How”, “are”, “you”))。</li>
<li>string space(int n)：返回 n 空白的字符串。</li>
<li>array split(string str, string pat)：从 pat 左右分解 str（ pat 是一个正则表达式）。</li>
<li>map&lt;string,string&gt; str_to_map(text[, delimiter1, delimiter2])：使用两个分隔符将文本分割为键值对。delimiter1 分割文本为键值对，delimiter2 拆分每个键值对。默认的第一分隔符是‘,’，第二个分隔符是‘＝’。</li>
<li>string substr(string|binary A, int start) substring(string|binary A, int start)：返回从 start 位置到末尾的字符串 A 的子字符串或字节数组的部分。例如，substr(‘foobar’, 4) 结果为 ‘bar’。</li>
<li>string substr(string|binary A, int start, int len) substring(string|binary A, int start, int len)：返回从 start 位置开始长度为 len 的 A 的字符串或字节数组的部分。例如，substr(‘foobar’, 4, 1) 返回‘b’。</li>
<li>string substring_index(string A, string delim, int count)：返回字符串 A 中 delim 分隔符第 count 次匹配前的子字符串。如果 count 是正数，所有到左边最后分隔符（从左边计算）都会返回。如果 count 是负数，所有到右边最后分隔符（从右边计算）都会返回。当搜索 delim 时，Substring_index 是大小写敏感的。示例：substring_index(‘<a href="http://www.apache.org‘/">www.apache.org‘</a>, ‘.’, 2) &#x3D; ‘<a href="http://www.apache'./">www.apache&#39;。</a></li>
<li>string translate(string|char|varchar input, string|char|varchar from, string|char|varchar to)：通过用 to 中对应的字符替换 from 中展示的字符转化 input 字符串。这跟 <a href="https://link.zhihu.com/?target=http://www.postgresql.org/docs/9.1/interactive/functions-string.html">PostgreSQL</a> 中的 translate 函数相似。这个 UDF 的任一个参数为 NULL，结果也为 NULL。</li>
<li>string trim(string A)：返回从 A 两端去除空白字符后的字符串。例如，trim(‘ foobar ‘) 结果为 ‘foobar’。</li>
<li>binary unbase64(string str)：转换参数从一个 base 64 字符串为 BINARY。</li>
<li>string upper(string A) ucase(string A)：返回转换字符串 A 中所有字符为大写后的字符串。例如，upper(‘fOoBaR’) 结果为‘FOOBAR’。</li>
<li>string initcap(string A)：返回字符串，每个单词的第一个字母为大写，所有其他字母为小写。单词以空白字符分割。</li>
<li>int levenshtein(string A, string B)：返回两个字符串之间的 Levenshtein 距离。例如，levenshtein(‘kitten’, ‘sitting’) 结果为 3。</li>
<li>string soundex(string A)：返回字符串的 soundex 码。例如，soundex(‘Miller’) 结果为 M460。</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据仓库</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>javap</title>
    <url>/2016/10/16/javap/</url>
    <content><![CDATA[<p>反编译一个或多个class文件。</p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p><strong>javap</strong> [<em>options</em>] <em>classfile…</em></p>
<h2 id="options"><a href="#options" class="headerlink" title="options"></a><em>options</em></h2><p>命令行选项。具体选项参见“选项”一节。</p>
<h2 id="classfile"><a href="#classfile" class="headerlink" title="classfile"></a><em>classfile</em></h2><p>一个或多个用空格分隔的被注释的类，例如：<code>DocFooter.class</code>。可以通过文件名或者URL（如：file:&#x2F;&#x2F;&#x2F;home&#x2F;user&#x2F;myproject&#x2F;src&#x2F;DocFooter.class）指定一个在类路径中的类。</p>
<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><em>javap</em> 命令反汇编一个或多个类文件。输出依赖于使用的选项。当不使用选项时，<em>javap</em> 命令打印传递给它的类的包、protected和public属性、方法。<em>javap</em> 命令打印输出到标准输入。</p>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><h2 id="help-help"><a href="#help-help" class="headerlink" title="-help --help -?"></a>-help --help -?</h2><p>打印 <em>javap</em> 命令的帮助信息。</p>
<h2 id="version"><a href="#version" class="headerlink" title="-version"></a>-version</h2><p>打印发布信息。</p>
<h2 id="l"><a href="#l" class="headerlink" title="-l"></a>-l</h2><p>输出行号和本地变量表。</p>
<h2 id="public"><a href="#public" class="headerlink" title="-public"></a>-public</h2><p>仅显示公共类和成员。</p>
<h2 id="protected"><a href="#protected" class="headerlink" title="-protected"></a>-protected</h2><p>显示受保护的&#x2F;公共类和成员。</p>
<h2 id="private-p"><a href="#private-p" class="headerlink" title="-private -p"></a>-private -p</h2><p>显示所有类和成员。</p>
<h2 id="Joption"><a href="#Joption" class="headerlink" title="-Joption"></a>-Joption</h2><p>传递指定的选项给JVM。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap -J-version</span><br><span class="line">javap -J-Djava.security.manager -J-Djava.security.policy=MyPolicy MyClassName</span><br></pre></td></tr></table></figure>

<p>关于JVM选项的更多信息，参见 <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#CBBFHAJA">java</a> 命令文档。</p>
<h2 id="s"><a href="#s" class="headerlink" title="-s"></a>-s</h2><p>输出内部类型签名。</p>
<h2 id="sysinfo"><a href="#sysinfo" class="headerlink" title="-sysinfo"></a>-sysinfo</h2><p>显示正在处理的类的系统信息 (路径、大小、日期、MD5 散列)。</p>
<h2 id="constants"><a href="#constants" class="headerlink" title="-constants"></a>-constants</h2><p>显示静态最终常量。</p>
<h2 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h2><p>对代码进行反汇编。</p>
<h2 id="verbose"><a href="#verbose" class="headerlink" title="-verbose"></a>-verbose</h2><p>打印方法参数和本地变量的数量以及栈区大小。</p>
<h2 id="classpath-path"><a href="#classpath-path" class="headerlink" title="-classpath path"></a>-classpath <em>path</em></h2><p>指定查找用户类文件的位。当设置了这个变量将覆盖默认的或 CLASSPATH 环境变量。</p>
<h2 id="bootclasspath-path"><a href="#bootclasspath-path" class="headerlink" title="-bootclasspath path"></a>-bootclasspath <em>path</em></h2><p>覆盖引导类文件的位置。默认的，引导类是那些实现了位于 jre&#x2F;lib&#x2F;rt.jar 和其他几个 JAR 文件的核心 Java 平台的类。</p>
<h2 id="extdir-dirs"><a href="#extdir-dirs" class="headerlink" title="-extdir dirs"></a>-extdir <em>dirs</em></h2><p>指定javap搜索已安装的java扩展的位置，默认的java扩展的位置为 java.ext.dirs 的值。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>编译下面的<code>HelloWorld.java</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>javap HelloWorld.class</code>命令的输出如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;HelloWorld.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HelloWorld</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>javap -c HelloWorld.class</code>命令的输出如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;HelloWorld.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HelloWorld</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0       </span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span>        </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">3</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String Hello World!</span></span><br><span class="line">       <span class="number">5</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span>        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java.lang.AssertionError: Output column number expected to be 0 when isRepeating</title>
    <url>/2021/08/25/java-lang-AssertionError-Output-column-number-expected-to-be-0-when-isRepeating/</url>
    <content><![CDATA[<p>完整异常信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-08-25 14:37:24,329 [INFO] [Dispatcher thread &#123;Central&#125;] |HistoryEventHandler.criticalEvents|: [HISTORY][DAG:dag_1612602874723_344108_1][Event:TASK_ATTEMPT_FINISHED]: vertexName=Map 1, taskAttemptId=attempt_1612602874723_344108_1_00_000004_0, creationTime=1629873439340, allocationTime=1629873440827, startTime=1629873442059, finishTime=1629873444322, timeTaken=2263, status=FAILED, taskFailureType=FATAL, errorEnum=APPLICATION_ERROR, diagnostics=Error: Error while running task ( failure ) : java.lang.RuntimeException: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:101)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.pushRecord(MapRecordSource.java:76)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordProcessor.run(MapRecordProcessor.java:419)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:267)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:250)</span><br><span class="line">	at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:381)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:82)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:69)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAs(Subject.java:422)</span><br><span class="line">	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:69)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:39)</span><br><span class="line">	at org.apache.tez.common.CallableWithNdc.call(CallableWithNdc.java:36)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:125)</span><br><span class="line">	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:78)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector.setElement(BytesColumnVector.java:492)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorUDFMapIndexBaseScalar.evaluate(VectorUDFMapIndexBaseScalar.java:84)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorCoalesce.evaluate(VectorCoalesce.java:60)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.gen.FilterStringGroupColNotEqualStringGroupScalarBase.evaluate(FilterStringGroupColNotEqualStringGroupScalarBase.java:64)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.FilterExprAndExpr.evaluate(FilterExprAndExpr.java:42)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorFilterOperator.process(VectorFilterOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.vectorForward(Operator.java:966)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:939)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.TableScanOperator.process(TableScanOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.deliverVectorizedRowBatch(VectorMapOperator.java:812)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.process(VectorMapOperator.java:845)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:92)</span><br><span class="line">	... 19 more</span><br><span class="line">, errorMessage=Cannot recover from this error:java.lang.RuntimeException: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:101)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.pushRecord(MapRecordSource.java:76)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordProcessor.run(MapRecordProcessor.java:419)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:267)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:250)</span><br><span class="line">	at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:381)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:82)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:69)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAs(Subject.java:422)</span><br><span class="line">	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:69)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:39)</span><br><span class="line">	at org.apache.tez.common.CallableWithNdc.call(CallableWithNdc.java:36)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:125)</span><br><span class="line">	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:78)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector.setElement(BytesColumnVector.java:492)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorUDFMapIndexBaseScalar.evaluate(VectorUDFMapIndexBaseScalar.java:84)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorCoalesce.evaluate(VectorCoalesce.java:60)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.gen.FilterStringGroupColNotEqualStringGroupScalarBase.evaluate(FilterStringGroupColNotEqualStringGroupScalarBase.java:64)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.FilterExprAndExpr.evaluate(FilterExprAndExpr.java:42)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorFilterOperator.process(VectorFilterOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.vectorForward(Operator.java:966)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:939)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.TableScanOperator.process(TableScanOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.deliverVectorizedRowBatch(VectorMapOperator.java:812)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.process(VectorMapOperator.java:845)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:92)</span><br><span class="line">	... 19 more</span><br><span class="line">, nodeHttpAddress=datanode143-ysten3:8042, counters=Counters: 15, File System Counters, HDFS_BYTES_READ=216088, HDFS_BYTES_WRITTEN=3, HDFS_READ_OPS=3, HDFS_LARGE_READ_OPS=0, HDFS_WRITE_OPS=1, org.apache.tez.common.counters.TaskCounter, GC_TIME_MILLIS=136, CPU_MILLISECONDS=7620, WALL_CLOCK_MILLISECONDS=2160, PHYSICAL_MEMORY_BYTES=1120403456, VIRTUAL_MEMORY_BYTES=3798720512, COMMITTED_HEAP_BYTES=1120403456, INPUT_RECORDS_PROCESSED=26, INPUT_SPLIT_LENGTH_BYTES=10128027, OUTPUT_RECORDS=0, HIVE, CREATED_FILES=1</span><br><span class="line">2021-08-25 14:37:24,332 [INFO] [Dispatcher thread &#123;Central&#125;] |impl.TaskImpl|: Failing task: task_1612602874723_344108_1_00_000004 due to FATAL error reported by TaskAttempt. CurrentFailedAttempts=1</span><br><span class="line">2021-08-25 14:37:24,334 [INFO] [Dispatcher thread &#123;Central&#125;] |HistoryEventHandler.criticalEvents|: [HISTORY][DAG:dag_1612602874723_344108_1][Event:TASK_FINISHED]: vertexName=Map 1, taskId=task_1612602874723_344108_1_00_000004, startTime=1629873442059, finishTime=1629873444333, timeTaken=2274, status=FAILED, successfulAttemptID=null, diagnostics=TaskAttempt 0 failed, info=[Error: Error while running task ( failure ) : java.lang.RuntimeException: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:101)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.pushRecord(MapRecordSource.java:76)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordProcessor.run(MapRecordProcessor.java:419)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:267)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:250)</span><br><span class="line">	at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:381)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:82)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:69)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAs(Subject.java:422)</span><br><span class="line">	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:69)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:39)</span><br><span class="line">	at org.apache.tez.common.CallableWithNdc.call(CallableWithNdc.java:36)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:125)</span><br><span class="line">	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:78)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector.setElement(BytesColumnVector.java:492)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorUDFMapIndexBaseScalar.evaluate(VectorUDFMapIndexBaseScalar.java:84)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorCoalesce.evaluate(VectorCoalesce.java:60)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.gen.FilterStringGroupColNotEqualStringGroupScalarBase.evaluate(FilterStringGroupColNotEqualStringGroupScalarBase.java:64)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.FilterExprAndExpr.evaluate(FilterExprAndExpr.java:42)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorFilterOperator.process(VectorFilterOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.vectorForward(Operator.java:966)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:939)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.TableScanOperator.process(TableScanOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.deliverVectorizedRowBatch(VectorMapOperator.java:812)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.process(VectorMapOperator.java:845)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:92)</span><br><span class="line">	... 19 more</span><br><span class="line">, errorMessage=Cannot recover from this error:java.lang.RuntimeException: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:101)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.pushRecord(MapRecordSource.java:76)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordProcessor.run(MapRecordProcessor.java:419)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:267)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:250)</span><br><span class="line">	at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:381)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:82)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable$1.run(TaskRunner2Callable.java:69)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAs(Subject.java:422)</span><br><span class="line">	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:69)</span><br><span class="line">	at org.apache.tez.runtime.task.TaskRunner2Callable.callInternal(TaskRunner2Callable.java:39)</span><br><span class="line">	at org.apache.tez.common.CallableWithNdc.call(CallableWithNdc.java:36)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:125)</span><br><span class="line">	at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57)</span><br><span class="line">	at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:78)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.AssertionError: Output column number expected to be 0 when isRepeating</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector.setElement(BytesColumnVector.java:492)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorUDFMapIndexBaseScalar.evaluate(VectorUDFMapIndexBaseScalar.java:84)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorCoalesce.evaluate(VectorCoalesce.java:60)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression.evaluateChildren(VectorExpression.java:271)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.gen.FilterStringGroupColNotEqualStringGroupScalarBase.evaluate(FilterStringGroupColNotEqualStringGroupScalarBase.java:64)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.expressions.FilterExprAndExpr.evaluate(FilterExprAndExpr.java:42)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorFilterOperator.process(VectorFilterOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.vectorForward(Operator.java:966)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:939)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.TableScanOperator.process(TableScanOperator.java:125)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.deliverVectorizedRowBatch(VectorMapOperator.java:812)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.vector.VectorMapOperator.process(VectorMapOperator.java:845)</span><br><span class="line">	at org.apache.hadoop.hive.ql.exec.tez.MapRecordSource.processRow(MapRecordSource.java:92)</span><br><span class="line">	... 19 more</span><br><span class="line">], counters=Counters: 0</span><br></pre></td></tr></table></figure>

<p>解决方法是在hive-site.xml中添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.vectorized.execution.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="https://issues.apache.org/jira/browse/HIVE-20990?jql=project%20=%20HIVE%20AND%20component%20=%20Vectorization">https://issues.apache.org/jira/browse/HIVE-20990?jql=project%20%3D%20HIVE%20AND%20component%20%3D%20Vectorization</a></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据仓库</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>分布式计算</tag>
        <tag>数据仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose安装</title>
    <url>/2025/10/27/mongoose%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>首先，已经安装了 MongoDB 和 Node.js。</p>
<p>然后，用 npm 命令安装 Mongoose。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure>

<h1 id="gyp-ERR-build-error"><a href="#gyp-ERR-build-error" class="headerlink" title="gyp ERR! build error"></a>gyp ERR! build error</h1><p>如果安装过程中遇到以下错误，请尝试下面的解决方法：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">make: *** [Release/obj.target/kerberos/lib/kerberos.o] Error 1</span><br><span class="line">make: Leaving directory `/letv/DataInspector/node_modules/mongoose/node_modules/mongodb/node_modules/kerberos/build&#x27;</span><br><span class="line">gyp ERR! build error</span><br><span class="line">gyp ERR! stack Error: `make` failed with exit code: 2</span><br><span class="line">gyp ERR! stack     at ChildProcess.onExit (/letv/nodejs/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)</span><br><span class="line">gyp ERR! stack     at emitTwo (events.js:87:13)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:172:7)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)</span><br><span class="line">gyp ERR! System Linux 2.6.32-926.504.30.3.letv.el6.x86_64</span><br><span class="line">gyp ERR! command &quot;/letv/nodejs/bin/node&quot; &quot;/letv/nodejs/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;</span><br><span class="line">gyp ERR! cwd /letv/DataInspector/node_modules/mongoose/node_modules/mongodb/node_modules/kerberos</span><br><span class="line">gyp ERR! node -v v4.2.2</span><br><span class="line">gyp ERR! node-gyp -v v3.0.3</span><br><span class="line">gyp ERR! not ok</span><br></pre></td></tr></table></figure>

<p>（1）检查 python 是否安装以及版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 2.6.6</span><br></pre></td></tr></table></figure>

<p>（2）检查 g++ 版本</p>
<p>这个检查是借鉴网友的做法。（这块儿真心不懂，感谢度娘和google，还有热血网友^_^）</p>
<p>如果g++低于 4.8 需要升级g++版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC)</span><br></pre></td></tr></table></figure>

<p>升级方法参考：<a href="http://xg2007524.blog.51cto.com/869106/1337465">http://xg2007524.blog.51cto.com/869106/1337465</a></p>
<p>如果参考博文中的第二步“下载编译所需依赖库”不能自动完成的话，可以根据 contrib&#x2F;download_prerequisites 中的内容手动下载，并运行相应的命令完成操作。</p>
<p>完成 gcc 升级后，需要替换系统默认的g++</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/bin</span><br><span class="line">$ <span class="built_in">rm</span> -f g++</span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/bin/g++ g++</span><br><span class="line">$ g++ --version</span><br><span class="line">g++ (GCC) 4.8.2</span><br><span class="line">Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>

<p>g++ 升级完成，重新安装 mongoose 成功。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>lftp的sftp使用时遇到的坑</title>
    <url>/2019/05/07/lftp-%E7%9A%84-sftp-%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>今天在使用lftp的sftp时候一直处于connecting状态，并且没有其他提示信息。状态如下图所示：<br><img src="/images/202502/lftp-sftp.png" alt="lftp sftp"></p>
<p>导致这个问题的原因是，在sftp第一次连接服务器的时候需要接收服务端服务器的fingerprint，这个过程需要用户通过输入进行确认，如下图所示。但是这些提示信息被lftp掩盖了，所以connecting状态其实是sftp一直在等待用户的输入。解决方法是先在命令行使用sftp连接一次服务器，然后再使用lftp。</p>
<p><img src="/images/202502/continue-connecting.png" alt="Are you sure you want to continue connecting"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>数据采集</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx ngx_http_core_module location指令</title>
    <url>/2025/10/27/nginx-ngx-http-core-module-location%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">语法：location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">     location @name &#123; ... &#125;</span><br><span class="line">默认：—</span><br><span class="line">上下文：server, location</span><br></pre></td></tr></table></figure>

<p>为请求 URI（路径）设置配置。</p>
<p>路径匹配在 URI 规范化以后进行。规范化，就是先将 URI 中形如 “%XX” 的编码字符进行解码，再解析 URI 中的相对路径 “.” 和 “..” 部分，另外还可能会压缩相邻的两个或多个斜线成为一个斜线。</p>
<p>可以使用前缀字符串或者正则表达式定义路径。使用正则表达式需要在路径开始添加 “*” 前缀修饰语 （不区分大小写），或者 “” 修饰语（区分大小写）。为了匹配请求的 URI 路径，nginx 先检查前缀字符串定义的路径 (前缀路径)。在这些路径中，最长匹配前缀的路径会被选中并记住。然后 nginx 按在配置文件中的出现顺序检查正则表达式路径。第一个匹配的路径找到后检查会停止，并使用相应的配置。如果找不到匹配的正则表达式路径，那么就使用前面被记住的前缀路径的配置。</p>
<p>路径配置块可以嵌套，下面会提到一些例外。</p>
<p>像 Mac OS X 和 Cygwin 这种不区分大小写的操作系统，匹配前缀字符串忽略大小写(0.7.7)。但是，比较仅限于单字节的编码区域(one-byte locale)。</p>
<p>正则表达式中可以包含匹配组(0.7.40)，结果可以被后面的其他指令使用。</p>
<p>如果最大前缀匹配的路径以“^~”开始，那么nginx不再检查正则表达式。</p>
<p>使用“&#x3D;”前缀可以定义URI和路径的精确匹配。如果找到精确匹配，则终止查找。例如，如果 “&#x2F;” 请求频繁，定义 “location &#x3D; &#x2F;” 将提高这些请求的处理速度，因为查找过程在第一次比较以后即结束。这样的路径明显不可能包含嵌套路径。</p>
<blockquote>
<p>在 0.7.1 到 0.8.41 的版本中，如果一个请求匹配没有“&#x3D;” 和“^~”修饰符前缀的路径，查找也会终止，且正则表达式也不会检查。</p>
</blockquote>
<p>让我们以实力说明上面的情况：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">location = / <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">[</span> configuration A <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">location / <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">[</span> configuration B <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">location /documents/ <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">[</span> configuration C <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">location ^~ /images/ <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">[</span> configuration D <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">[</span> configuration E <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>“&#x2F;” 请求将匹配配置 A，“&#x2F;index.html” 请求将匹配配置B，“&#x2F;documents&#x2F;document.html” 请求将匹配配置C，“&#x2F;images&#x2F;1.gif” 请求将匹配配置D，“&#x2F;documents&#x2F;1.jpg” 请求将匹配配置E。</p>
<p>“@” 前缀定义一个命名的路径。这种路径不会用作常规请求的处理，仅用作请求转发。它们不能嵌套，并且不能包含嵌套路径。</p>
<p>如果一个路径用带有斜杠结尾的前缀字符串定义的，并且请求被 proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass 或者 memcached_pass中的一个处理，那么特定的处理会执行。在响应 URI 与该字符串相等的请求，但没有结尾的斜杠，一个带有 301 代码的固定转发将返回给追加斜杠的被请求 URI。如果不喜欢这样，可以像下面这样定义精确匹配 URI 的路径：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">location /user/ <span class="punctuation">&#123;</span></span><br><span class="line">  proxy_pass http<span class="punctuation">:</span><span class="comment">//user.example.com;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">location = /user <span class="punctuation">&#123;</span></span><br><span class="line">  proxy_pass http<span class="punctuation">:</span><span class="comment">//login.example.com;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>no matching cipher found问题一次解决经历</title>
    <url>/2019/12/10/no-matching-cipher-found-%E9%97%AE%E9%A2%98%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>本次问题解决纯属蒙对了，原理不清楚。</p>
<p>当我从一台CentOS 7.3的服务器通过ssh登录另外一台CentOS 6.8的服务器时出现以下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192-168-72-75 .ssh]# ssh -p65522 bddev@192.168.72.208</span><br><span class="line">no matching cipher found: client arcfour server chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com</span><br></pre></td></tr></table></figure>

<p>解决方法是在“192-168-72-75”服务器上修改<code>/etc/ssh/ssh_config</code>配置文件，添加以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">	 GSSAPIAuthentication yes</span><br><span class="line">     Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc</span><br><span class="line">     MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160</span><br></pre></td></tr></table></figure>

<p>以上内容在原配置文件中本来就有，可能只是注释掉了，修改的时候仔细核对下。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>org.apache.kafka.common.errors.TimeoutException</title>
    <url>/2017/08/24/org-apache-kafka-common-errors-TimeoutException/</url>
    <content><![CDATA[<p>使用<code>kafka-console-producer.sh</code>向远端Kafka写入数据时遇到以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --broker-list 172.16.72.202:9092 --topic <span class="built_in">test</span></span><br><span class="line">This is a message</span><br><span class="line">[2017-08-24 11:47:48,286] ERROR Error when sending message to topic <span class="built_in">test</span> with key: null, value: 17 bytes with error: (org.apache.kafka.clients.producer.internals.ErrorLoggingCallback)</span><br><span class="line">org.apache.kafka.common.errors.TimeoutException: Expiring 1 record(s) <span class="keyword">for</span> test-0: 1523 ms has passed since batch creation plus linger time</span><br><span class="line">八月 24, 2017 11:50:55 上午 sun.rmi.transport.tcp.TCPTransport<span class="variable">$AcceptLoop</span> executeAcceptLoop</span><br><span class="line">警告: RMI TCP Accept-0: accept loop <span class="keyword">for</span> ServerSocket[addr=0.0.0.0/0.0.0.0,localport=38175] throws</span><br><span class="line">java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host <span class="built_in">where</span> the RMI remote objects have been exported.</span><br><span class="line">	at sun.management.jmxremote.LocalRMIServerSocketFactory<span class="variable">$1</span>.accept(LocalRMIServerSocketFactory.java:114)</span><br><span class="line">	at sun.rmi.transport.tcp.TCPTransport<span class="variable">$AcceptLoop</span>.executeAcceptLoop(TCPTransport.java:400)</span><br><span class="line">	at sun.rmi.transport.tcp.TCPTransport<span class="variable">$AcceptLoop</span>.run(TCPTransport.java:372)</span><br><span class="line"> 	at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<p>在没有配置<code>advertised.host.name</code>的情况下，Kafka并没有广播我们配置的<code>host.name</code>，而是广播了主机配置的hostname。远端的客户端并没有配置hosts，所以自然是连接不上这个hostname的，所以在远端客户端配置hosts。在客户端<code>/etc/hosts</code>中添加以下内容后问题解决：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">172.16.72.202 172-16-72-202</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>实时计算</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>消息队列</tag>
        <tag>实时计算</tag>
      </tags>
  </entry>
  <entry>
    <title>pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar</title>
    <url>/2021/08/17/pentaho-aggdesigner-algorithm-5-1-5-jhyde-jar/</url>
    <content><![CDATA[<p>Maven编译时无法自动下载<a href="/images/202502/pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar">pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar</a>，需要手动下载并安装到本地仓库。安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=./pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar -DgroupId=org.pentaho -DartifactId=pentaho-aggdesigner-algorithm -Dversion=5.1.5-jhyde -Dpackaging=jar</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>npm安装时无法访问github域名的解决方法</title>
    <url>/2021/11/10/npm%E5%AE%89%E8%A3%85%E6%97%B6%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEgithub%E5%9F%9F%E5%90%8D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天在用<code>npm install</code>的时候出现了github项目访问不了的异常：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm ERR! Error while executing:</span><br><span class="line">npm ERR! /bin/git ls-remote -h -t https://github.com/nhn/raphael.git</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! fatal: unable to access &#x27;https://github.com/nhn/raphael.git/&#x27;: Encountered end of file</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! exited with error code: 128</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/ycs/.npm/_logs/2021-11-10T09_14_23_017Z-debug.log</span><br></pre></td></tr></table></figure>

<p>ping及curl测试都无法访问。但服务器是可以访问互联网的，怀疑是被墙了。</p>
<p>从网址<a href="https://websites.ipaddress.com/github.com">https://websites.ipaddress.com/github.com</a>查询GitHub的IP地址。</p>
<p><img src="/images/202502/github-ip.png" alt="GitHub IP"></p>
<p>添加hosts配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">140.82.114.3 github.com</span><br></pre></td></tr></table></figure>

<p>问题解决。</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Node.js</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx ngx_http_core_module 内置变量</title>
    <url>/2025/10/27/nginx-ngx-http-core-module-%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>ngx_http_core_module 模块支持与 Apache 服务器相同名称的内置变量。首先，这些都是表示客户端请求头字段的变量，例如 $http_user_agent 、$http_cookie 等等。还有其他变量：</p>
<p>$arg_name</p>
<p>请求行中的参数名称</p>
<p>$args</p>
<p>请求行中的参数</p>
<p>$binary_remote_addr</p>
<p>二进制形式的客户端地址，值的长度总是 4 个字节</p>
<p>$body_bytes_sent</p>
<p>发送给客户端的字节数，不算响应头；这个变量兼容 mod_log_config Apache 模块的“%B”参数。</p>
<p>$bytes_sent</p>
<p>发送给客户端的字节数(1.3.8, 1.2.5)</p>
<p>$connection</p>
<p>连接序列数(1.3.8, 1.2.5)</p>
<p>$connection_requests</p>
<p>一个连接产生的当前请求数 (1.3.8, 1.2.5)</p>
<p>$content_length</p>
<p>请求头变量“Content-Length”</p>
<p>$content_type</p>
<p>请求头变量“Content-Type”</p>
<p>$cookie_name</p>
<p>cookie 名称</p>
<p>$document_root</p>
<p>当前请求的 root 或 alias 指令的值</p>
<p>$document_uri</p>
<p>同 $uri</p>
<p>$host</p>
<p>按照这个优先级顺序：请求行的主机名，请求头参数“Host” 中的主机名，匹配请求的服务器名称</p>
<p>$hostname</p>
<p>主机名称</p>
<p>$http_name</p>
<p>任意请求头参数；变量名的最后部分是转成小写的参数名，并且用下划线替换破折号。</p>
<p>$https</p>
<p>“on”如果连接运行在 SSL 模式，否则是一个空字符串。</p>
<p>$is_args</p>
<p>“?”如果请求行有参数，否则是一个空字符串。</p>
<p>$limit_rate</p>
<p>设置这个变量启用响应频率限制；参见 <a href="https://link.zhihu.com/?target=http://nginx.org/en/docs/http/ngx_http_core_module.html%23limit_rate">limit_rate</a></p>
<p>$msec</p>
<p>以毫秒为单位的当前时间的秒数 (1.3.9, 1.2.6)</p>
<p>$nginx_version</p>
<p>nginx 版本</p>
<p>$pid</p>
<p>工作进程的 PID</p>
<p>$pipe</p>
<p>如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7)</p>
<p>$proxy_protocol_addr</p>
<p>获取代理代理协议头的客户端地址，如果是直接访问，该值为空字符串。(1.5.12)<br>代理协议必须预先在 listen 指令中通过设置 proxy_protocol 参数启用。</p>
<p>$query_string</p>
<p>同 $args</p>
<p>$realpath_root</p>
<p>当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。</p>
<p>$remote_addr</p>
<p>客户端地址</p>
<p>$remote_port</p>
<p>客户端端口</p>
<p>$remote_user</p>
<p>用于HTTP基础认证服务的用户名</p>
<p>$request</p>
<p>完整的原始请求行</p>
<p>$request_body</p>
<p>请求体<br>此变量可在 location 中使用，将请求主体通过 proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass 传递给下一级的代理服务器。</p>
<p>$request_body_file</p>
<p>将客户端请求主体保存在临时文件中。处理过程接收后，需要删除这个文件。如果一直将请求体写入一个文件， client_body_in_file_only 需要被启用。如果一个临时文件的名称是在代理请求中传递的，或者在请求中传递给一个 FastCGI&#x2F;uwsgi&#x2F;SCGI 服务器， 传递请求体需要分别禁用 proxy_pass_request_body off 、 fastcgi_pass_request_body off 、 uwsgi_pass_request_body off 或者 scgi_pass_request_body off 指令。</p>
<p>$request_completion</p>
<p>如果请求完成，则值为“OK”，否则为空字符串。</p>
<p>$request_filename</p>
<p>当前请求的文件路径，基于 root 或者 alias 指令，以及 URI。</p>
<p>$request_length</p>
<p>请求长度（包含请求行、头和请求体）(1.3.12, 1.2.7)</p>
<p>$request_method</p>
<p>请求方法，通常是 “GET” 或者 “POST”</p>
<p>$request_time</p>
<p>请求处理时间秒数，精度到毫秒(1.3.9, 1.2.6)；从客户端第一个字节被读取开始。</p>
<p>$request_uri</p>
<p>完整的请求 URI （带参数）</p>
<p>$scheme</p>
<p>请求方案，“http” 或 “https”</p>
<p>$sent_http_name</p>
<p>自定义影响头字段；变量名的最后部分是破折号替换为下划线并且转换为小写字符的字段名字。</p>
<p>$server_addr</p>
<p>接受请求的服务器地址<br>计算这个变量的值通常需要一个系统调用。为了避免系统调用，listen指令必须指定地址，并且使用绑定参数。</p>
<p>$server_name</p>
<p>接受请求的服务器名称</p>
<p>$server_port</p>
<p>接受请求的服务器端口</p>
<p>$server_protocol</p>
<p>请求协议，通常是 “HTTP&#x2F;1.0” 、 “HTTP&#x2F;1.1” 或者 “HTTP&#x2F;2.0”</p>
<p>$status</p>
<p>响应状态(1.3.2, 1.2.2)</p>
<p>$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space</p>
<p>关于客户端 TCP 连接的信息；在支持 TCP_INFO</p>
<p>套接字的系统上可用。</p>
<p>$time_iso8601</p>
<p>ISO 8601 标准格式的本地时间(1.3.12, 1.2.7)</p>
<p>$time_local</p>
<p>Common Log 格式的本地时间(1.3.12, 1.2.7)</p>
<p>$uri</p>
<p>当前请求标准化的 URI<br>$uri 的值在请求处理过程中可能改变，例如，当内部转发，或者使用索引文件时。</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>pip安装指定版本的包</title>
    <url>/2019/03/19/pip-%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%85/</url>
    <content><![CDATA[<p>使用以下命令安装指定版本的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pyspark==2.3.3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pdsh@frin: localhost: rcmd: socket: Permission denied</title>
    <url>/2021/12/06/pdsh-frin-localhost-rcmd-socket-Permission-denied/</url>
    <content><![CDATA[<p>在部署单节点Hadoop集群时，执行<code>sbin/start-dfs.sh</code>出现以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sbin/start-dfs.sh</span></span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">pdsh@frin: localhost: rcmd: socket: Permission denied</span><br><span class="line">Starting datanodes</span><br><span class="line">pdsh@frin: localhost: rcmd: socket: Permission denied</span><br><span class="line">Starting secondary namenodes [frin]</span><br><span class="line">pdsh@frin: frin: rcmd: socket: Permission denied</span><br></pre></td></tr></table></figure>

<p>解决方法：在<code>/etc/pdsh/</code>下创建<code>rcmd_default</code>文件，输入内容：ssh。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式存储</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Hadoop</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native windows 系统本地图片不能显示问题</title>
    <url>/2025/10/27/react-native-windows-%E7%B3%BB%E7%BB%9F%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在 windows 开发环境下，使用 React Native 的 Image UI 组件通过相对路径加载本地图片显示不出来，可以通过修改 react native 源代码解决。但是，通过这种方式不确定是否会引起其他平台下新的问题。</p>
<p>将文件 packager&#x2F;react-packager&#x2F;src&#x2F;Bundler&#x2F;index.js 中的下面一行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">httpServerLocation</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;/assets&#x27;</span>, path.<span class="title function_">dirname</span>(relPath)),</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">httpServerLocation</span>: path.<span class="title function_">join</span>(<span class="string">&#x27;assets&#x27;</span>, path.<span class="title function_">dirname</span>(relPath)),</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>qt.qpa.plugin: Could not find the Qt platform plugin &quot;dxcb&quot; in &quot;&quot;</title>
    <url>/2025/01/27/qt-qpa-plugin-Could-not-find-the-Qt-platform-plugin-dxcb-in/</url>
    <content><![CDATA[<p>我遇到的场景是，在Deepin系统终端中运行PySide应用时，没有错误提示，但在VS Code中运行时，出现以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">qt.qpa.plugin: Could not find the Qt platform plugin &quot;dxcb&quot; in &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>我本地的环境信息如下：</p>
<ul>
<li>操作系统：Deepin 23社区版</li>
<li>Python版本：Python 3.12.8</li>
<li>PySide版本：PySide 6.6.3</li>
</ul>
<p>快速解决方法是，在VS Code配置中设置如下环境变量：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">QT_QPA_PLATFORM=xcb</span><br></pre></td></tr></table></figure>

<p>打开设置，搜索env，找到Linux的Env设置，如下图：<img src="/images/202501/24.png"></p>
<p>点击<code>Edit in settings.json</code>，在配置文件中添加以下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;QT_QPA_PLATFORM&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xcb&quot;</span></span><br></pre></td></tr></table></figure>

<p>添加后的效果如下图：<img src="/images/202501/25.png"></p>
<p>再次运行PySide应用，没有错误信息了。</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Deepin</tag>
        <tag>Python</tag>
        <tag>VS Code</tag>
        <tag>PySide6</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>sed变量中特殊字符/处理方式</title>
    <url>/2021/04/26/sed%E5%8F%98%E9%87%8F%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6-%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>如果变量值中包含斜杠（&#x2F;）特殊字符，在使用sed命令的做行内字符串替换时可以使用井号（#）做为sed语法分隔符，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GITLAB_PROJECT_CLONE_URL=ssh://git@192.168.1.10:50022/test/Documentation.git</span><br><span class="line">sed -i &quot;11s#GITLAB_PROJECT_CLONE_URL#$GITLAB_PROJECT_CLONE_URL#&quot; config.xml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell -c</title>
    <url>/2020/12/03/shell-c/</url>
    <content><![CDATA[<p><code>shell -c &#123;string&#125;</code>：表示命令从<code>-c</code>后的字符串读取。在需要使用管道或者重定向需要sudo时很有用，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> find ../*/exportFiles -mtime +15 -name <span class="string">&quot;*&quot;</span> | xargs -I &#123;&#125; <span class="built_in">rm</span> -rf &#123;&#125;</span></span><br><span class="line">rm: cannot remove `i_20201108_CONTENTINFO_xy_001.dat&#x27;: Permission denied</span><br></pre></td></tr></table></figure>

<p>按照以下方式处理即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;find ../*/exportFiles -mtime +15 -name &quot;*&quot; | xargs -I &#123;&#125; rm -rf &#123;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>pip国内镜像源配置</title>
    <url>/2025/05/27/pip%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>以清华大学镜像源为例：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<h1 id="单次使用镜像源"><a href="#单次使用镜像源" class="headerlink" title="单次使用镜像源"></a>单次使用镜像源</h1><p>在pip安装命令后添加<code>-i</code>参数指定镜像源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install package_name -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h1 id="永久配置镜像源"><a href="#永久配置镜像源" class="headerlink" title="永久配置镜像源"></a>永久配置镜像源</h1><h2 id="使用命令配置"><a href="#使用命令配置" class="headerlink" title="使用命令配置"></a>使用命令配置</h2><p>简单的方式是使用命令配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h2 id="修改pip配置文件"><a href="#修改pip配置文件" class="headerlink" title="修改pip配置文件"></a>修改pip配置文件</h2><p>创建或修改pip配置文件：</p>
<ul>
<li>Linux&#x2F;MacOS: ~&#x2F;.pip&#x2F;pip.conf</li>
<li>Windows: %APPDATA%\pip\pip.ini 或 %USERPROFILE%\pip\pip.ini</li>
</ul>
<p>添加以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<h1 id="常用国内镜像源"><a href="#常用国内镜像源" class="headerlink" title="常用国内镜像源"></a>常用国内镜像源</h1><ul>
<li>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>
<li>阿里云：<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></li>
<li>中国科技大学：<a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li>
</ul>
<h1 id="恢复默认源"><a href="#恢复默认源" class="headerlink" title="恢复默认源"></a>恢复默认源</h1><p>删除配置文件或运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">unset</span> global.index-url</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>sudoers文件修改格式错误恢复</title>
    <url>/2021/12/27/sudoers%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<p>异常信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo -i</span><br><span class="line">&gt;&gt;&gt; /etc/sudoers.d/dev: 语法错误 near line 1 &lt;&lt;&lt;</span><br><span class="line">sudo: /etc/sudoers.d/dev 中第 1 行附近有解析错误</span><br><span class="line">sudo: 没有找到有效的 sudoers 资源，退出</span><br><span class="line">sudo: 无法初始化策略插件</span><br></pre></td></tr></table></figure>

<p>使用以下命令编辑sudoers文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkexec visudo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>timed out waiting for input: auto-logout</title>
    <url>/2025/10/27/timed-out-waiting-for-input-auto-logout/</url>
    <content><![CDATA[<p>发生这个的原因是系统设置了等待用户输入 time out （超时）参数。登陆系统，执行以下命令可以查看参数值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 ~]# <span class="built_in">echo</span> <span class="variable">$TMOUT</span></span><br><span class="line">120</span><br></pre></td></tr></table></figure>

<p>当前参数是 120 秒，所以很快就超时自动退出。解决方法是在 &#x2F;etc&#x2F;profile 中修改该参数的值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 ~]# vi /etc/profile</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;etc&#x2F;profile 末尾增加一下配置，将超时时间改为 10 小时。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TMOUT=36000</span><br><span class="line"><span class="built_in">export</span> TMOUT</span><br></pre></td></tr></table></figure>

<p>保存，退出系统并重新登录，或者执行以下命令生效新配置参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm-10-176-30-167 ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line">[root@vm-10-176-30-167 ~]# <span class="built_in">echo</span> <span class="variable">$TMOUT</span></span><br><span class="line">36000</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>spacemacs gnuplot</title>
    <url>/2017/02/27/spacemacs-gnuplot/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Ubuntu 16.10</li>
<li>Emacs 24</li>
</ul>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="spacemacs安装"><a href="#spacemacs安装" class="headerlink" title="spacemacs安装"></a>spacemacs安装</h2><ol>
<li>安装Emacs</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install emacs</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装spacemacs</li>
</ol>
<p>（1）如果已经存在Emacs配置文件，首先备份：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mv</span> .emacs.d .emacs.d.bak</span><br><span class="line"><span class="built_in">mv</span> .emacs .emacs.bak</span><br></pre></td></tr></table></figure>

<p>不要忘记备份并移动<code>~/.emacs</code>文件，否则Spacemacs将不能加载，因为这个文件阻止从适当的初始化文件加载。</p>
<p>（2）clone配置仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/syl20bnr/spacemacs ~/.emacs.d</span><br></pre></td></tr></table></figure>

<p>master分支是稳定不能修改的分支，不要做任何修改，否则会破坏更新机制。使用develop分支可以安全的手动处理更新。</p>
<p>（3）【可选】安装<a href="https://github.com/adobe-fonts/source-code-pro">Source Code Pro</a> 字体：</p>
<p>即使在终端运行也需要改变终端字体设置。</p>
<p>（4）启动Emacs。Spacemacs会自动安装它需要的包。如果看到跟包下载相关的错误，那么可以尝试通过以下命令启动emacs禁用HTTPS协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emacs --insecure</span><br></pre></td></tr></table></figure>

<p>或者可以设置隐藏文件中的dotspacemacs-elpa-https为nil，这样启动emacs的时候就不需要<code>--insecure</code>参数了。可以清理<code>.emacs.d/elpa</code>目录，这样任何已经下载的可能引起错误的包会重新安装。</p>
<p>（5）重新启动emacs完成安装。</p>
<h2 id="spacemacs安装镜像"><a href="#spacemacs安装镜像" class="headerlink" title="spacemacs安装镜像"></a>spacemacs安装镜像</h2><p>如果不使用镜像spacemacs安装会很慢，甚至卡死。我使用的是<a href="http://www.4gamers.cn/">ELPA镜像</a>。</p>
<h2 id="安装gnuplot"><a href="#安装gnuplot" class="headerlink" title="安装gnuplot"></a>安装gnuplot</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install gnuplot</span><br></pre></td></tr></table></figure>

<h1 id="gnuplot测试"><a href="#gnuplot测试" class="headerlink" title="gnuplot测试"></a>gnuplot测试</h1><p>编辑org文件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#+PLOT: title:&quot;Citas&quot; ind:1 deps:(3) type:2d with:histograms set:&quot;yrange [0:]&quot;</span><br><span class="line">     | Sede      | Max cites | H-index |</span><br><span class="line">     |-----------+-----------+---------|</span><br><span class="line">     | Chile     |    257.72 |   21.39 |</span><br><span class="line">     | Leeds     |    165.77 |   19.68 |</span><br><span class="line">     | Sao Paolo |     71.00 |   11.50 |</span><br><span class="line">     | Stockholm |    134.19 |   14.33 |</span><br><span class="line">     | Morelia   |    257.56 |   17.67 |</span><br></pre></td></tr></table></figure>

<p>运行命令<code>M-x org-plot/gnuplot</code></p>
<blockquote>
<p>如果命令运行报错：cannot open load file no such file or directory, gnuplot。原因是没有安装<code>gnuplot.el</code>。运行命令<code>M-x package-install RET gnuplot RET</code><br>参考网址：<a href="https://github.com/bruceravel/gnuplot-mode">https://github.com/bruceravel/gnuplot-mode</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Emacs</category>
      </categories>
      <tags>
        <tag>Emacs</tag>
      </tags>
  </entry>
  <entry>
    <title>[: ==: unary operator expected</title>
    <url>/2025/09/29/unary-operator-expected/</url>
    <content><![CDATA[<p>Shell 脚本报错：“line 10: [: &#x3D;: unary operator expected”。根据提示信息找到报错的程序是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$OPERATION</span> == <span class="string">&quot;scp&quot;</span> ]; <span class="keyword">then</span></span><br></pre></td></tr></table></figure>

<p>报错原因是变量 OPERATION 的值为空，那么程序就变成了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ == <span class="string">&quot;scp&quot;</span> ]; <span class="keyword">then</span></span><br></pre></td></tr></table></figure>

<p>显然 [ 和 “scp” 不相等并且缺少了 [ 符号，所以报了这样的错误。检查程序发现是 OPERATION 在声明的时候写错导致的。这样的错误还是很隐蔽的，所以为了增强程序的健壮性可以用下面的写法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;OPERATION&#125;</span>x&quot;</span> == <span class="string">&quot;scpx&quot;</span> ]; <span class="keyword">then</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>vi忽略大小写搜索</title>
    <url>/2021/08/27/vi%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>先set ignorecase，如下图：</p>
<p><img src="/images/202501/setIgnorecase.png" alt="set ignorecase"></p>
<p>然后再进行搜索：</p>
<p><img src="/images/202501/search.png" alt="search"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>wget下载文件重命名</title>
    <url>/2025/10/27/wget%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -c <span class="string">&#x27;https://camel-builds.s3.amazonaws.com/ActiveTcl/x86_64-linux-glibc-2.17/20210816T193804Z/ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz?****************=***************************=******************************************-east-1%2Fs3%2F***********&amp;X-Amz-Date=20220224T060023Z&amp;*******************************=host&amp;***********=****************************************************************&#x27;</span></span><br><span class="line">--2022-02-24 06:01:04--  https://camel-builds.s3.amazonaws.com/ActiveTcl/x86_64-linux-glibc-2.17/20210816T193804Z/ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz?****************=***************************=************************************-east-1%2Fs3%2F***********&amp;X-Amz-Date=20220224T060023Z&amp;*******************************=host&amp;***********=*****************************************************</span><br><span class="line">Resolving camel-builds.s3.amazonaws.com (camel-builds.s3.amazonaws.com)... 52.216.240.84</span><br><span class="line">Connecting to camel-builds.s3.amazonaws.com (camel-builds.s3.amazonaws.com)|52.216.240.84|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 27637315 (26M) [application/gzip]</span><br><span class="line">ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz?****************=*********************************************************************-east-1%2Fs3%2F***********&amp;X-Amz-Date=20220224T060023Z&amp;*******************************=host&amp;***********=****************************************************************: File name too long</span><br><span class="line"></span><br><span class="line">Cannot write to <span class="string">&#x27;ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz?****************=********************************************************************-east-1%2Fs3%2F***********&amp;X-Amz-Date=20220224T060023Z&amp;*******************************=host&amp;***********=***************************************************************&#x27;</span> (Success).</span><br></pre></td></tr></table></figure>

<p>因为写入文件名太长了，导致写入失败，方法是对下载文件重命名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -c <span class="string">&#x27;https://camel-builds.s3.amazonaws.com/ActiveTcl/x86_64-linux-glibc-2.17/20210816T193804Z/ActiveTcl-8.6.11.1.0000-x86_64-linux-glibc-2.17-e4e2f327.tar.gz?****************=**********************************************************************-east-1%2Fs3%2F***********&amp;X-Amz-Date=20220224T060023Z&amp;*******************************=host&amp;***********=***************************************************************&#x27;</span> -O tcl-8.6.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>URL 做了脱敏处理，否则在 Hexo 部署时会出现异常。间另外一篇博文：<a href="https://www.zhangjc.com/2025/10/28/Hexo-%E9%83%A8%E7%BD%B2%E6%97%B6%E5%87%BA%E7%8E%B0-Push-cannot-contain-secrets-%E5%BC%82%E5%B8%B8/">Hexo 部署时出现 Push cannot contain secrets 异常</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Rsyslog将Nginx Access Log写入Kafka</title>
    <url>/2019/03/15/%E4%BD%BF%E7%94%A8-Rsyslog-%E5%B0%86-Nginx-Access-Log-%E5%86%99%E5%85%A5-Kafka/</url>
    <content><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul>
<li>CentOS Linux release 7.3.1611</li>
<li>kafka_2.12-0.10.2.2</li>
<li>nginx&#x2F;1.12.2</li>
<li>rsyslog-8.24.0-34.el7.x86_64.rpm</li>
</ul>
<h1 id="创建测试Topic"><a href="#创建测试Topic" class="headerlink" title="创建测试Topic"></a>创建测试Topic</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./kafka-topics.sh --zookeeper 192.168.72.25:2181/kafka --create --topic develop-test-topic --partitions 10 --replication-factor 3</span><br></pre></td></tr></table></figure>

<h1 id="RSyslog安装"><a href="#RSyslog安装" class="headerlink" title="RSyslog安装"></a>RSyslog安装</h1><p>一般系统自带RSyslog服务无需另外安装。但是因为数据需要通过RSyslog的omkafka模块写入到Kafka，而omkafka在RSyslog的v8.7.0+版本才支持，所以要看当前系统中RSyslog的版本是否需要升级。使用以下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rsyslogd -v</span></span><br><span class="line">rsyslogd 7.4.7, compiled with:</span><br><span class="line">	FEATURE_REGEXP:				Yes</span><br><span class="line">	FEATURE_LARGEFILE:			No</span><br><span class="line">	GSSAPI Kerberos 5 support:		Yes</span><br><span class="line">	FEATURE_DEBUG (debug build, slow code):	No</span><br><span class="line">	32bit Atomic operations supported:	Yes</span><br><span class="line">	64bit Atomic operations supported:	Yes</span><br><span class="line">	Runtime Instrumentation (slow code):	No</span><br><span class="line">	uuid support:				Yes</span><br><span class="line"></span><br><span class="line">See http://www.rsyslog.com <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure>

<p>执行以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum install rsyslog</span></span><br></pre></td></tr></table></figure>

<p>安装依赖关系如下：<img src="/images/202501/RSyslog%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png"></p>
<h1 id="添加omkafka模块"><a href="#添加omkafka模块" class="headerlink" title="添加omkafka模块"></a>添加omkafka模块</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install rsyslog-kafka</span></span><br></pre></td></tr></table></figure>

<h1 id="RSyslog-Client-Nginx配置"><a href="#RSyslog-Client-Nginx配置" class="headerlink" title="RSyslog Client Nginx配置"></a>RSyslog Client Nginx配置</h1><p>注意，Nginx 1.7.1之后才支持syslog的方式处理日志。具体配置项参见官网文档<a href="https://nginx.org/en/docs/syslog.html">Logging to syslog</a>。</p>
<p>Nginx配置主要是日志格式和Access Log配置项：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 11000;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://10.16.0.144:11000;</span><br><span class="line">        access_log syslog:server=localhost,facility=local7,tag=nginx11000Root,severity=info main;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RSyslog-Server端配置"><a href="#RSyslog-Server端配置" class="headerlink" title="RSyslog Server端配置"></a>RSyslog Server端配置</h1><p>RSyslog的主配置文件<code>/etc/rsyslog.conf</code>，其中会包含引入<code>/etc/rsyslog.d</code>下扩展名为<code>conf</code>的配置文件。</p>
<p>修改配置文件<code>/etc/rsyslog.conf</code>将下面两行前面的注释去掉：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ModLoad imudp</span><br><span class="line">$ UDPServerRun 514</span><br></pre></td></tr></table></figure>

<p>在<code>/etc/rsyslog.d</code>目录下创建<code>rsyslog_nginx_kafka_cluster.conf</code>，配置内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">module(load=&quot;imudp&quot;)</span><br><span class="line">input(type=&quot;imudp&quot; port=&quot;514&quot;)</span><br><span class="line"></span><br><span class="line"># nginx access log ==&gt; rsyslog server(local) ==&gt; kafka</span><br><span class="line">module(load=&quot;omkafka&quot;)</span><br><span class="line"></span><br><span class="line">template(name=&quot;nginx-11000-root&quot; type=&quot;string&quot; string=&quot;%msg%&quot;)</span><br><span class="line"></span><br><span class="line">if $inputname == &quot;imudp&quot; then &#123;</span><br><span class="line">    if ($programname == &quot;nginx11000Root&quot;) then</span><br><span class="line">        action(type=&quot;omkafka&quot;</span><br><span class="line">            template=&quot;nginx-11000-root&quot;</span><br><span class="line">            broker=[&quot;192.168.72.10:9092&quot;,&quot;192.168.72.20:9092&quot;,&quot;192.168.72.25:9092&quot;,&quot;192.168.72.26:9092&quot;,&quot;192.168.72.27:9092&quot;,&quot;192.168.72.48:9092&quot;,&quot;192.168.72.55:9092&quot;,&quot;192.168.72.80:9092&quot;,&quot;192.168.72.81:9092&quot;,&quot;192.168.72.97:9092&quot;]</span><br><span class="line">            topic=&quot;develop-test-topic&quot;</span><br><span class="line">            partitions.auto=&quot;on&quot;</span><br><span class="line">            confParam=[</span><br><span class="line">                &quot;socket.keepalive.enable=true&quot;</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:rawmsg, contains, &quot;nginx11000Root&quot; ~</span><br></pre></td></tr></table></figure>

<h1 id="联调测试"><a href="#联调测试" class="headerlink" title="联调测试"></a>联调测试</h1><p>启动RSyslog服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># service rsyslog start</span><br><span class="line">Redirecting to /bin/systemctl start  rsyslog.service</span><br></pre></td></tr></table></figure>

<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="syslog-tag-只能包含字母和数字"><a href="#syslog-tag-只能包含字母和数字" class="headerlink" title="syslog tag 只能包含字母和数字"></a>syslog tag 只能包含字母和数字</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nginx -t</span><br><span class="line">nginx: [emerg] syslog &quot;tag&quot; only allows alphanumeric characters and underscore in     /etc/nginx/conf.d/jx-11000-jenkins149-36-144.conf:7</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test failed</span><br></pre></td></tr></table></figure>

<h2 id="‘omkafka’-is-unknown"><a href="#‘omkafka’-is-unknown" class="headerlink" title="‘omkafka’ is unknown"></a>‘omkafka’ is unknown</h2><p>RSyslog中没有包含omkafka模块，需要另外安装。查看<code>/var/log/messages</code>日志信息会有以下提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tail -f messages</span></span><br><span class="line">Mar 15 15:13:40 192-168-72-29 systemd: Started System Logging Service.</span><br><span class="line">Mar 15 15:13:40 192-168-72-29 rsyslogd: could not load module <span class="string">&#x27;/usr/lib64/rsyslog/omkafka.so&#x27;</span>, dlopen:     /usr/lib64/rsyslog/omkafka.so: cannot open shared object file: No such file or directory  [v8.24.0-34.el7 try     http://www.rsyslog.com/e/2066 ]</span><br><span class="line">Mar 15 15:13:40 192-168-72-29 rsyslogd: could not load module <span class="string">&#x27;/usr/lib64/rsyslog/omkafka.so&#x27;</span>, dlopen:     /usr/lib64/rsyslog/omkafka.so: cannot open shared object file: No such file or directory  [v8.24.0-34.el7 try     http://www.rsyslog.com/e/2066 ]</span><br><span class="line">Mar 15 15:13:40 192-168-72-29 rsyslogd: module name <span class="string">&#x27;omkafka&#x27;</span> is unknown [v8.24.0-34.el7 try     http://www.rsyslog.com/e/2209 ]</span><br><span class="line">Mar 15 15:13:40 192-168-72-29 rsyslogd: module name <span class="string">&#x27;omkafka&#x27;</span> is unknown [v8.24.0-34.el7 try     http://www.rsyslog.com/e/2209 ]</span><br></pre></td></tr></table></figure>

<h2 id="CentOS-6-5升级Rsyslog"><a href="#CentOS-6-5升级Rsyslog" class="headerlink" title="CentOS 6.5升级Rsyslog"></a>CentOS 6.5升级Rsyslog</h2><p>CentOS 6.5自带的RSyslog版本是<code>rsyslogd 5.8.10</code>。按照以下方式安装新版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line"><span class="comment"># wget http://rpms.adiscon.com/v8-stable/rsyslog.repo</span></span><br><span class="line"><span class="comment"># yum install rsyslog</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>Rsyslog</tag>
        <tag>数据采集</tag>
        <tag>Nginx</tag>
        <tag>大数据</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 systemd 管理 MySQL 服务</title>
    <url>/2025/10/11/%E4%BD%BF%E7%94%A8-systemd-%E7%AE%A1%E7%90%86-MySQL-%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="创建-systemd-服务文件"><a href="#创建-systemd-服务文件" class="headerlink" title="创建 systemd 服务文件"></a>创建 systemd 服务文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/systemd/system/mysql.service</span><br></pre></td></tr></table></figure>

<p>在文件中添加以下内容（根据个人的实际安装路径调整）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MySQL Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=mysql</span><br><span class="line"><span class="attr">Group</span>=mysql</span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="attr">TimeoutSec</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">PermissionsStartOnly</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ExecStartPre</span>=/usr/bin/mkdir -p /var/run/mysqld</span><br><span class="line"><span class="attr">ExecStartPre</span>=/usr/bin/chown mysql:mysql /var/run/mysqld</span><br><span class="line"><span class="attr">ExecStart</span>=/opt/mysql/bin/mysqld</span><br><span class="line"><span class="attr">ExecStop</span>=/opt/mysql/bin/mysqladmin -u root shutdown</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">5000</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure>

<h1 id="创建必要的目录和权限"><a href="#创建必要的目录和权限" class="headerlink" title="创建必要的目录和权限"></a>创建必要的目录和权限</h1><p>在 MySQL 配置文件中做如下配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">socket</span> = /var/run/mysqld/mysqld.sock</span><br><span class="line"><span class="attr">pid-file</span> = /var/run/mysqld/mysqld.pid</span><br><span class="line"><span class="attr">basedir</span> = /opt/mysql</span><br><span class="line"><span class="attr">datadir</span>	= /opt/mysql/data</span><br><span class="line"><span class="attr">log-error</span> = /var/log/mysql/error.log</span><br><span class="line"><span class="attr">plugin-dir</span> = /opt/mysql/lib/plugin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建运行目录</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /var/run/mysqld</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> mysql:mysql /var/run/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志目录（如果不存在）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /var/log/mysql</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> mysql:mysql /var/log/mysql</span><br></pre></td></tr></table></figure>

<h1 id="重新加载-systemd-配置"><a href="#重新加载-systemd-配置" class="headerlink" title="重新加载 systemd 配置"></a>重新加载 systemd 配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h1 id="启用-MySQL-开机启动"><a href="#启用-MySQL-开机启动" class="headerlink" title="启用 MySQL 开机启动"></a>启用 MySQL 开机启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mysql</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /etc/systemd/system/mysql.service.</span><br></pre></td></tr></table></figure>

<h1 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start mysql</span><br></pre></td></tr></table></figure>

<h1 id="查看-MySQL-服务状态"><a href="#查看-MySQL-服务状态" class="headerlink" title="查看 MySQL 服务状态"></a>查看 MySQL 服务状态</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status mysql</span><br></pre></td></tr></table></figure>

<h1 id="停止-MySQL-服务"><a href="#停止-MySQL-服务" class="headerlink" title="停止 MySQL 服务"></a>停止 MySQL 服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop mysql</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用通用二进制文件在Ubuntu上安装MySQL</title>
    <url>/2025/09/29/%E4%BD%BF%E7%94%A8%E9%80%9A%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><ul>
<li>Ubuntu 24.04.3 LTS</li>
<li>MySQL Community Server 8.4.6 LTS</li>
</ul>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a>。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>MySQL 依赖 libaio 库，使用以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-cache search libaio</span><br><span class="line">libaio-dev - Linux kernel AIO access library - development files</span><br><span class="line">libaio1t64 - Linux kernel AIO access library - shared library</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install libaio1t64 libaio-dev</span><br></pre></td></tr></table></figure>

<p>在安装位置解压下载的二进制包，我的安装位置在 &#x2F;opt。为了后续访问方便，加压后创建目录软连接。需使用 root 权限进行安装，所以先切换至 root 后进行后续的安装操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> -s</span><br><span class="line"><span class="comment"># xz -d mysql-8.4.6-linux-glibc2.28-x86_64.tar.xz</span></span><br><span class="line"><span class="comment"># tar xvf mysql-8.4.6-linux-glibc2.28-x86_64.tar</span></span><br><span class="line"><span class="comment"># ln -s mysql-8.4.6-linux-glibc2.28-x86_64 mysql</span></span><br><span class="line"><span class="comment"># ll</span></span><br><span class="line">总计 16</span><br><span class="line">drwxr-xr-x  4 root root 4096  9月 29 17:08 ./</span><br><span class="line">drwxr-xr-x 23 root root 4096  9月  4 13:25 ../</span><br><span class="line">lrwxrwxrwx  1 root root   34  9月 29 17:08 mysql -&gt; mysql-8.4.6-linux-glibc2.28-x86_64/</span><br><span class="line">drwxrwxr-x  9 root root 4096  9月 29 17:03 mysql-8.4.6-linux-glibc2.28-x86_64/</span><br></pre></td></tr></table></figure>

<p>执行以下类似的命令，安装和使用 MySQL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /opt/mysql</span></span><br><span class="line"><span class="comment"># groupadd mysql</span></span><br><span class="line"><span class="comment"># useradd -r -g mysql -s /bin/false mysql</span></span><br><span class="line"><span class="comment"># mkdir mysql-files</span></span><br><span class="line"><span class="comment"># chown mysql:mysql mysql-files</span></span><br><span class="line"><span class="comment"># chmod 750 mysql-files</span></span><br><span class="line"><span class="comment"># bin/mysqld --initialize --user=mysql</span></span><br><span class="line">bin/mysqld: error <span class="keyword">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>在执行初始化时出现上面的错误，这是因为 libaio 库安装位置的问题。通过以下方式查找 libaio 库的位置，并创建软连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find / -name &quot;libaio.so*&quot; 2&gt;/dev/null</span></span><br><span class="line">/usr/lib/x86_64-linux-gnu/libaio.so.1t64.0.2</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libaio.so.1t64</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libaio.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd /usr/lib/</span></span><br><span class="line"><span class="comment"># ln -s x86_64-linux-gnu/libaio.so libaio.so.1</span></span><br></pre></td></tr></table></figure>

<p>再次执行初始化成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bin/mysqld --initialize --user=mysql</span></span><br><span class="line">2025-09-29T09:31:28.376933Z 0 [System] [MY-015017] [Server] MySQL Server Initialization - start.</span><br><span class="line">2025-09-29T09:31:28.378185Z 0 [System] [MY-013169] [Server] /opt/mysql-8.4.6-linux-glibc2.28-x86_64/bin/mysqld (mysqld 8.4.6) initializing of server <span class="keyword">in</span> progress as process 35181</span><br><span class="line">2025-09-29T09:31:28.386632Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2025-09-29T09:31:28.651250Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2025-09-29T09:31:30.673240Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: fy-ktrkZp8aq</span><br><span class="line">2025-09-29T09:31:32.971427Z 0 [System] [MY-015018] [Server] MySQL Server Initialization - end.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意保存好在初始化过程中会生成 root 用户的随机密码。登陆 MySQL 服务后，可以使用以下命令修改初始密码:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root-password&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>启动 MySQL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bin/mysqld_safe --user=mysql &amp;</span></span><br><span class="line">[1] 5419</span><br><span class="line">root@Ubuntu:/opt/mysql-8.4.6-linux-glibc2.28-x86_64# Logging to <span class="string">&#x27;/opt/mysql-8.4.6-linux-glibc2.28-x86_64/data/Ubuntu.err&#x27;</span>.</span><br><span class="line">2025-09-30T02:27:16.882553Z mysqld_safe Starting mysqld daemon with databases from /opt/mysql-8.4.6-linux-glibc2.28-x86_64/data</span><br><span class="line"><span class="comment"># ps -ef|grep mysql</span></span><br><span class="line">root        5419    5411  0 10:27 pts/2    00:00:00 /bin/sh bin/mysqld_safe --user=mysql</span><br><span class="line">mysql       5488    5419  4 10:27 pts/2    00:00:00 /opt/mysql-8.4.6-linux-glibc2.28-x86_64/bin/mysqld --basedir=/opt/mysql-8.4.6-linux-glibc2.28-x86_64 --datadir=/opt/mysql-8.4.6-linux-glibc2.28-x86_64/data --plugin-dir=/opt/mysql-8.4.6-linux-glibc2.28-x86_64/lib/plugin --user=mysql --log-error=Ubuntu.err --pid-file=Ubuntu.pid</span><br><span class="line">root        5539    5411  0 10:27 pts/2    00:00:00 grep --color=auto mysql</span><br></pre></td></tr></table></figure>

<h1 id="安装后设置"><a href="#安装后设置" class="headerlink" title="安装后设置"></a>安装后设置</h1><h2 id="设置-Socket-文件"><a href="#设置-Socket-文件" class="headerlink" title="设置 Socket 文件"></a>设置 Socket 文件</h2><p>默认的 Socket 文件在 &#x2F;tmp 目录下，该目录下的文件会被自动清理。如果不修改在后续使用时会出现问题，见我的另外一篇博文：<a href="https://www.zhangjc.com/2024/12/26/%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0MySQL/">无法连接本地MySQL</a>。</p>
<p>在 &#x2F;etc&#x2F;mysql&#x2F;my.cnf 配置文件中添加以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">socket</span> = /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure>

<h2 id="设置字段内容大小写敏感"><a href="#设置字段内容大小写敏感" class="headerlink" title="设置字段内容大小写敏感"></a>设置字段内容大小写敏感</h2><p>参见我的另外一篇博文：<a href="https://www.zhangjc.com/2025/04/15/MySQL%E8%AE%BE%E7%BD%AE%E5%AD%97%E6%AE%B5%E5%86%85%E5%AE%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F/">MySQL设置字段内容大小写敏感</a>。</p>
<h2 id="使用-systemd-管理-MySQL-服务"><a href="#使用-systemd-管理-MySQL-服务" class="headerlink" title="使用 systemd 管理 MySQL 服务"></a>使用 systemd 管理 MySQL 服务</h2><p>参见我的另外一篇博文: <a href="https://www.zhangjc.com/2025/10/11/%E4%BD%BF%E7%94%A8-systemd-%E7%AE%A1%E7%90%86-MySQL-%E6%9C%8D%E5%8A%A1/">使用 systemd 管理 MySQL 服务</a>。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>华为Nova9开启开发人员选项</title>
    <url>/2025/09/28/%E5%8D%8E%E4%B8%BANova9%E5%BC%80%E5%90%AF%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<p>默认状态下，华为 Nova9 的开发人员选项是隐藏的，如下图：<br><img src="/images/202509/34.png"></p>
<p>要开启开发人员选项，在“设置→关于手机”中找到“HarmonyOS版本”或者“软件版本”，在版本号上连续点击，每次点击“HarmonyOS版本”和“软件版本”会交替出现，大概点7次会出现输入密码界面。输入手机解锁密码，然后就可以开启开发人员选项了。<br><img src="/images/202509/35.png"></p>
<p>此时再进入“设置→系统和更新”中，就可以看到开发人员选项了。<br><img src="/images/202509/36.png"></p>
]]></content>
      <categories>
        <category>移动端</category>
        <category>HarmonyOS</category>
      </categories>
      <tags>
        <tag>ADB</tag>
        <tag>移动端</tag>
        <tag>HarmonyOS</tag>
      </tags>
  </entry>
  <entry>
    <title>四分位数简介</title>
    <url>/2025/09/28/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>四分位数也称四分位点，是指在统计学中把所有数值由小到大排列并分成四等份，处于三个分割点位置的数值。多应用于统计学中的箱线图绘制。它是一组数据排序后处于25%和75%位置上的值。四分位数是通过3个点将全部数据等分为4部分，其中每部分包含25%的数据。很显然，中间的四分位数就是中位数，因此通常所说的四分位数是指处在25%位置上的数值（称为下四分位数）和处在75%位置上的数值（称为上四分位数）。与中位数的计算方法类似，根据未分组数据计算四分位数时，首先对数据进行排序，然后确定四分位数所在的位置，该位置上的数值就是四分位数。与中位数不同的是，四分位数位置的确定方法有几种，每种方法得到的结果会有一定差异，但差异不会很大。</p>
<p>第一四分位数 （Q1），又称“较小四分位数”，等于该样本中所有数值由小到大排列后第25%的数字。</p>
<p>第二四分位数 （Q2），又称“中位数”，等于该样本中所有数值由小到大排列后第50%的数字。</p>
<p>第三四分位数 （Q3），又称“较大四分位数”，等于该样本中所有数值由小到大排列后第75%的数字。</p>
<p>第三四分位数与第一四分位数的差距又称四分位距（InterQuartile Range，IQR）。</p>
<h1 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h1><p>首先确定四分位数的位置：</p>
<p>Q1的位置&#x3D; （n+1） × 0.25</p>
<p>Q2的位置&#x3D; （n+1） × 0.5</p>
<p>Q3的位置&#x3D; （n+1） × 0.75</p>
<p>n表示项数。</p>
<p>在上例中（n+1）恰好是4的整数倍，但在很多实际工作中不一定都是整数倍。这样四分位数的位置就带有小数，需要进一步研究。带有小数的位置与位置前后标志值有一定的关系：四分位数是与该小数相邻的两个整数位置上的标志值的平均数，权数的大小取决于两个整数位置的远近，距离越近，权数越大，距离越远，权数越小，权数之和应等于1。</p>
<p>对于四分位数的确定，有不同的方法，另外一种方法基于N-1 基础。即</p>
<p>Q1的位置&#x3D;1+（n-1）x 0.25</p>
<p>Q2的位置&#x3D;1+（n-1）x 0.5</p>
<p>Q3的位置&#x3D;1+（n-1）x 0.75</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>不论Q1，Q2，Q3的变异量数数值为何，均视为一个分界点，以此将总数分成四个相等部份，可以通过Q1，Q3比较，分析其数据变量的趋势。</p>
<p>四分位数在统计学中的箱线图绘制方面应用也很广泛。所谓箱线图就是 由一组数据5 个特征绘制的一个箱子和两条线段的图形，这种直观的箱线图不仅能反映出一组数据的分布特征，而且还可以进行多组数据的分析比较。这五个特征值，即数据的最大值、最小值、中位数和两个四分位数。即：<br><img src="/images/202509/42.jpeg"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 平台上安装 64 位 JDK</title>
    <url>/2025/10/16/%E5%9C%A8-Linux-%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%AE%89%E8%A3%85-64-%E4%BD%8D-JDK/</url>
    <content><![CDATA[<p>这个过程使用二进制打包文件（.tar.gz）为 64 位 Linux 安装 Java 开发包（JDK）。</p>
<p>本教程使用文件：jdk-8uversion-linux-x64.tar.gz</p>
<ol>
<li>下载文件</li>
</ol>
<p>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>下载前必须先同意许可协议。这个二进制文件可以被所有用户安装（不只是 root 用户）在任何有写入权限的位置。但是，只有 root 用户可以安装 JDK 到系统位置。</p>
<ol start="2">
<li><p>切换目录到要安装 JDK 的位置，然后移动二进制 .tar.gz 文件到当前目录。</p>
</li>
<li><p>打开 tar 包并安装 JDK</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf jdk-8uversion-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>如果想节省磁盘空间则删除 .tar.gz 文件。</p>
</li>
<li><p>配置 Path</p>
</li>
</ol>
<p>使用 vi 编辑 profile 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/profile</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/lib/jdk1.8.0_91</span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>

<p>重新登陆或者使用 source 命令生效最新配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>检查安装结果</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version “1.8.0_91”</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)</span><br></pre></td></tr></table></figure>

<p>如果看到类似上面的信息则说明安装成功。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>双系统通过Grub修改启动顺序</title>
    <url>/2025/09/05/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E9%80%9A%E8%BF%87Grub%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>我的双系统是 Deepin + Windows 11。安装完后，默认启动 Deepin。如下图：</p>
<p><img src="/images/202509/deepin.jpg"></p>
<p>按照以下步骤修改默认启动的系统为 Windows 11。</p>
<p><strong>1. 打开终端</strong></p>
<p>首先，打开 Deepin 系统的终端。</p>
<p><strong>2. 编辑GRUB配置文件</strong></p>
<p>GRUB配置文件通常位于 &#x2F;etc&#x2F;default&#x2F;grub。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/default/grub</span><br></pre></td></tr></table></figure>

<p><strong>3. 修改GRUB_DEFAULT设置</strong></p>
<p>在&#x2F;etc&#x2F;default&#x2F;grub文件中，GRUB_DEFAULT配置项决定了默认启动哪个系统。系统顺序号从0开始。例如，如果想设置第一个系统为默认启动项，可以这样设置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GRUB_DEFAULT=0</span><br></pre></td></tr></table></figure>

<p><strong>4. 保存并关闭文件</strong></p>
<p>保存并关闭修改后的&#x2F;etc&#x2F;default&#x2F;grub文件。</p>
<p><strong>5. 更新GRUB配置</strong></p>
<p>更新GRUB配置文件以使配置生效。运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>

<p><strong>6. 重启系统</strong></p>
<p>完成以上步骤后，重启系统使更改生效。如下图：</p>
<p><img src="/images/202509/windows.jpg"></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Windows</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 hexo + github 的个人博客系统搭建</title>
    <url>/2025/10/21/%E5%9F%BA%E4%BA%8E-hexo-github-%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简单，并且强大的博客框架。主要有以下特性：</p>
<ol>
<li>Node.js 带来不可思议的生成速度。建立数百个文件只需要几秒钟。</li>
<li>支持 GitHub 所有推荐的 Markdown 特性。你甚至可以在 Hexo 中使用大部分 Octopress 的插件。</li>
<li>只需要一个命令就可以部署个人博客到 GitHub、Heroku 或者其他站点。</li>
<li>Hexo 有一个强大的插件系统。可以安装很多 Jade 插件和 CoffeeScript 插件。</li>
</ol>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>GitHub 提供一个快速的、灵活的、协作的开发过程，让你可以自己工作或者跟其他人一起工作。</p>
<p>此处主要利用 GitHub 提供的 GitHub pages 特性。详细说明请查看<a href="https://link.zhihu.com/?target=https://pages.github.com/">官方文档</a>。</p>
<h2 id="Oray"><a href="#Oray" class="headerlink" title="Oray"></a>Oray</h2><p>Oray 是一家域名服务提供商。可以根据自己的喜好选择其他域名服务商，如万网。域名服务一般都会提供 URL 跳转的功能：访问域名可跳转到一个网址上，实现不加端口号即可访问服务器（显性URL，会改变地址栏中的网址，隐性URL则反之）。此处正式利用这种功能。</p>
<h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p><img src="/images/202510/22.jpg"></p>
<ul>
<li>source repository（local）：本地代码仓库。在本地搭建 node.js 环境，并运行个人博客系统作为开发调试环境。</li>
<li>source repository（github）：github 上创建的代码仓库。通过 git push 将个人代码提交到 github 代码仓库。</li>
<li>static repository（local）：个人博客在本地生成的静态内容仓库。使用 hexo generate 命令完成。</li>
<li>使用 Oray 域名服务的原因是可以使用自己喜欢的个性化的域名。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>采用这种方式作为个人博客的好处是：</p>
<ul>
<li>过程简单，只要有基础英文文档阅读能力。按照官网介绍操作就好。不用开发也可以完成。</li>
<li>基于 GitHub 服务稳定；</li>
<li>Hexo 功能强大，插件丰富，而且有丰富的主题可以选择。</li>
<li>文章编写使用 Markdown，能让你更专注于文章内容，不用关心展示。</li>
<li>成本极低。只需要域名服务付费，每年不到一百元。</li>
</ul>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Nginx</title>
    <url>/2025/09/29/%E5%AE%89%E8%A3%85-Nginx/</url>
    <content><![CDATA[<p>对于 Linux 平台，Nginx 安装包 可以从 nginx.org 下载。</p>
<p>Ubuntu:</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>Codename</th>
<th>支持平台</th>
</tr>
</thead>
<tbody><tr>
<td>12.04</td>
<td>precise</td>
<td>x86_64, i386</td>
</tr>
<tr>
<td>14.04</td>
<td>trusty</td>
<td>x86_64, i386, aarch64&#x2F;arm64</td>
</tr>
<tr>
<td>15.10</td>
<td>wily</td>
<td>x86_64, i386</td>
</tr>
</tbody></table>
<p>在 Debian&#x2F;Ubuntu 系统上，为了生效 nginx 仓库的签名，并且消除 nginx 安装过程中丢失 PGP 密钥的告警，必须向 apt 程序密钥环添加用来签名 nginx 安装包和仓库的密钥。请从 nginx 网站下载密钥，并且用下面的命令添加到 apt 程序密钥环中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure>

<p>用上表中 Ubuntu 发行版本的 codename 替换 codename ，然后添加下面内容到 &#x2F;etc&#x2F;apt&#x2F;sources.list 文件的末尾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ codename nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ codename nginx</span><br></pre></td></tr></table></figure>

<p>然后执行一下命令完成安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Office自定义项，安装期间出错</title>
    <url>/2025/01/26/%E5%AE%89%E8%A3%85Office%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B9%EF%BC%8C%E5%AE%89%E8%A3%85%E6%9C%9F%E9%97%B4%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<p>卸载PowerDesigner后，打开“WPS文字”时出现下图错误：<img src="/images/202501/21.png"></p>
<p><strong>解决方法：</strong></p>
<ol>
<li>按“Win+R”快捷键，打开【运行】框，在对话框中输入“regedit”，打开注册表。</li>
<li>按“Ctrl+F”，在搜索对话框中输入“YDWordAddIn.vsto”。</li>
<li>找到下图中的地址栏中红色框圈中的注册表项，并删除【Manifest】项中的数据。<br>删除前，如下图：<img src="/images/202501/22.png"><br>删除后，如下图：<img src="/images/202501/23.png"></li>
</ol>
<p>重新打开“WPS文字”时不再报错。</p>
<p>错误原因是，卸载PowerDesigner后，调用Office插件的注册表没有清理干净。</p>
]]></content>
      <categories>
        <category>办公软件</category>
        <category>WPS</category>
      </categories>
      <tags>
        <tag>WPS</tag>
      </tags>
  </entry>
  <entry>
    <title>从PyPI安装Superset</title>
    <url>/2024/12/25/%E4%BB%8EPyPI%E5%AE%89%E8%A3%85Superset/</url>
    <content><![CDATA[<p>本文主要记录本人从PyPI安装Superset的过程和遇到的问题。从PyPI安装Superset，首先应先创建虚拟环境。可以参考我的另外两篇博文，学习Python和虚拟环境的管理：</p>
<ul>
<li><a href="https://www.zhangjc.com/2024/12/17/Python-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/">Python版本管理</a></li>
<li><a href="https://www.zhangjc.com/2024/12/22/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/">Python虚拟环境管理</a></li>
</ul>
<p>Superset目前不支持Python3.12。具体错误信息和原因见我的另外一篇博客：<a href="https://www.zhangjc.com/2024/12/25/Superset%E6%9A%82%E4%B8%8D%E6%94%AF%E6%8C%81Python3-12/">Superset暂不支持Python 3.12</a>。</p>
<h1 id="操作系统依赖"><a href="#操作系统依赖" class="headerlink" title="操作系统依赖"></a>操作系统依赖</h1><p>Superset 在其元数据库中存储数据库连接信息。为此，我们使用加密 Python 库对连接密码进行加密。不幸的是，这个库具有操作系统级别的依赖。</p>
<h2 id="Debian-and-Ubuntu"><a href="#Debian-and-Ubuntu" class="headerlink" title="Debian and Ubuntu"></a>Debian and Ubuntu</h2><p>下面的命令将确保安装所需的依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential libssl-dev libffi-dev python-dev python-pip libsasl2-dev libldap2-dev default-libmysqlclient-dev</span><br></pre></td></tr></table></figure>

<p>在Ubuntu 20.04中，以下命令将确保安装所需的依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install build-essential libssl-dev libffi-dev python3-dev python3-pip libsasl2-dev libldap2-dev default-libmysqlclient-dev</span><br></pre></td></tr></table></figure>

<h1 id="Python-虚拟环境"><a href="#Python-虚拟环境" class="headerlink" title="Python 虚拟环境"></a>Python 虚拟环境</h1><p>创建并激活虚拟环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 Python 3.11版本</span></span><br><span class="line">$ python -V</span><br><span class="line">Python 3.11.9</span><br><span class="line">$ pyenv virtualenv superset</span><br><span class="line">created virtual environment CPython3.11.9.final.0-64 <span class="keyword">in</span> 268ms</span><br><span class="line">  creator CPython3Posix(dest=/home/zhangjc/.pyenv/versions/3.11.9/envs/superset, clear=False, no_vcs_ignore=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/zhangjc/.local/share/virtualenv)</span><br><span class="line">    added seed packages: pip==24.2, setuptools==72.2.0, wheel==0.44.0</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator</span><br><span class="line">$ pyenv activate superset</span><br><span class="line">(superset) zhangjc@frin:~$ python -V</span><br><span class="line">Python 3.11.9</span><br></pre></td></tr></table></figure>

<h1 id="安装和初始化Superset"><a href="#安装和初始化Superset" class="headerlink" title="安装和初始化Superset"></a>安装和初始化Superset</h1><blockquote>
<p>如果选择使用MySQL作为Superset的元数据库，参见我的另外一篇博客进行配置：<a href="https://www.zhangjc.com/2024/12/25/Superset%E9%85%8D%E7%BD%AE/">Superset配置</a>。连接 MySQL 时可能会出现异常，见我的另外一篇博客：<a href="https://www.zhangjc.com/2024/12/25/Superset%E8%BF%9E%E6%8E%A5MySQL%E5%BC%82%E5%B8%B8/">连接MySQL异常</a>。</p>
</blockquote>
<p>首先，从安装 apache-superset 开始：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install apache-superset</span><br></pre></td></tr></table></figure>

<p>然后，首先配置以下三项：</p>
<ul>
<li>FLASK_APP</li>
<li>SECRET_KEY。注意，环境变量名称是SUPERSET_SECRET_KEY，配置文件中的名称是SECRET_KEY。可以使用命令openssl rand -base64 42生成SECRET_KEY。</li>
<li>配置MySQL连接串。</li>
</ul>
<p>不设置FLASK_APP会提示以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ superset db upgrade</span><br><span class="line">Usage: superset [OPTIONS] COMMAND [ARGS]...</span><br><span class="line">Try &#x27;superset --help&#x27; for help.</span><br><span class="line"></span><br><span class="line">Error: Could not locate a Flask application. Use the &#x27;flask --app&#x27; option, &#x27;FLASK_APP&#x27; environment variable, or a &#x27;wsgi.py&#x27; or &#x27;app.py&#x27; file in the current directory.</span><br></pre></td></tr></table></figure>

<p>不设置SECRET_KEY会提示以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ superset db upgrade</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">                                    WARNING</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">A Default SECRET_KEY was detected, please use superset_config.py to override it.</span><br><span class="line">Use a strong complex alphanumeric string and use a tool to help you generate </span><br><span class="line">a sufficiently random sequence, ex: openssl rand -base64 42</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Refusing to start due to insecure SECRET_KEY</span><br></pre></td></tr></table></figure>

<p>以下是设置和初始化数据库过程：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ export FLASK_APP=superset</span><br><span class="line">$ openssl rand -base64 42</span><br><span class="line">exxaWNURDIvZuqF8O75ngU+rgIXpAxkwO5AwWSKOzrIeHFwY2EvA9OPt</span><br><span class="line">$ export SUPERSET_SECRET_KEY=&#x27;exxaWNURDIvZuqF8O75ngU+rgIXpAxkwO5AwWSKOzrIeHFwY2EvA9OPt&#x27;</span><br><span class="line">$ export SUPERSET_CONFIG_PATH=/home/zhangjc/github/superset/superset_config.py</span><br></pre></td></tr></table></figure>

<p>superset_config.py文件内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://superset:Superset123@localhost/superset?unix_socket=/tmp/mysql.sock&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在连接串中的密码部分带有特殊字符“@”时，执行superset db upgrade时会出现错误。这是因为<a href="https://www.zhangjc.com/2024/12/28/Superset%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%B2%E5%AF%86%E7%A0%81%E4%B8%8D%E8%83%BD%E5%8C%85%E5%90%AB/">Superset配置数据库连接串密码不能包含@</a>。</p>
<p>安装MySQL驱动并初始化数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install mysqlclient</span><br><span class="line">$ superset db upgrade</span><br></pre></td></tr></table></figure>

<p>通过运行以下命令完成安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在元数据库中创建一个管理用户（使用“admin”作为用户名加载示例）,根据提示输入信息即可创建完毕。</span></span><br><span class="line">superset fab create-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载样例</span></span><br><span class="line">superset load_examples</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建默认的角色和权限</span></span><br><span class="line">superset init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动调试模式的服务器</span></span><br><span class="line">superset run -p 8088 --with-threads --reload --debugger</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Python</tag>
        <tag>Superset</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式 Jetty</title>
    <url>/2025/10/27/%E5%B5%8C%E5%85%A5%E5%BC%8F-Jetty/</url>
    <content><![CDATA[<p>Jetty 有一个口号，“不要在 Jetty 中部署你的应用，部署 Jetty 在你的应用中！”这个口号意味着构建应用为为标准的 WAR 并且部署到 Jetty 的另外一个选择是，Jetty 被设计为一个软件组件，可以在 Java 程序中像其他 POJO 一样被实例化和使用。换一种方式，以嵌入式模式运行 Jetty 意味着放置一个 HTTP 模块到你的应用中，而不是放置你的应用到 HTTP 服务器。</p>
<p>本教程将带领你一步步从最简单的 Jetty 服务器实例化到用标准化部署描述器运行多 Web 应用程序。大部分这些实例的代码是标准 Jetty 项目的一部分。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>嵌入 Jetty 服务器，下面是通常的步骤，也是本教程实例中展示步骤：</p>
<ul>
<li>创建一个 Server 实例。</li>
<li>添加&#x2F;配置 Connectors。</li>
<li>添加&#x2F;配置 Handlers、Contexts、Servlets。</li>
<li>启动 Server。</li>
<li>服务器等待或者用自己的线程做一些其他的事情。</li>
</ul>
<h1 id="创建-Server"><a href="#创建-Server" class="headerlink" title="创建 Server"></a>创建 Server</h1><p>下面是 SimplestServer.java 文件的代码，实例化并且运行一个可能最简单的 Jetty server。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The simplest possible Jetty server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimplestServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line">        server.start();</span><br><span class="line">        server.dumpStdErr();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这将运行一个监听 8080 端口的 HTTP Server。这不是一个有用的 server，因为它没有处理器，因此对所有的请求都将返回 404。</p>
<h1 id="使用处理器"><a href="#使用处理器" class="headerlink" title="使用处理器"></a>使用处理器</h1><p>为了针对请求生成响应，Jetty 要求在服务器上设置处理器。一个处理器可能：</p>
<ul>
<li>检查&#x2F;修改 HTTP 请求。</li>
<li>生成完整的 HTTP 响应。</li>
<li>调用其他处理器（见 HandlerWrapper）。</li>
<li>选择一个或者多个处理器调用（见 HandlerCollection）。</li>
</ul>
<h1 id="HelloWorld-Handler"><a href="#HelloWorld-Handler" class="headerlink" title="HelloWorld Handler"></a>HelloWorld Handler</h1><p>下面 HelloHandler.java 的代码展示了一个简单的 hello world 处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Request;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.AbstractHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">final</span> String greeting;</span><br><span class="line">    <span class="keyword">final</span> String body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloHandler</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloHandler</span><span class="params">( String greeting )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>(greeting, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloHandler</span><span class="params">( String greeting, String body )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.greeting = greeting;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">( String target,</span></span><br><span class="line"><span class="params">                        Request baseRequest,</span></span><br><span class="line"><span class="params">                        HttpServletRequest request,</span></span><br><span class="line"><span class="params">                        HttpServletResponse response )</span> <span class="keyword">throws</span> IOException,</span><br><span class="line">                                                      ServletException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + greeting + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            out.println(body);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        baseRequest.setHandled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传给处理方法的参数是：</p>
<ul>
<li>target - 请求的目标，可能是一个 URI 或者被命名调度器的名称。</li>
<li>baseRequest - 可变的 Jetty 请求对象，这个对象总是未包装的。</li>
<li>request - 不变的请求对象，可能被一个过滤器或 servlet 包装过。</li>
<li>response - 响应，可能被过滤器或 servlet 包装过。</li>
</ul>
<p>处理器设置响应的状态、内容类型，并且在使用写入器生成响应体之前标记请求已经被处理。</p>
<h1 id="运行-HelloWorldHandler"><a href="#运行-HelloWorldHandler" class="headerlink" title="运行 HelloWorldHandler"></a>运行 HelloWorldHandler</h1><p>为了允许一个处理器处理 HTTP 请求，必须添加处理器到一个服务器实例中。下面 OneHandler.java 代码展示了 Jetty 服务器如何使用 HelloWrold 处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line">        server.setHandler(<span class="keyword">new</span> <span class="title class_">HelloHandler</span>());</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Jetty 中一个或者更多处理器处理所有请求。一些处理器选择其他特定的处理器（例如，ContextHandlerCollection 使用上下文路径选择 ContextHandler）；其他处理器使用应用逻辑生成响应（例如，ServletHandler 传送请求给应用 Servlet），同时其他处理器做跟生成响应无关的任务（例如，RequestLogHandler 或者 StatisticsHandler）。</p>
<p>后面的章节描述如何结合处理器方面的问题。你可以看到在 Jetty 的 org.eclipse.jetty.server.handler 包中有一些处理器。</p>
<h1 id="Handler-Collections-and-Wrappers"><a href="#Handler-Collections-and-Wrappers" class="headerlink" title="Handler Collections and Wrappers"></a>Handler Collections and Wrappers</h1><p>复杂的请求可以通过多种方式组合多个处理器进行处理。Jetty 有多个 HandlerContainer 接口的实现。</p>
<h2 id="HandlerCollection"><a href="#HandlerCollection" class="headerlink" title="HandlerCollection"></a>HandlerCollection</h2><p>管理其他处理器的一个集合，并且按照顺序调用每个处理器。这对组合那些生成响应的处理器和统计数据、记录日志的处理器是有用的。</p>
<h2 id="HandlerList"><a href="#HandlerList" class="headerlink" title="HandlerList"></a>HandlerList</h2><p>轮流调用每个处理器的处理器集合，直到抛出一个异常、提交了响应或者 request.isHandled() 返回 true。你可以用它组合根据条件处理一个请求的处理器，例如调用多个上下文直到匹配一个虚拟主机。</p>
<h2 id="HandlerWrapper"><a href="#HandlerWrapper" class="headerlink" title="HandlerWrapper"></a>HandlerWrapper</h2><p>处理器的基础类，你可以在面向方面编程风格中一起使用菊花链处理器。例如，一个标准的 web 应用是通过一个 context、session、security和servlet处理器链实现的。</p>
<h2 id="ContextHandlerCollection"><a href="#ContextHandlerCollection" class="headerlink" title="ContextHandlerCollection"></a>ContextHandlerCollection</h2><p>一个特定的 HandlerCollection，使用请求 URI 最长的前缀（contextPath）选择包含的 ContextHandler 来处理请求。</p>
<h1 id="处理器的作用域"><a href="#处理器的作用域" class="headerlink" title="处理器的作用域"></a>处理器的作用域</h1><p>很多 Jetty 中的标准 Servlet 容器是用 HandlerWrappers 实现的，是一个菊花式处理器链：ContextHandler 到 SessionHandler 到 SecurityHandler 到 ServletHandler。然而，因为 servlet 规范的特性，这个链不是一个处理器的纯粹嵌套，因为外部处理器有时需要内部处理器的过程信息。例如，当 ContextHandler 调用应用监听器来通知它们一个请求进入了上下文，它必须已经知道 ServletHandler 分发请求给哪个 servlet，因此 servletPath 方法返回正确的值。</p>
<p>HandlerWrapper 被定制为 ScopedHandler 抽象类，它支持作用域的菊花链。例如，如果一个 ServletHandler 嵌套在一个 ContextHandler 中，方法的执行顺序和嵌套是：</p>
<p>Server.handle(…)<br>ContextHandler.doScope(…)<br>ServletHandler.doScope(…)<br>ContextHandler.doHandle(…)<br>ServletHandler.doHandle(…)<br>SomeServlet.service(…)</p>
<p>因此，当 ContextHandler 处理请求的时候，它将在 ServletHandler 建立的作用域内进行。</p>
<h1 id="Resource-Handler"><a href="#Resource-Handler" class="headerlink" title="Resource Handler"></a>Resource Handler</h1><p>FileServer 示例展示了如何使用 ResourceHandler 在当前的工作目录提供静态内容服务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Handler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.DefaultHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.HandlerList;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.ResourceHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.gzip.GzipHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple Jetty FileServer.</span></span><br><span class="line"><span class="comment"> * This is a simple example of Jetty configured as a FileServer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create a basic Jetty server object that will listen on port 8080.  Note that if you set this to port 0</span></span><br><span class="line">        <span class="comment">// then a randomly available port will be assigned that you can either look in the logs for the port,</span></span><br><span class="line">        <span class="comment">// or programmatically obtain it for use in test cases.</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the ResourceHandler. It is the object that will actually handle the request for a given file. It is</span></span><br><span class="line">        <span class="comment">// a Jetty Handler object so it is suitable for chaining with other handlers as you will see in other examples.</span></span><br><span class="line">        <span class="type">ResourceHandler</span> <span class="variable">resource_handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceHandler</span>();</span><br><span class="line">        <span class="comment">// Configure the ResourceHandler. Setting the resource base indicates where the files should be served out of.</span></span><br><span class="line">        <span class="comment">// In this example it is the current directory but it can be configured to anything that the jvm has access to.</span></span><br><span class="line">        resource_handler.setDirectoriesListed(<span class="literal">true</span>);</span><br><span class="line">        resource_handler.setWelcomeFiles(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123; <span class="string">&quot;index.html&quot;</span> &#125;);</span><br><span class="line">        resource_handler.setResourceBase(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the ResourceHandler to the server.</span></span><br><span class="line">        <span class="type">GzipHandler</span> <span class="variable">gzip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GzipHandler</span>();</span><br><span class="line">        server.setHandler(gzip);</span><br><span class="line">        <span class="type">HandlerList</span> <span class="variable">handlers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HandlerList</span>();</span><br><span class="line">        handlers.setHandlers(<span class="keyword">new</span> <span class="title class_">Handler</span>[] &#123; resource_handler, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>() &#125;);</span><br><span class="line">        gzip.setHandler(handlers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start things up! By using the server.join() the server thread will join with the current thread.</span></span><br><span class="line">        <span class="comment">// See &quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Thread.html#join()&quot; for more details.</span></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，ResourceHandler 和 DefaultHandler 使用了一个 HandlerList，因此 DefaultHandler 为所有找不到静态资源的请求生成良好的 404 响应。</p>
<h1 id="嵌入式-Connectors"><a href="#嵌入式-Connectors" class="headerlink" title="嵌入式 Connectors"></a>嵌入式 Connectors</h1><p>在前面的示例中，Server 实例传入了一个端口号，并且在内部创建一个在这个端口监听请求的 Connector 默认实例。然而，通常当嵌入 Jetty 的时候，需要明确实例化，并且给 Server 实例配置一个或多个 Connectors。</p>
<h1 id="一个-Connector"><a href="#一个-Connector" class="headerlink" title="一个 Connector"></a>一个 Connector</h1><p>下面的示例，OneConnector.java，实例化、配置并添加一个 HTTP 连接器实例到服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.ServerConnector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Jetty server with one connectors.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneConnector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The Server</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP connector</span></span><br><span class="line">        <span class="type">ServerConnector</span> <span class="variable">http</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerConnector</span>(server);</span><br><span class="line">        http.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        http.setPort(<span class="number">8080</span>);</span><br><span class="line">        http.setIdleTimeout(<span class="number">30000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the connector</span></span><br><span class="line">        server.addConnector(http);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set a handler</span></span><br><span class="line">        server.setHandler(<span class="keyword">new</span> <span class="title class_">HelloHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the server</span></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，连接器处理 HTTP 协议，这是 ServerConnector 类默认的。</p>
<h1 id="多个-Connectors"><a href="#多个-Connectors" class="headerlink" title="多个 Connectors"></a>多个 Connectors</h1><p>当配置多个连接器（例如，HTTP 和 HTTPS）时，共享 HTTP 通用参数的配置是可取的。为了达到这个目的，你需要明确配置 ConnectionFactory 实例和 ServerConnector 类，并且跟 HTTP 通用配置一起提供。</p>
<p>ManyConnectors 示例 配置了有两个 ServerConnector 实例的服务器：HTTP 连接器有一个 HTTPConnectionFactory 实例；HTTPS 连接器有一个链接到 HttpConnectionFactory 的 SslConnectionFactory。两个 HttpConnectionFactories 在同一个 HttpConfiguration 上配置，然而 HTTPS 工厂用一个包装的配置，所以可以添加 SecureRequestCustomizer。</p>
<h1 id="嵌入-Servlets"><a href="#嵌入-Servlets" class="headerlink" title="嵌入 Servlets"></a>嵌入 Servlets</h1><p>Servlets 是提供处理 HTTP 请求应用逻辑的一般方式。Servlets 跟 Jetty 的处理器是相同的，除非请求对象是不可变的，因此不能被修改。在 Jetty 中 Servlets 通过一个 ServletHandler 来处理。它使用标准的路径映射让 Servlet 和请求匹配；设置请求的 servletPath 和路径信息；传送请求到 servlet，可能通过 Filters 生成响应。</p>
<p>MinimalServlets 示例 创建了一个 ServletHandler 实例并且配置了一个 HelloServlet:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.ServletHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinimalServlets</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create a basic jetty server object that will listen on port 8080.</span></span><br><span class="line">        <span class="comment">// Note that if you set this to port 0 then a randomly available port</span></span><br><span class="line">        <span class="comment">// will be assigned that you can either look in the logs for the port,</span></span><br><span class="line">        <span class="comment">// or programmatically obtain it for use in test cases.</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The ServletHandler is a dead simple way to create a context handler</span></span><br><span class="line">        <span class="comment">// that is backed by an instance of a Servlet.</span></span><br><span class="line">        <span class="comment">// This handler then needs to be registered with the Server object.</span></span><br><span class="line">        <span class="type">ServletHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletHandler</span>();</span><br><span class="line">        server.setHandler(handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Passing in the class for the Servlet allows jetty to instantiate an</span></span><br><span class="line">        <span class="comment">// instance of that Servlet and mount it on a given context path.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// IMPORTANT:</span></span><br><span class="line">        <span class="comment">// This is a raw Servlet, not a Servlet that has been configured</span></span><br><span class="line">        <span class="comment">// through a web.xml @WebServlet annotation, or anything similar.</span></span><br><span class="line">        handler.addServletWithMapping(HelloServlet.class, <span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start things up!</span></span><br><span class="line">        server.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The use of server.join() the will make the current thread join and</span></span><br><span class="line">        <span class="comment">// wait until the server is done executing.</span></span><br><span class="line">        <span class="comment">// See</span></span><br><span class="line">        <span class="comment">// http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#join()</span></span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">( HttpServletRequest request,</span></span><br><span class="line"><span class="params">                              HttpServletResponse response )</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">                                                            IOException</span><br><span class="line">        &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;&lt;h1&gt;Hello from HelloServlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="嵌入-Contexts"><a href="#嵌入-Contexts" class="headerlink" title="嵌入 Contexts"></a>嵌入 Contexts</h1><p>ContextHandler 是一个 ScopedHandler 只来响应那些 URI 前缀匹配已配置的上下文路径的请求。匹配上下文路径的请求会响应的调整它们的路径方法，并且上下文生命周期内是可获取的，可能包含：</p>
<ul>
<li>当请求在作用域内处理时，Classloader 设置为线程上下文的类加载器。</li>
<li>通过过 ServletContext API 可以获取属性的集合。</li>
<li>通过过 ServletContext API 可以获取参数的集合。</li>
<li>通过过 ServletContext API 为静态资源的请求提供一个基本的 Resource 作为文档根。</li>
<li>虚拟主机名称集合。</li>
</ul>
<p>下面的 OneContext 示例 建立了一个包装了 HelloHandler 的上下文：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.ContextHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>( <span class="number">8080</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add a single handler on context &quot;/hello&quot;</span></span><br><span class="line">        <span class="type">ContextHandler</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextHandler</span>();</span><br><span class="line">        context.setContextPath( <span class="string">&quot;/hello&quot;</span> );</span><br><span class="line">        context.setHandler( <span class="keyword">new</span> <span class="title class_">HelloHandler</span>() );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can be accessed using http://localhost:8080/hello</span></span><br><span class="line"></span><br><span class="line">        server.setHandler( context );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the server</span></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当有很多上下文出现时，你可以嵌入一个 ContextHandlerCollection 来有效的测试一个请求的 URI，然后选择匹配到的 ContextHandler。ManyContexts 示例 展示了可以配置多个上下文：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Handler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.ContextHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.ContextHandlerCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManyContexts</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ContextHandler</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextHandler</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        context.setContextPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        context.setHandler(<span class="keyword">new</span> <span class="title class_">HelloHandler</span>(<span class="string">&quot;Root Hello&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ContextHandler</span> <span class="variable">contextFR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextHandler</span>(<span class="string">&quot;/fr&quot;</span>);</span><br><span class="line">        contextFR.setHandler(<span class="keyword">new</span> <span class="title class_">HelloHandler</span>(<span class="string">&quot;Bonjoir&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ContextHandler</span> <span class="variable">contextIT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextHandler</span>(<span class="string">&quot;/it&quot;</span>);</span><br><span class="line">        contextIT.setHandler(<span class="keyword">new</span> <span class="title class_">HelloHandler</span>(<span class="string">&quot;Bongiorno&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ContextHandler</span> <span class="variable">contextV</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextHandler</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        contextV.setVirtualHosts(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;127.0.0.2&quot;</span> &#125;);</span><br><span class="line">        contextV.setHandler(<span class="keyword">new</span> <span class="title class_">HelloHandler</span>(<span class="string">&quot;Virtual Hello&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ContextHandlerCollection</span> <span class="variable">contexts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextHandlerCollection</span>();</span><br><span class="line">        contexts.setHandlers(<span class="keyword">new</span> <span class="title class_">Handler</span>[] &#123; context, contextFR, contextIT,</span><br><span class="line">                contextV &#125;);</span><br><span class="line"></span><br><span class="line">        server.setHandler(contexts);</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="嵌入-ServletContexts"><a href="#嵌入-ServletContexts" class="headerlink" title="嵌入 ServletContexts"></a>嵌入 ServletContexts</h1><p>ServletContextHandler 是一个支持普通 session 和 Servlet 的特定的 ContextHandler。下面的 OneServletContext 示例 实例化了一个 DefaultServlet 从 &#x2F;tmp&#x2F; 提供静态内容，并且实例化一个 DumpServlet 创建 session 并存储请求的基本详细信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.DefaultServlet;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.ServletContextHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneServletContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContextHandler</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextHandler</span>(</span><br><span class="line">                ServletContextHandler.SESSIONS);</span><br><span class="line">        context.setContextPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        context.setResourceBase(System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>));</span><br><span class="line">        server.setHandler(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add dump servlet</span></span><br><span class="line">        context.addServlet(DumpServlet.class, <span class="string">&quot;/dump/*&quot;</span>);</span><br><span class="line">        <span class="comment">// Add default servlet</span></span><br><span class="line">        context.addServlet(DefaultServlet.class, <span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="嵌入-Web-Applications"><a href="#嵌入-Web-Applications" class="headerlink" title="嵌入 Web Applications"></a>嵌入 Web Applications</h1><p>WebAppContext 是一个 ServletContextHandler 的扩展，它使用标准设计和 web.xml 配置 servlet、filter 和 web.xml 或注解的其他特性。下面的 OneWebApp 示例 配置了 Jetty 的测试 web 应用。Web 应用程序可以使用容器提供的的资源，在这个案例中需要并配置一个 LoginService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//  Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line"><span class="comment">//  ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//  All rights reserved. This program and the accompanying materials</span></span><br><span class="line"><span class="comment">//  are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line"><span class="comment">//  and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Eclipse Public License is available at</span></span><br><span class="line"><span class="comment">//      http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      The Apache License v2.0 is available at</span></span><br><span class="line"><span class="comment">//      http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line"><span class="comment">//  ========================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.jmx.MBeanContainer;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.security.HashLoginService;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.webapp.WebAppContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneWebApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create a basic jetty server object that will listen on port 8080.</span></span><br><span class="line">        <span class="comment">// Note that if you set this to port 0 then a randomly available port</span></span><br><span class="line">        <span class="comment">// will be assigned that you can either look in the logs for the port,</span></span><br><span class="line">        <span class="comment">// or programmatically obtain it for use in test cases.</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Setup JMX</span></span><br><span class="line">        <span class="type">MBeanContainer</span> <span class="variable">mbContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MBeanContainer</span>(</span><br><span class="line">                ManagementFactory.getPlatformMBeanServer());</span><br><span class="line">        server.addBean(mbContainer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The WebAppContext is the entity that controls the environment in</span></span><br><span class="line">        <span class="comment">// which a web application lives and breathes. In this example the</span></span><br><span class="line">        <span class="comment">// context path is being set to &quot;/&quot; so it is suitable for serving root</span></span><br><span class="line">        <span class="comment">// context requests and then we see it setting the location of the war.</span></span><br><span class="line">        <span class="comment">// A whole host of other configurations are available, ranging from</span></span><br><span class="line">        <span class="comment">// configuring to support annotation scanning in the webapp (through</span></span><br><span class="line">        <span class="comment">// PlusConfiguration) to choosing where the webapp will unpack itself.</span></span><br><span class="line">        <span class="type">WebAppContext</span> <span class="variable">webapp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebAppContext</span>();</span><br><span class="line">        webapp.setContextPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">warFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(</span><br><span class="line">                <span class="string">&quot;../../tests/test-jmx/jmx-webapp/target/jmx-webapp&quot;</span>);</span><br><span class="line">        webapp.setWar(warFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A WebAppContext is a ContextHandler as well so it needs to be set to</span></span><br><span class="line">        <span class="comment">// the server so it is aware of where to send the appropriate requests.</span></span><br><span class="line">        server.setHandler(webapp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start things up!</span></span><br><span class="line">        server.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The use of server.join() the will make the current thread join and</span></span><br><span class="line">        <span class="comment">// wait until the server is done executing.</span></span><br><span class="line">        <span class="comment">// See http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#join()</span></span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="喜欢-Jetty-XML"><a href="#喜欢-Jetty-XML" class="headerlink" title="喜欢 Jetty XML"></a>喜欢 Jetty XML</h1><p>配置 Jetty 服务器实例的典型方式是通过 jetty.xml 关联配置文件。然而 Jetty XML 配置格式只是在代码中可以做的简单的表达；也可以很简单的写嵌入代码准确实现 jetty.xml 配置。下面的 LikeJettyXml 示例 在代码中呈现了从配置文件获取的行为：</p>
<ul>
<li>jetty.xml</li>
<li>jetty-jmx.xml</li>
<li>jetty-http.xml</li>
<li>jetty-https.xml</li>
<li>jetty-deploy.xml</li>
<li>jetty-stats.xml</li>
<li>jetty-requestlog.xml</li>
<li>jetty-lowresources.xml</li>
<li>test-realm.xml</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// ========================================================================</span></span><br><span class="line">    <span class="comment">// Copyright (c) 1995-2016 Mort Bay Consulting Pty. Ltd.</span></span><br><span class="line">    <span class="comment">// ————————————————————————</span></span><br><span class="line">    <span class="comment">// All rights reserved. This program and the accompanying materials</span></span><br><span class="line">    <span class="comment">// are made available under the terms of the Eclipse Public License v1.0</span></span><br><span class="line">    <span class="comment">// and Apache License v2.0 which accompanies this distribution.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Eclipse Public License is available at</span></span><br><span class="line">    <span class="comment">// http://www.eclipse.org/legal/epl-v10.html</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Apache License v2.0 is available at</span></span><br><span class="line">    <span class="comment">// http://www.opensource.org/licenses/apache2.0.php</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// You may elect to redistribute this code under either of these licenses.</span></span><br><span class="line">    <span class="comment">// ========================================================================</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">package</span> org.eclipse.jetty.embedded;</span><br><span class="line">    <span class="keyword">import</span> java.io.File;</span><br><span class="line">    <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line">    <span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.deploy.DeploymentManager;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.deploy.PropertiesConfigurationManager;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.deploy.bindings.DebugListenerBinding;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.deploy.providers.WebAppProvider;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.http.HttpVersion;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.jmx.MBeanContainer;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.security.HashLoginService;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.DebugListener;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.Handler;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.HttpConfiguration;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.HttpConnectionFactory;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.LowResourceMonitor;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.NCSARequestLog;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.SecureRequestCustomizer;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.ServerConnector;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.SslConnectionFactory;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.handler.ContextHandlerCollection;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.handler.DefaultHandler;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.handler.HandlerCollection;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.handler.RequestLogHandler;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.server.handler.StatisticsHandler;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.util.ssl.SslContextFactory;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.util.thread.QueuedThreadPool;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.util.thread.ScheduledExecutorScheduler;</span><br><span class="line">    <span class="keyword">import</span> org.eclipse.jetty.webapp.Configuration;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        Starts the Jetty Distribution’s demo-base directory using entirely</span></span><br><span class="line"><span class="comment">        embedded jetty techniques.</span></span><br><span class="line"><span class="comment">        /</span></span><br><span class="line"><span class="comment">        public class LikeJettyXml</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">        public static void main( String[] args ) throws Exception</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">        // Path to as-built jetty-distribution directory</span></span><br><span class="line"><span class="comment">        String jettyHomeBuild = “../../jetty-distribution/target/distribution”;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Find jetty home and base directories</span></span><br><span class="line"><span class="comment">        String homePath = System.getProperty(“jetty.home”, jettyHomeBuild);</span></span><br><span class="line"><span class="comment">        File homeDir = new File(homePath);</span></span><br><span class="line"><span class="comment">        if (!homeDir.exists())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">        throw new FileNotFoundException(homeDir.getAbsolutePath());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        String basePath = System.getProperty(“jetty.base”, homeDir + “/demo-base”);</span></span><br><span class="line"><span class="comment">        File baseDir = new File(basePath);</span></span><br><span class="line"><span class="comment">        if(!baseDir.exists())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">        throw new FileNotFoundException(baseDir.getAbsolutePath());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Configure jetty.home and jetty.base system properties</span></span><br><span class="line"><span class="comment">        String jetty_home = homeDir.getAbsolutePath();</span></span><br><span class="line"><span class="comment">        String jetty_base = baseDir.getAbsolutePath();</span></span><br><span class="line"><span class="comment">        System.setProperty(“jetty.home”, jetty_home);</span></span><br><span class="line"><span class="comment">        System.setProperty(“jetty.base”, jetty_base);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty.xml ===</span></span><br><span class="line"><span class="comment">        // Setup Threadpool</span></span><br><span class="line"><span class="comment">        QueuedThreadPool threadPool = new QueuedThreadPool();</span></span><br><span class="line"><span class="comment">        threadPool.setMaxThreads(500);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Server</span></span><br><span class="line"><span class="comment">        Server server = new Server(threadPool);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Scheduler</span></span><br><span class="line"><span class="comment">        server.addBean(new ScheduledExecutorScheduler());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // HTTP Configuration</span></span><br><span class="line"><span class="comment">        HttpConfiguration http_config = new HttpConfiguration();</span></span><br><span class="line"><span class="comment">        http_config.setSecureScheme(“https”);</span></span><br><span class="line"><span class="comment">        http_config.setSecurePort(8443);</span></span><br><span class="line"><span class="comment">        http_config.setOutputBufferSize(32768);</span></span><br><span class="line"><span class="comment">        http_config.setRequestHeaderSize(8192);</span></span><br><span class="line"><span class="comment">        http_config.setResponseHeaderSize(8192);</span></span><br><span class="line"><span class="comment">        http_config.setSendServerVersion(true);</span></span><br><span class="line"><span class="comment">        http_config.setSendDateHeader(false);</span></span><br><span class="line"><span class="comment">        // httpConfig.addCustomizer(new ForwardedRequestCustomizer());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Handler Structure</span></span><br><span class="line"><span class="comment">        HandlerCollection handlers = new HandlerCollection();</span></span><br><span class="line"><span class="comment">        ContextHandlerCollection contexts = new ContextHandlerCollection();</span></span><br><span class="line"><span class="comment">        handlers.setHandlers(new Handler[] &#123; contexts, new DefaultHandler() &#125;);</span></span><br><span class="line"><span class="comment">        server.setHandler(handlers);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Extra options</span></span><br><span class="line"><span class="comment">        server.setDumpAfterStart(false);</span></span><br><span class="line"><span class="comment">        server.setDumpBeforeStop(false);</span></span><br><span class="line"><span class="comment">        server.setStopAtShutdown(true);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-jmx.xml ===</span></span><br><span class="line"><span class="comment">        MBeanContainer mbContainer = new MBeanContainer(</span></span><br><span class="line"><span class="comment">        ManagementFactory.getPlatformMBeanServer());</span></span><br><span class="line"><span class="comment">        server.addBean(mbContainer);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-http.xml ===</span></span><br><span class="line"><span class="comment">        ServerConnector http = new ServerConnector(server,</span></span><br><span class="line"><span class="comment">        new HttpConnectionFactory(http_config));</span></span><br><span class="line"><span class="comment">        http.setPort(8080);</span></span><br><span class="line"><span class="comment">        http.setIdleTimeout(30000);</span></span><br><span class="line"><span class="comment">        server.addConnector(http);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-https.xml ===</span></span><br><span class="line"><span class="comment">        // SSL Context Factory</span></span><br><span class="line"><span class="comment">        SslContextFactory sslContextFactory = new SslContextFactory();</span></span><br><span class="line"><span class="comment">        sslContextFactory.setKeyStorePath(jetty_home + “/../../../jetty-server/src/test/config/etc/keystore”);</span></span><br><span class="line"><span class="comment">        sslContextFactory.setKeyStorePassword(“OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4”);</span></span><br><span class="line"><span class="comment">        sslContextFactory.setKeyManagerPassword(“OBF:1u2u1wml1z7s1z7a1wnl1u2g”);</span></span><br><span class="line"><span class="comment">        sslContextFactory.setTrustStorePath(jetty_home + “/../../../jetty-server/src/test/config/etc/keystore”);</span></span><br><span class="line"><span class="comment">        sslContextFactory.setTrustStorePassword(“OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4”);</span></span><br><span class="line"><span class="comment">        sslContextFactory.setExcludeCipherSuites(“SSL_RSA_WITH_DES_CBC_SHA”,</span></span><br><span class="line"><span class="comment">        “SSL_DHE_RSA_WITH_DES_CBC_SHA”, “SSL_DHE_DSS_WITH_DES_CBC_SHA”,</span></span><br><span class="line"><span class="comment">        “SSL_RSA_EXPORT_WITH_RC4_40_MD5”,</span></span><br><span class="line"><span class="comment">        “SSL_RSA_EXPORT_WITH_DES40_CBC_SHA”,</span></span><br><span class="line"><span class="comment">        “SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA”,</span></span><br><span class="line"><span class="comment">        “SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA”);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // SSL HTTP Configuration</span></span><br><span class="line"><span class="comment">        HttpConfiguration https_config = new HttpConfiguration(http_config);</span></span><br><span class="line"><span class="comment">        https_config.addCustomizer(new SecureRequestCustomizer());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // SSL Connector</span></span><br><span class="line"><span class="comment">        ServerConnector sslConnector = new ServerConnector(server,</span></span><br><span class="line"><span class="comment">        new SslConnectionFactory(sslContextFactory,HttpVersion.HTTP_1_1.asString()),</span></span><br><span class="line"><span class="comment">        new HttpConnectionFactory(https_config));</span></span><br><span class="line"><span class="comment">        sslConnector.setPort(8443);</span></span><br><span class="line"><span class="comment">        server.addConnector(sslConnector);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-deploy.xml ===</span></span><br><span class="line"><span class="comment">        DeploymentManager deployer = new DeploymentManager();</span></span><br><span class="line"><span class="comment">        DebugListener debug = new DebugListener(System.out,true,true,true);</span></span><br><span class="line"><span class="comment">        server.addBean(debug);</span></span><br><span class="line"><span class="comment">        deployer.addLifeCycleBinding(new DebugListenerBinding(debug));</span></span><br><span class="line"><span class="comment">        deployer.setContexts(contexts);</span></span><br><span class="line"><span class="comment">        deployer.setContextAttribute(</span></span><br><span class="line"><span class="comment">        “org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern”,</span></span><br><span class="line"><span class="comment">        “./servlet-api-[^/]*\.jar$”);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        WebAppProvider webapp_provider = new WebAppProvider();</span></span><br><span class="line"><span class="comment">        webapp_provider.setMonitoredDirName(jetty_base + “/webapps”);</span></span><br><span class="line"><span class="comment">        webapp_provider.setDefaultsDescriptor(jetty_home + “/etc/webdefault.xml”);</span></span><br><span class="line"><span class="comment">        webapp_provider.setScanInterval(1);</span></span><br><span class="line"><span class="comment">        webapp_provider.setExtractWars(true);</span></span><br><span class="line"><span class="comment">        webapp_provider.setConfigurationManager(new PropertiesConfigurationManager());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        deployer.addAppProvider(webapp_provider);</span></span><br><span class="line"><span class="comment">        server.addBean(deployer);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === setup jetty plus ==</span></span><br><span class="line"><span class="comment">        Configuration.ClassList.setServerDefault(server).addAfter(</span></span><br><span class="line"><span class="comment">        “org.eclipse.jetty.webapp.FragmentConfiguration”,</span></span><br><span class="line"><span class="comment">        “org.eclipse.jetty.plus.webapp.EnvConfiguration”,</span></span><br><span class="line"><span class="comment">        “org.eclipse.jetty.plus.webapp.PlusConfiguration”);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-stats.xml ===</span></span><br><span class="line"><span class="comment">        StatisticsHandler stats = new StatisticsHandler();</span></span><br><span class="line"><span class="comment">        stats.setHandler(server.getHandler());</span></span><br><span class="line"><span class="comment">        server.setHandler(stats);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-requestlog.xml ===</span></span><br><span class="line"><span class="comment">        NCSARequestLog requestLog = new NCSARequestLog();</span></span><br><span class="line"><span class="comment">        requestLog.setFilename(jetty_home + “/logs/yyyy_mm_dd.request.log”);</span></span><br><span class="line"><span class="comment">        requestLog.setFilenameDateFormat(“yyyy_MM_dd”);</span></span><br><span class="line"><span class="comment">        requestLog.setRetainDays(90);</span></span><br><span class="line"><span class="comment">        requestLog.setAppend(true);</span></span><br><span class="line"><span class="comment">        requestLog.setExtended(true);</span></span><br><span class="line"><span class="comment">        requestLog.setLogCookies(false);</span></span><br><span class="line"><span class="comment">        requestLog.setLogTimeZone(“GMT”);</span></span><br><span class="line"><span class="comment">        RequestLogHandler requestLogHandler = new RequestLogHandler();</span></span><br><span class="line"><span class="comment">        requestLogHandler.setRequestLog(requestLog);</span></span><br><span class="line"><span class="comment">        handlers.addHandler(requestLogHandler);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === jetty-lowresources.xml ===</span></span><br><span class="line"><span class="comment">        LowResourceMonitor lowResourcesMonitor=new LowResourceMonitor(server);</span></span><br><span class="line"><span class="comment">        lowResourcesMonitor.setPeriod(1000);</span></span><br><span class="line"><span class="comment">        lowResourcesMonitor.setLowResourcesIdleTimeout(200);</span></span><br><span class="line"><span class="comment">        lowResourcesMonitor.setMonitorThreads(true);</span></span><br><span class="line"><span class="comment">        lowResourcesMonitor.setMaxConnections(0);</span></span><br><span class="line"><span class="comment">        lowResourcesMonitor.setMaxMemory(0);</span></span><br><span class="line"><span class="comment">        lowResourcesMonitor.setMaxLowResourcesTime(5000);</span></span><br><span class="line"><span class="comment">        server.addBean(lowResourcesMonitor);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // === test-realm.xml ===</span></span><br><span class="line"><span class="comment">        HashLoginService login = new HashLoginService();</span></span><br><span class="line"><span class="comment">        login.setName(“Test Realm”);</span></span><br><span class="line"><span class="comment">        login.setConfig(jetty_base + “/etc/realm.properties”);</span></span><br><span class="line"><span class="comment">        login.setHotReload(false);</span></span><br><span class="line"><span class="comment">        server.addBean(login);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Start the server</span></span><br><span class="line"><span class="comment">        server.start();</span></span><br><span class="line"><span class="comment">        server.join();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Jetty</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>Jetty</tag>
      </tags>
  </entry>
  <entry>
    <title>平均与方差</title>
    <url>/2025/05/20/%E5%B9%B3%E5%9D%87%E4%B8%8E%E6%96%B9%E5%B7%AE/</url>
    <content><![CDATA[<h1 id="平均"><a href="#平均" class="headerlink" title="平均"></a>平均</h1><h2 id="算术平均数"><a href="#算术平均数" class="headerlink" title="算术平均数"></a>算术平均数</h2><p>把所有的数加起来，然后除以数的数目。把数压平，平均分配。</p>
<h2 id="几何平均数"><a href="#几何平均数" class="headerlink" title="几何平均数"></a>几何平均数</h2><p>把所有数相乘，然后开 n 次方根。几何平均数可以用来比较性质非常不同的事物。</p>
<h2 id="平均差"><a href="#平均差" class="headerlink" title="平均差"></a>平均差</h2><p>也叫平均绝对偏差。各个数据值离平均值平均有多远。</p>
<h1 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h1><h2 id="方差-1"><a href="#方差-1" class="headerlink" title="方差"></a>方差</h2><p>离平均的平方距离的平均。如果有“N”个数值，求方差有一下两种情况：</p>
<ul>
<li>对象总体：在求方差时除以 N</li>
<li>样本：在求方差时除以 N-1</li>
</ul>
<h2 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h2><p>标准差是方差的平方根。标准差很有用，是一个甄别数值是正常与否的”标准”。</p>
<h1 id="极差"><a href="#极差" class="headerlink" title="极差"></a>极差</h1><p>极差又称范围误差或全距(Range)，以R表示，是用来表示统计资料中的变异量数(measures of variation)，其最大值与最小值之间的差距，即最大值减最小值后所得之数据。</p>
<p>极差指的是这些数字分开得有多远，计算方法是：用其中最大的数减去最小的数。极差越大，表示分得越开，最大数和最小数之间的差就越大；极差越小，数字间就越紧密，这就是极差的概念。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Hadoop源代码阅读环境</title>
    <url>/2016/08/29/%E6%90%AD%E5%BB%BA-Hadoop-%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Mac OS X EI Capitan 10.11.6</li>
<li>java version “1.7.0_80”</li>
<li>git version 2.7.4 (Apple Git-66)</li>
<li>Apache Maven 3.3.9</li>
</ul>
<h1 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h1><p>从Git上下载最新源代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://git.apache.org/hadoop-common.git</span><br></pre></td></tr></table></figure>

<h1 id="构建代码"><a href="#构建代码" class="headerlink" title="构建代码"></a>构建代码</h1><p>构建代码，使项目可以导入到Eclipse中。切换目录到hadoop-common，执行以下命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ mvn install -DskipTests</span><br><span class="line">$ mvn eclipse:eclipse -DdownloadSources=true -DdownloadJavadocs=true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个过程时间比较久，最好有内部的Nexus服务器，不然可能会不够顺畅。</p>
</blockquote>
<h1 id="Hadoop-2-7-3源码环境"><a href="#Hadoop-2-7-3源码环境" class="headerlink" title="Hadoop 2.7.3源码环境"></a>Hadoop 2.7.3源码环境</h1><p>下载地址：<a href="http://hadoop.apache.org/releases.html">http://hadoop.apache.org/releases.html</a>。下载2.7.3源代码包到本地。使用以下命令解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar xzvf hadoop-2.7.3-src.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解压目录下的<code>hadoop-2.7.3-src/BUILDING.txt</code>文件提供了很多信息。</p>
</blockquote>
<p>源码构建方式同上。</p>
<h1 id="Eclipse中的操作"><a href="#Eclipse中的操作" class="headerlink" title="Eclipse中的操作"></a>Eclipse中的操作</h1><h2 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h2><ul>
<li>File -&gt; Import…</li>
<li>Choose “Existing Projects into Workspace”</li>
<li>Select the hadoop-common-project directory as the root directory</li>
<li>Select the hadoop-annotations, hadoop-auth, hadoop-auth-examples, hadoop-nfs and hadoop-common projects</li>
<li>Click “Finish”</li>
<li>File -&gt; Import…</li>
<li>Choose “Existing Projects into Workspace”</li>
<li>Select the hadoop-assemblies directory as the root directory</li>
<li>Select the hadoop-assemblies project</li>
<li>Click “Finish”</li>
<li>To get the projects to build cleanly:<ul>
<li>Add target&#x2F;generated-test-sources&#x2F;java as a source directory for hadoop-common</li>
<li>You may have to add then remove the JRE System Library to avoid errors due to access restrictions</li>
</ul>
</li>
</ul>
<p>最后一个操作的步骤：</p>
<ol>
<li>Go to the Build Path settings in the project properties.</li>
<li>Remove the JRE System Library</li>
<li>Add it back; Select “Add Library” and select the JRE System Library. The default worked for me.</li>
</ol>
<h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><ul>
<li>File -&gt; Import…</li>
<li>Choose “Existing Projects into Workspace”</li>
<li>Select the hadoop-hdfs-project directory as the root directory</li>
<li>Select the hadoop-hdfs project</li>
<li>Click “Finish”</li>
</ul>
<h2 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h2><ul>
<li>File -&gt; Import…</li>
<li>Choose “Existing Projects into Workspace”</li>
<li>Select the hadoop-yarn-project directory as the root directory</li>
<li>Select the hadoop-yarn-project project</li>
<li>Click “Finish”</li>
</ul>
<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><ul>
<li>File -&gt; Import…</li>
<li>Choose “Existing Projects into Workspace”</li>
<li>Select the hadoop-mapreduce-project directory as the root directory</li>
<li>Select the hadoop-mapreduce-project project</li>
<li>Click “Finish”</li>
</ul>
<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="错误-程序包com-sun-javadoc不存在"><a href="#错误-程序包com-sun-javadoc不存在" class="headerlink" title="错误: 程序包com.sun.javadoc不存在"></a>错误: 程序包com.sun.javadoc不存在</h2><p>如果使用JDK8执行<code>mvn install -DskipTests</code>的话会报一下错误，需要替换为JDK7后再执行。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[INFO] -------------------------------------------------------------</span><br><span class="line">[ERROR] COMPILATION ERROR :</span><br><span class="line">[INFO] -------------------------------------------------------------</span><br><span class="line">[ERROR] /Users/ling/work/git/hadoop-common/hadoop-common-project/hadoop-annotations/src/main/java/org/apache/hadoop/classification/tools/ExcludePrivateAnnotationsStandardDoclet.java:[20,22] 错误: 程序包com.sun.javadoc不存在</span><br></pre></td></tr></table></figure>

<h2 id="‘protoc-–version’-did-not-return-a-version"><a href="#‘protoc-–version’-did-not-return-a-version" class="headerlink" title="‘protoc –version’ did not return a version"></a>‘protoc –version’ did not return a version</h2><p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.hadoop:hadoop-maven-plugins:3.0.0-SNAPSHOT:protoc (compile-protoc) on project hadoop-common: org.apache.maven.plugin.MojoExecutionException: &#x27;protoc --version&#x27; did not return a version -&gt; [Help 1]</span><br></pre></td></tr></table></figure>

<p>这是因为没有安装protoc的缘故。我安装了最新版的protoc3.0.0重新执行报错信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.hadoop:hadoop-maven-plugins:3.0.0-SNAPSHOT:protoc (compile-protoc) on project hadoop-common: org.apache.maven.plugin.MojoExecutionException: protoc version is &#x27;libprotoc 3.0.0&#x27;, expected version is &#x27;2.5.0&#x27; -&gt; [Help 1]</span><br></pre></td></tr></table></figure>

<p>安装protoc2.5.0版本后重新执行成功。</p>
<h2 id="hadoop-common编译错误：Type-AvroRecord-cannot-be-resolved-to-a-type"><a href="#hadoop-common编译错误：Type-AvroRecord-cannot-be-resolved-to-a-type" class="headerlink" title="hadoop-common编译错误：Type AvroRecord cannot be resolved to a type"></a>hadoop-common编译错误：Type AvroRecord cannot be resolved to a type</h2><ul>
<li>下载<a href="http://mirrors.cnnic.cn/apache/avro/avro-1.7.7/java/avro-tools-1.7.7.jar">avro-tools</a>最新版。</li>
<li>进入源码目录<code>hadoop-2.7.3-src/hadoop-common-project/hadoop-common/src/test/avro</code>，执行以下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar &lt;所在目录&gt;/avro-tools-1.7.7.jar compile schema avroRecord.avsc ../java/</span><br></pre></td></tr></table></figure>

<p>其中avsc文件是avro的模式文件，上面命令是要通过模式文件生成相应的<code>.java</code>文件。</p>
<p>右键单击eclipse中的hadoop-common项目，然后refresh。</p>
<blockquote>
<p>注意，avro-tools不要下载最新版，要下载1.7.7版本；最新1.8.1版本测试失败。</p>
</blockquote>
<h2 id="hadoop-common编译错误：Type-EchoRequestProto-cannot-be-resolved"><a href="#hadoop-common编译错误：Type-EchoRequestProto-cannot-be-resolved" class="headerlink" title="hadoop-common编译错误：Type EchoRequestProto cannot be resolved"></a>hadoop-common编译错误：Type EchoRequestProto cannot be resolved</h2><ul>
<li>进入源码目录<code>hadoop-2.7.3-src/hadoop-common-project/hadoop-common/src/test/proto</code>，执行以下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ protoc \-\-java_out=../java *.proto</span><br></pre></td></tr></table></figure>

<ul>
<li>右键单击eclipse中的hadoop-common，然后refresh。</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Java</tag>
        <tag>Maven</tag>
        <tag>分布式计算</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建单节点Hadoop集群</title>
    <url>/2025/09/27/%E6%90%AD%E5%BB%BA%E5%8D%95%E8%8A%82%E7%82%B9Hadoop%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>可以快速使用 Hadoop 的 MapReduce 和 HDFS 执行某些操作，主要用于学习的目的。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul>
<li>操作系统：deepin 20.9 社区版</li>
<li>内核：5.18.17-amd64-desktop-hwe</li>
<li>Hadoop版本：Apache Hadoop 3.3.6</li>
<li>Java版本：java version “11.0.21” 2023-10-17 LTS</li>
</ul>
<h2 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install ssh</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install pdsh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pdsh 是一个多线程并发在远程服务器上执行命令的 shell 客户端。项目地址：<a href="https://github.com/chaos/pdsh">https://github.com/chaos/pdsh</a>。</p>
</blockquote>
<h1 id="Hadoop-安装"><a href="#Hadoop-安装" class="headerlink" title="Hadoop 安装"></a>Hadoop 安装</h1><p>下载 Hadoop：<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/">Apache Download Mirrors</a>。下载完成后解压至本地的目录。在解压后的目录中，编辑 <code>etc/hadoop/hadoop-env.sh</code> 文件，增加 JAVA_HOME 环境变量定义。如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set to the root of your Java installation</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/java</span><br></pre></td></tr></table></figure>

<p>执行以下命令会显示 hadoop 命令的使用文档，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/hadoop</span><br><span class="line">Usage: hadoop [OPTIONS] SUBCOMMAND [SUBCOMMAND OPTIONS]</span><br><span class="line"> or    hadoop [OPTIONS] CLASSNAME [CLASSNAME OPTIONS]</span><br><span class="line">  <span class="built_in">where</span> CLASSNAME is a user-provided Java class</span><br></pre></td></tr></table></figure>

<h1 id="伪分布式"><a href="#伪分布式" class="headerlink" title="伪分布式"></a>伪分布式</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用以下配置。</p>
<p>etc&#x2F;hadoop&#x2F;core-site.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>etc&#x2F;hadoop&#x2F;hdfs-site.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-ssh-免密登录"><a href="#配置-ssh-免密登录" class="headerlink" title="配置 ssh 免密登录"></a>配置 ssh 免密登录</h2><p>见我的另外一篇文章中的章节：<a href="https://www.zhangjc.com/2025/09/26/Linux%E4%B8%8BSpark-Standalone%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/">Linux下Spark Standalone测试环境部署</a>。</p>
<h2 id="启动-HDFS"><a href="#启动-HDFS" class="headerlink" title="启动 HDFS"></a>启动 HDFS</h2><ol>
<li>格式换 HDFS</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动 NameNode 和 DataNode</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>NameNode WebUI</li>
</ol>
<p><a href="http://localhost:9870/">http://localhost:9870/</a></p>
<ol start="4">
<li>停止 NameNode 和 DataNode</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认的 HDFS 元数据信息会存储在临时目录 tmp 下，机器重启后再次启动 HDFS 时会出现错误，见我的另外一篇文章：<a href="https://www.zhangjc.com/2025/09/27/Directory-tmp-hadoop-zhangjc-dfs-name-is-in-an-inconsistent-state/">Directory &#x2F;tmp&#x2F;hadoop-zhangjc&#x2F;dfs&#x2F;name is in an inconsistent state</a>。</p>
</blockquote>
<h2 id="单节点-Yarn"><a href="#单节点-Yarn" class="headerlink" title="单节点 Yarn"></a>单节点 Yarn</h2><ol>
<li>添加以下配置</li>
</ol>
<p>etc&#x2F;hadoop&#x2F;mapred-site.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>etc&#x2F;hadoop&#x2F;yarn-site.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动 ResourceManager 和 NodeManager</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>ResourceManager WebUI</li>
</ol>
<p><a href="http://localhost:8088/">http://localhost:8088/</a></p>
<ol start="4">
<li>停止 ResourceManager 和 NodeManager</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sbin/stop-yarn.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>分布式计算</tag>
      </tags>
  </entry>
  <entry>
    <title>无法连接本地MySQL</title>
    <url>/2024/12/26/%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0MySQL/</url>
    <content><![CDATA[<p>在Linux系统下，MySQL客户端有两种不同的方法连接本地<strong>mysqld</strong>服务：</p>
<ul>
<li>通过Unix socket文件。这是一个在文件系统中的文件，默认&#x2F;tmp&#x2F;mysql.sock。</li>
<li>使用TCP&#x2F;IP连接。TCP&#x2F;IP需要个网络端口，默认3306。</li>
</ul>
<p>Unix socket文件比TCP&#x2F;IP连接速度快，但只能连接客户端所在的同一台服务器上的MySQL。连接MySQL时不指定主机名，或者指定特定的主机名<strong>localhost</strong>，则使用Unix socket文件连接。</p>
<p>error (2002) <code>Can&#39;t connect to ...</code>错误一般可能是以下原因导致的：</p>
<ul>
<li>MySQL服务未启动。</li>
<li>连接使用了错误的Unix socket文件。</li>
<li>连接使用了错误的TCP&#x2F;IP端口号。</li>
</ul>
<p>原因知道了，排查起来也就简单了。</p>
<p>首先检查服务器上是否有<strong>mysqld</strong>进程，确定MySQL服务已启动。如果没有这个进程，则说明MySQL服务未启动。Linux系统查看方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps xa | grep mysqld</span><br><span class="line">  13974 ?        S      0:01 /bin/sh /usr/bin/mysqld_safe</span><br><span class="line">  14051 ?        Sl   112:17 /opt/mysql/bin/mysqld --basedir=/opt/mysql --datadir=/opt/mysql/data --plugin-dir=/opt/mysql/lib/plugin --user=mysql --log-error=frin.err --pid-file=frin.pid</span><br><span class="line"> 151147 pts/4    S+     0:00 grep mysqld</span><br></pre></td></tr></table></figure>

<p>如果<strong>mysqld</strong>进程在运行，可以用下面两种连接MySQL的方式，使用<strong>mysqladmin</strong>工具查看MySQL端口或Unix socket文件信息。</p>
<p>执行以下命令，用户是superset，可以看出连接方式是通过Unix socket（Localhost via UNIX socket），Unix socket文件是&#x2F;tmp&#x2F;mysql.sock。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqladmin -hlocalhost -usuperset -p version</span><br><span class="line">Enter password: </span><br><span class="line">mysqladmin  Ver 8.0.34 <span class="keyword">for</span> Linux on x86_64 (MySQL Community Server - GPL)</span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Server version          8.0.34</span><br><span class="line">Protocol version        10</span><br><span class="line">Connection              Localhost via UNIX socket</span><br><span class="line">UNIX socket             /tmp/mysql.sock</span><br><span class="line">Uptime:                 31 min 49 sec</span><br><span class="line"></span><br><span class="line">Threads: 2  Questions: 3537  Slow queries: 0  Opens: 191  Flush tables: 3  Open tables: 110  Queries per second avg: 1.852</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Linux中临时目录&#x2F;tmp下的文件会被定期清理，所以&#x2F;tmp&#x2F;mysql.sock也会被清理掉，导致MySQL无法访问。关于如何保护或修改MySQL的Unix socket文件以后的文章再分项。</p>
</blockquote>
<p>执行以下命令，用户同样是superset，可以看出连接方式是TCP&#x2F;IP（127.0.0.1 via TCP&#x2F;IP），端口是3306。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqladmin -h127.0.0.1 -usuperset -p version</span><br><span class="line">Enter password: </span><br><span class="line">mysqladmin  Ver 8.0.34 <span class="keyword">for</span> Linux on x86_64 (MySQL Community Server - GPL)</span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Server version          8.0.34</span><br><span class="line">Protocol version        10</span><br><span class="line">Connection              127.0.0.1 via TCP/IP</span><br><span class="line">TCP port                3306</span><br><span class="line">Uptime:                 38 min 34 sec</span><br><span class="line"></span><br><span class="line">Threads: 2  Questions: 4252  Slow queries: 0  Opens: 191  Flush tables: 3  Open tables: 110  Queries per second avg: 1.837</span><br></pre></td></tr></table></figure>

<p>理解了MySQL连接的两种方式，出现连接不上的问题基本可以从以下几个方面排查：</p>
<ul>
<li>MySQL服务：<ul>
<li>MySQL服务是否运行正常。</li>
<li>MySQL启动没有指定<a href="https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_skip_networking">skip_networking</a>参数，这会导致MySQL不会接受任何TCP&#x2F;IP连接。</li>
<li>MySQL服务绑定的IP地址，如果设置了127.0.0.1，则只允许本机访问，不接受远程访问。</li>
</ul>
</li>
<li>Unix socket文件相关：<ul>
<li>文件是否存在。</li>
<li>文件权限是否适当。</li>
<li>客户端用的Unix socket文件是否正确。</li>
</ul>
</li>
<li>网络相关：<ul>
<li>检查网络是否连通，可以用ping命令。</li>
<li>检查端口是否可访问，可以用telnet命令。</li>
<li>检查是否防火墙屏蔽了访问。</li>
</ul>
</li>
</ul>
<p>参考文档：<a href="https://dev.mysql.com/doc/refman/8.4/en/can-not-connect-to-server.html">Can’t connect to [local] MySQL server</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包工具：Mitmproxy</title>
    <url>/2025/09/28/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%EF%BC%9AMitmproxy/</url>
    <content><![CDATA[<p>Mitmproxy 是一组工具，它们为 HTTP&#x2F;1、 HTTP&#x2F;2 和 WebSocket 提供交互式、支持 SSL&#x2F;TLS 的拦截代理。</p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul>
<li>拦截 HTTP 和 HTTPS 请求和响应并动态修改它们。</li>
<li>保存完整的 HTTP 对话，以便以后重放和分析。</li>
<li>重放 HTTP 会话的客户端。</li>
<li>重放以前记录的服务器的 HTTP 响应。</li>
<li>反向代理模式将流量转发到指定的服务器。</li>
<li>MacOS 和 Linux 上的透明代理模式。</li>
<li>使用 Python 脚本对 HTTP 流量进行更改。</li>
<li>用于拦截动态生成的 SSL&#x2F;TLS 证书。</li>
<li>更多特性，请参考：<a href="https://docs.mitmproxy.org/stable/overview-features/">Mitmproxy 官方文档</a>。</li>
</ul>
<h1 id="三个强大的核心工具"><a href="#三个强大的核心工具" class="headerlink" title="三个强大的核心工具"></a>三个强大的核心工具</h1><p>Mitmproxy 项目是一组展示通用的底层功能的前端工具。当谈论“mitmproxy”时，通常指的是这三个工具中的任何一个——它们只是同一个核心代理的不同前端。</p>
<ul>
<li>mitmproxy 是一个交互式的、支持 SSL&#x2F;TLS 的拦截代理，用于 HTTP&#x2F;1、 HTTP&#x2F;2 和 WebSocket 的控制台接口。</li>
<li>mitmweb 是 mitmproxy 的一个基于Web的接口。</li>
<li>mitmdump 是 mitmproxy 的命令行版本。用户 HTTP 的 tcpdump。</li>
</ul>
<p>在 Mitmproxy 官网 可以找到发行的软件包。开发信息和源代码可以在 GitHub 存储库中找到。</p>
<h2 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h2><p><img src="/images/202509/40.png"></p>
<p>mitmproxy 是一个控制台工具，允许交互式检查和修改 HTTP 流量。它与 mitmdump 的不同之处在于，所有流都保存在内存中，这意味着它用于获取和操作小型样本。在 mitmproxy 窗口中使用 ？ 快捷键查看上下文文档。</p>
<h2 id="mitmweb"><a href="#mitmweb" class="headerlink" title="mitmweb"></a>mitmweb</h2><p><img src="/images/202509/41.png"></p>
<p>mitmweb 是 mitmproxy 的基于 web 的用户界面，允许交互式检查和修改 HTTP 流量。与 mitmproxy 一样，它与 mitmdump 的不同之处在于所有流都保存在内存中，这意味着它用于获取和操作小型样本。</p>
<p>Mitmweb 目前处于测试阶段。它对于当前暴露在 UI 中的所有特性都是稳定的，但是它仍然遗漏了很多 mitmproxy 的特性。</p>
<h2 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h2><p>mitmdump 是 mitmproxy 的命令行伙伴。它提供了类似 tcpdump 的功能，允许查看、记录和以编程方式转换 HTTP 流量。命令添加 –help 标识查看输出的完整文档。</p>
<h3 id="示例：保存流量"><a href="#示例：保存流量" class="headerlink" title="示例：保存流量"></a>示例：保存流量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -w outfile</span><br></pre></td></tr></table></figure>

<p>在代理模式下启动 mitmdump，并将所有流量写入 outfile。</p>
<h3 id="过滤保存的流量"><a href="#过滤保存的流量" class="headerlink" title="过滤保存的流量"></a>过滤保存的流量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -nr infile -w outfile <span class="string">&quot;~m post&quot;</span></span><br></pre></td></tr></table></figure>

<p>启动 mitmdump 而不绑定到代理端口（-n），从 infile 中读取所有流，应用指定的筛选器表达式（只匹配 POST），并写入 outfile。</p>
<h3 id="客户端重放"><a href="#客户端重放" class="headerlink" title="客户端重放"></a>客户端重放</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -nC outfile</span><br></pre></td></tr></table></figure>

<p>启动 mitmdump 而不绑定到代理端口（-n），然后重放来自 outfile （-C filename）的所有请求。标识以显而易见的方式组合在一起，因此可以重放来自一个文件的请求，并将结果流写入另一个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -nC srcfile -w dstfile</span><br></pre></td></tr></table></figure>

<p>更多信息请参见 <a href="https://docs.mitmproxy.org/stable/overview-features/#client-side-replay">client-side replay</a>。</p>
<h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -s examples/simple/add_header.py</span><br></pre></td></tr></table></figure>

<p>这将运行 add_header.py 示例脚本，该脚本只是向所有响应添加一个新的头。</p>
<h3 id="脚本数据转换"><a href="#脚本数据转换" class="headerlink" title="脚本数据转换"></a>脚本数据转换</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -ns examples/simple/add_header.py -r srcfile -w dstfile</span><br></pre></td></tr></table></figure>

<p>此命令从 srcfile 加载流，根据指定的脚本对其进行转换，然后将其写回 dstfile。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>数据采集</tag>
        <tag>网络爬虫</tag>
        <tag>Mitmproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次Sqoop从MySQL导入数据到Hive问题的排查经过</title>
    <url>/2018/12/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-Sqoop-%E4%BB%8E-MySQL-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%88%B0-Hive-%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E7%BB%8F%E8%BF%87/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>MySQL中原始数据有790W+的记录数，在Sqoop抽取作业成功的情况下在Hive中只有500W左右的记录数。</p>
<h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><h2 id="数据导入脚本Log"><a href="#数据导入脚本Log" class="headerlink" title="数据导入脚本Log"></a>数据导入脚本Log</h2><p>通过Log可以发现以下信息：</p>
<ol>
<li>该Sqoop任务被分解为4个MapTask。</li>
<li>MapTask执行期间有异常，是网络异常导致MySQL连接不成功。</li>
<li>Sqoop任务对应的MR执行过程中总的被调起9个MapTask，其中3个失败、2个被kill，理论上剩余的4个MapTask是成功执行的。</li>
<li>Sqoop导入对应的MR只有MapTask，且MapTask的数据记录数为790W+。所以，单纯看MR的输出是正常的。</li>
<li>Sqoop导入完成后，紧跟着有一个读取Sqoop目标表数据的<code>insert overwrite</code>的操作。该操作只被分解为2个MapTask，说明原数据文件只有两个块。</li>
<li>根据以上信息说明Sqoop之后确实只生成了2个数据文件，有两个文件丢失了。</li>
</ol>
<p>详细原始Log信息见附件：<a href="/images/202501/sqoop.txt">Sqoop执行日志</a></p>
<h2 id="查看Sqoop任务对应MR的执行日志"><a href="#查看Sqoop任务对应MR的执行日志" class="headerlink" title="查看Sqoop任务对应MR的执行日志"></a>查看Sqoop任务对应MR的执行日志</h2><p>根据上面的Log中的信息，从HDFS上查找对应的日志。Yarn所有的应用执行日志在HDFS的<code>/data/hadoop/yarn-logs/hadoop/logs/</code>目录下。从该目录下查找应用程序application_1533196506314_4460157 的日志。日志会包含MR在各个节点上执行的信息。</p>
<p>从Log中发现以下异常信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2018-12-10 00:42:30,595 FATAL [IPC Server handler 17 on 8046] org.apache.hadoop.mapred.TaskAttemptListenerImpl: Task: attempt_1533196506314_4460157_m_000001_0 - exited : org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.hdfs.server.namenode.LeaseExpiredException): No lease on /user/hive/warehouse/ods.db/bss_customer_fj/_SCRATCH0.3130352759450352/dt=20181209/_temporary/1/_temporary/attempt_1533196506314_4460157_m_000001_0/part-m-00001 (inode 761544109): File does not exist. Holder DFSClient_attempt_1533196506314_4460157_m_000001_0_-1729942809_1 does not have any open files.</span><br></pre></td></tr></table></figure>

<p>所以，怀疑是MR在执行结束时，将临时文件移动到正式目录时发生错误。</p>
<p>原始Log文件见目录：</p>
<ul>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-12_27463.txt">192-168-72-12_27463</a>  </li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-24_16310.txt">192-168-72-24_16310</a>  </li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-84_13498.txt">192-168-72-84_13498</a>  </li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-93_53778.txt">192-168-72-93_53778</a></li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-23_18284.txt">192-168-72-23_18284</a>  </li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-73_2363.txt">192-168-72-73_2363</a>  </li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-88_24481.txt">192-168-72-88_24481</a>  </li>
<li><a href="/images/202501/application_1533196506314_4460157/192-168-72-94_54353.txt">192-168-72-94_54353</a></li>
</ul>
<h2 id="查看DN-Log信息"><a href="#查看DN-Log信息" class="headerlink" title="查看DN Log信息"></a>查看DN Log信息</h2><p>根据上面的Log信息，发现DN节点192-168-72-24上的MapTask有以下异常信息。</p>
<p>192-168-72-24异常信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2018-12-10 00:42:34,410 WARN [main] org.apache.hadoop.mapred.YarnChild: Exception running child : org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.hdfs.server.namenode.LeaseExpiredException): No lease on /user/hive/warehouse/ods.db/bss_customer_fj/_SCRATCH0.3130352759450352/dt=20181209/_temporary/1/_temporary/attempt_1533196506314_4460157_m_000000_0/part-m-00000 (inode 761544157): File does not exist. Holder DFSClient_attempt_1533196506314_4460157_m_000000_0_798513081_1 does not have any open files.</span><br></pre></td></tr></table></figure>

<p>所以怀疑是MapTask的最后阶段写文件的时候未成功。检查该DN节点的Log发现以下异常信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2018-12-10 00:42:32,643 ERROR org.apache.hadoop.hdfs.server.datanode.DataNode: BlockSender.sendChunks() exception:</span><br><span class="line">java.io.IOException: 断开的管道</span><br><span class="line">        at sun.nio.ch.FileChannelImpl.transferTo0(Native Method)</span><br><span class="line">        at sun.nio.ch.FileChannelImpl.transferToDirectlyInternal(FileChannelImpl.java:428)</span><br><span class="line">        at sun.nio.ch.FileChannelImpl.transferToDirectly(FileChannelImpl.java:493)</span><br><span class="line">        at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:608)</span><br><span class="line">        at org.apache.hadoop.net.SocketOutputStream.transferToFully(SocketOutputStream.java:223)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.datanode.BlockSender.sendPacket(BlockSender.java:583)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.datanode.BlockSender.doSendBlock(BlockSender.java:763)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.datanode.BlockSender.sendBlock(BlockSender.java:710)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.datanode.DataXceiver.readBlock(DataXceiver.java:552)</span><br><span class="line">        at org.apache.hadoop.hdfs.protocol.datatransfer.Receiver.opReadBlock(Receiver.java:116)</span><br><span class="line">        at org.apache.hadoop.hdfs.protocol.datatransfer.Receiver.processOp(Receiver.java:71)</span><br><span class="line">        at org.apache.hadoop.hdfs.server.datanode.DataXceiver.run(DataXceiver.java:253)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<p>百度之后发现该异常信息跟DN的一个配置有关系，具体配置项是DN可以同时处理的文件上限。对于老版本配置项名称为“dfs.datanode.max.xcievers”，对于新版本配置项名称改为“dfs.datanode.max.transfer.threads”。该参数的默认值为4096，所以需要修改为8192。</p>
<h2 id="查看NN-Log信息"><a href="#查看NN-Log信息" class="headerlink" title="查看NN Log信息"></a>查看NN Log信息</h2><p>默认的，Log4j输出的NameNode日志文件只保留最近的20个文件。因为NN的Log信息比较多，20个文件保存的日志不足1天，异常时间的日志已经被冲掉了。</p>
<p><img src="/images/202501/namenodeLogs.png" alt="NameNode Log"></p>
<h2 id="查看NN信息"><a href="#查看NN信息" class="headerlink" title="查看NN信息"></a>查看NN信息</h2><p>通过NN WebUI查看发现NN内存的使用已经70%左右，负载已经比较高。</p>
<p><img src="/images/202501/namenodeInfo.png" alt="NameNode Info"></p>
<h2 id="处理措施"><a href="#处理措施" class="headerlink" title="处理措施"></a>处理措施</h2><p>综合以上信息，其实问题发生的根本原因未能查明。基于对Hadoop了解的深度、精力及对故障恢复的容忍程度的考虑，待定位根本原因再解决问题的方案不可控。所以，采取以下改进措施：</p>
<p>（1）修改DN最大处理文件数量上限至8192。<br>（2）将NN内存扩展到100G。<br>（3）修改Sqoop源代码，当落地到目标HDFS目录下的文件数量与MapTask数量不一致时返回错误状态，并由调度系统进行重新抽取。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
        <tag>MySQL</tag>
        <tag>Sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>箱线图简介</title>
    <url>/2025/09/28/%E7%AE%B1%E7%BA%BF%E5%9B%BE%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>箱线图（Boxplot）又称为箱形图、盒须图或盒式图，一种用于展示一组或多组数据分散情况的统计图。</p>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><ul>
<li>展示数据的集中趋势：箱线图的中位数反映数据集中趋势。若中位数在箱体中心，数据分布对称；若不在中心，则数据偏斜。</li>
<li>展示数据的分散程度：箱体的长度（即Q3与Q1的间距）展示了数据的分散程度，箱体长度越长，说明数据越分散。</li>
<li>显示异常值：箱线图延伸出去的须表示正常范围内的最大值与最小值，超出正常范围的数据点则是异常值（用星号或圆点表示）。</li>
<li>显示数据的对称性与偏态：若箱体与须线长度均匀，数据分布对称；若须线长短不一或箱体偏斜，则数据分布呈现偏态。</li>
</ul>
<h1 id="如何看箱线图"><a href="#如何看箱线图" class="headerlink" title="如何看箱线图"></a>如何看箱线图</h1><p><img src="/images/202509/43.png"></p>
<ol>
<li>横坐标：样本组</li>
<li>纵坐标：对应业务的数据</li>
<li>IQR（四分位距）：是统计离散度的度量，IQR&#x3D;Q3-Q1</li>
<li>Max值（Q3+1.5IQR）：正常范围内，数据的最大值</li>
<li>Q3（第三四分位数）：位于75%的数据点（有75%的数据小于该值）</li>
<li>Q2（中位数）：位于50%的数据点，即将数据分为两部分的中心值</li>
<li>Q1（第一四分位数）：位于25%的数据点（有25%的数据小于该值）</li>
<li>Min值（Q1-1.5IQR）：正常范围内，数据的最小值</li>
<li>异常值：超出正常范围的数据点（Max值~Min值之间理论上为正态分布的99.3%置信区间）</li>
</ol>
<h2 id="适合箱线图展示的数据"><a href="#适合箱线图展示的数据" class="headerlink" title="适合箱线图展示的数据"></a>适合箱线图展示的数据</h2><ul>
<li>箱线图适用于连续型变量，不适用于离散型变量（但只有一个连续型变量时，更适合使用直方图）。</li>
<li>当数据中存在超大或超小异常值时，箱线图可能呈现扁平形态或只剩一线，此时不适合使用箱线图。</li>
<li>数据中存在大量异常值时，箱线图形状可能很奇怪，不适合使用。</li>
<li>箱线图最适合用于比较，结合定性数据，绘制分组箱线图。</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>调试Hadoop源代码</title>
    <url>/2016/09/11/%E8%B0%83%E8%AF%95-Hadoop-%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="Hadoop版本"><a href="#Hadoop版本" class="headerlink" title="Hadoop版本"></a>Hadoop版本</h1><p>Hadoop 2.7.3</p>
<h1 id="调试模式下启动Hadoop-NameNode"><a href="#调试模式下启动Hadoop-NameNode" class="headerlink" title="调试模式下启动Hadoop NameNode"></a>调试模式下启动Hadoop NameNode</h1><p>在<code>$&#123;HADOOP_HOME&#125;/etc/hadoop/hadoop-env.sh</code>中设置NameNode启动的JVM参数，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_NAMENODE_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,address=8788,server=y,suspend=y&quot;</span><br><span class="line">export HADOOP_NAMENODE_OPTS=&quot;-Dhadoop.security.logger=$&#123;HADOOP_SECURITY_LOGGER:-INFO,RFAS&#125; -Dhdfs.audit.logger=$&#123;HDFS_AUDIT_LOGGER:-INFO,NullAppender&#125; $HADOOP_NAMENODE_OPTS&quot;</span><br></pre></td></tr></table></figure>

<p>使用脚本<code>$&#123;HADOOP_HOME&#125;/sbin/start-dfs.sh</code>启动HDFS，如果有以下提示信息则说明调试模式下启动NameNode成功：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Listening for transport dt_socket at address: 8788</span><br></pre></td></tr></table></figure>

<p>此时，如果执行jps查看java进程信息会有以下信息，是因为NameNode进程被挂起并处于监听状态，直到收到debug确认信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jps</span><br><span class="line">10638 Jps</span><br><span class="line">10438 -- main class information unavailable</span><br><span class="line">2171 </span><br><span class="line">10508 DataNode</span><br></pre></td></tr></table></figure>

<h1 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h1><p>找到<code>hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java</code>并在main函数中设置断点，如下图：<img src="/images/202501/namenode-breakpoints.png" alt="NameNode Breakpoints"></p>
<h1 id="在Eclipse中调试"><a href="#在Eclipse中调试" class="headerlink" title="在Eclipse中调试"></a>在Eclipse中调试</h1><p>在<code>NameNode.java</code>代码中点击右键，在弹出的菜单中选择<code>Debug As -&gt; Debug Configurations...</code>，在弹出的对话框中双击<code>Remote Java Application</code>，配置内容如图：<img src="/images/202501/remote-java-application-debug-conf.png" alt="Remote Java Application Debug Configuration"></p>
<p>配置完成后点击Debug按钮进入调试界面。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>分布式计算</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>解决HTTP POST请求Nginx静态内容405错误</title>
    <url>/2019/04/04/%E8%A7%A3%E5%86%B3-HTTP-POST-%E8%AF%B7%E6%B1%82-Nginx-%E9%9D%99%E6%80%81%E5%86%85%E5%AE%B9-405-%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>Nginx是不支持POST请求静态内容的，通过POST请求时出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -d &quot;a=b&quot; &quot;http://192.16.36.15:11013/upgrade&quot;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;405 Not Allowed&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=<span class="string">&quot;white&quot;</span>&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;405 Not Allowed&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.14.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>解决方法是在Nginx配置中添加以下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">error_page 405 =200 $uri;</span><br></pre></td></tr></table></figure>

<p>完整配置示例如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location /upgrade &#123;</span><br><span class="line">        empty_gif;</span><br><span class="line">        access_log /data/nginx/upgrade.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 405 =200 $uri;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 MongoDB 日志信息定位操作来源</title>
    <url>/2025/10/20/%E9%80%9A%E8%BF%87-MongoDB-%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF%E5%AE%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E6%9D%A5%E6%BA%90/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一天中午突然发现生产系统使用的 MongoDB 库被删掉了。幸亏有备份，很快恢复，生产系统并未受很大影响。问了团队成员，都未进行过删除操作，说明可能是两种情况：一、误删，连操作者自己也没意识到做了一个删除操作；二、bug，在某个程序中存在一个 bug。</p>
<h1 id="local-oplog-rs"><a href="#local-oplog-rs" class="headerlink" title="local.oplog.rs"></a>local.oplog.rs</h1><p>MongoDB 的复制集是通过 oplog 来实现的，主库的更改操作会被记录到主库的 oplog 日志中，然后从库通过异步方式复制主库的 oplog 文件并且将 oplog 日志应用到从库，从而实现了与主库的同步。</p>
<p>先查看 oplog 看是否有删除操作。查过之后，并未发现有 remove 的操作。</p>
<p>oplog 说明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; db.<span class="property">oplog</span>.<span class="property">rs</span>.<span class="title function_">findOne</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;ts&quot;</span> : <span class="title class_">Timestamp</span>(<span class="number">1419392438</span>, <span class="number">1</span>),</span><br><span class="line">  <span class="string">&quot;h&quot;</span> : <span class="title class_">NumberLong</span>(<span class="string">&quot;3445526183368758260&quot;</span>),</span><br><span class="line">  <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;op&quot;</span> : <span class="string">&quot;n&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;o&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span> : <span class="string">&quot;Reconfig set&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span> : <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ts：8字节的时间戳，由4字节unix timestamp + 4字节自增计数表示。这个值很重要，在选举(如master宕机时)新primary时，会选择ts最大的那个secondary作为新primary。</li>
<li>op：1字节的操作类型，例如：<ul>
<li>“i”： insert</li>
<li>“u”： update</li>
<li>“d”： delete</li>
<li>“c”： db cmd</li>
<li>“db”：声明当前数据库 (其中ns 被设置成为&#x3D;&gt;数据库名称+ ‘.’)</li>
<li>“n”: no op,即空操作，其会定期执行以确保时效性</li>
</ul>
</li>
<li>ns：操作所在的namespace。</li>
<li>o：操作所对应的document，即当前操作的内容（比如更新操作时要更新的的字段和值）</li>
<li>o2: 在执行更新操作时的where条件，仅限于update时才有该属性。</li>
</ul>
<h1 id="MongoDB-系统日志"><a href="#MongoDB-系统日志" class="headerlink" title="MongoDB 系统日志"></a>MongoDB 系统日志</h1><p>MongoDB 系统日志路径从配置文件中可以查看。MongoDB 进程信息中可以看到配置文件的位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10-180-86-57 ~]# ps -ef|grep mongo</span><br><span class="line">root      1564     1  1  2015 ?        2-21:32:34 /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf</span><br></pre></td></tr></table></figure>

<p>日志文件路径配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10-180-86-57 ~]# more /usr/local/mongodb/mongodb.conf</span><br><span class="line">systemLog</span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">  destination: file</span><br><span class="line">  path: <span class="string">&quot;/data/mongodb/log/mongodb.log&quot;</span></span><br><span class="line">  logAppend: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>查看日志信息发现有 dropDatabase 的操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10-180-86-57 <span class="built_in">log</span>]# <span class="built_in">cat</span> mongodb.log |grep dropDatabase</span><br><span class="line">2016-05-24T11:24:37.994+0800 [repl writer worker 1] dropDatabase md starting</span><br><span class="line">2016-05-24T11:24:38.357+0800 [repl writer worker 1] dropDatabase md finished</span><br></pre></td></tr></table></figure>

<p>md 正是被删除的库。时间范围已经明确，剩下的就是找到删除操作的来源，通过时间查看该时间前有哪些 IP 连接了数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10-180-86-57 <span class="built_in">log</span>]# <span class="built_in">cat</span> mongodb.log |grep <span class="string">&quot;2016-05-24T11:24&quot;</span></span><br><span class="line">2016-05-24T11:24:34.960+0800 [initandlisten] connection accepted from 10.57.172.146:58082 <span class="comment">#5171827 (55 connections now open)</span></span><br><span class="line">2016-05-24T11:24:35.011+0800 [conn5171827]  authenticate db: admin &#123; authenticate: 1, user: <span class="string">&quot;bigdata&quot;</span>, nonce: <span class="string">&quot;xxx&quot;</span>, key: <span class="string">&quot;xxx&quot;</span> &#125;</span><br><span class="line">2016-05-24T11:24:36.483+0800 [conn5171600] end connection 10.149.13.17:4202 (54 connections now open)</span><br><span class="line">2016-05-24T11:24:37.994+0800 [repl writer worker 1] dropDatabase md starting</span><br><span class="line">2016-05-24T11:24:38.137+0800 [conn5171338] end connection 10.149.13.6:32360 (53 connections now open)</span><br><span class="line">2016-05-24T11:24:38.252+0800 [repl writer worker 1] removeJournalFiles</span><br><span class="line">2016-05-24T11:24:38.357+0800 [repl writer worker 1] dropDatabase md finished</span><br></pre></td></tr></table></figure>

<p>发现在这个时间有一个内容 IP（10.57.172.146） 有连接数据库的操作。虽然问题没有重新，但基本可能定位为误删操作。review 同事代码确定没有问题后，问题没有再现。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="读写权限分离"><a href="#读写权限分离" class="headerlink" title="读写权限分离"></a>读写权限分离</h2><p>这个库下存放的都是配置信息，变动很少，但读取很频繁，而且多个地方都会读取。为了控制权限，创建这个库的只读账号，对外只开放只读账号，只有管理功能使用可写账号。</p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>这次事故就是因为有备份才可以快速恢复的。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 部署时出现 Push cannot contain secrets 异常</title>
    <url>/2025/10/28/Hexo-%E9%83%A8%E7%BD%B2%E6%97%B6%E5%87%BA%E7%8E%B0-Push-cannot-contain-secrets-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>今天在执行 <code>hexo deploy</code> 部署时，出现以下异常：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">remote: error: GH013: Repository rule violations found for refs/heads/master.</span><br><span class="line">remote: </span><br><span class="line">remote: - GITHUB PUSH PROTECTION</span><br><span class="line">remote:   —————————————————————————————————————————</span><br><span class="line">remote:     Resolve the following violations before pushing again</span><br><span class="line">remote: </span><br><span class="line">remote:     - Push cannot contain secrets</span><br><span class="line">remote: </span><br><span class="line">remote:     </span><br><span class="line">remote:      (?) Learn how to resolve a blocked push</span><br><span class="line">remote:      https://docs.github.com/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line#resolving-a-blocked-push</span><br><span class="line">remote:     </span><br><span class="line">remote:      (?) This repository does not have Secret Scanning enabled, but is eligible. Enable Secret Scanning to view and manage detected secrets.</span><br><span class="line">remote:      Visit the repository settings page, https://github.com/zhang-jc/zhang-jc.github.io/settings/security_analysis</span><br><span class="line">remote:     </span><br><span class="line">remote:     </span><br><span class="line">remote:       —— Amazon AWS Access Key ID ——————————————————————————</span><br><span class="line">remote:        locations:</span><br><span class="line">remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f</span><br><span class="line">remote:            path: search.xml:6170</span><br><span class="line">remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f</span><br><span class="line">remote:            path: search.xml:6170</span><br><span class="line">remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f</span><br><span class="line">remote:            path: search.xml:6170</span><br><span class="line">remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f</span><br><span class="line">remote:            path: search.xml:6170</span><br><span class="line">remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f</span><br><span class="line">remote:            path: search.xml:6173</span><br><span class="line">remote:     </span><br><span class="line">remote:        (?) To push, remove secret from commit(s) or follow this URL to allow the secret.</span><br><span class="line">remote:        https://github.com/zhang-jc/zhang-jc.github.io/security/secret-scanning/unblock-secret/34dtqbomcHD2FyadsoLZcpSJp6k</span><br><span class="line">remote:     </span><br><span class="line">remote: </span><br><span class="line">remote: </span><br><span class="line">To github.com:zhang-jc/zhang-jc.github.io.git</span><br><span class="line"> ! [remote rejected] HEAD -&gt; master (push declined due to repository rule violations)</span><br><span class="line">error: 无法推送一些引用到 &#x27;github.com:zhang-jc/zhang-jc.github.io.git&#x27;</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (/home/zhangjc/github/zhangjc/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:519:28)</span><br><span class="line">    at ChildProcess._handle.onexit (node:internal/child_process:293:12)</span><br></pre></td></tr></table></figure>

<p>其中的关键提示信息是：</p>
<pre><code class="text">remote:       —— Amazon AWS Access Key ID ——————————————————————————
remote:        locations:
remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f
remote:            path: search.xml:6170
remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f
remote:            path: search.xml:6170
remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f
remote:            path: search.xml:6170
remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f
remote:            path: search.xml:6170
remote:          - commit: 2573f22a136850f3aa0bf54402cdf02f882b9e0f
remote:            path: search.xml:6173
</code></pre>
<p>使用关键字 <code>AWS</code> 查找 <code>search.xml</code> 发现是因为一篇博文中粘贴的一个下载地址中包含了密钥信息导致的。如下图：<br><img src="/images/202510/42.png"></p>
<p>找到上图中出现问题的链接，脱敏后重新提交执行 <code>hexo g -d</code> 问题仍然出现。删除 <code>public</code> 和 <code>.deploy_git</code> 目录，再次执行问题解决。💁</p>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2025/10/28/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li>指定名称启动容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name Redis -it centos bash</span><br></pre></td></tr></table></figure>

<ul>
<li>列出所有容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE    COMMAND    CREATED        STATUS                       PORTS     NAMES</span><br><span class="line">8aeb92ae184b   centos   <span class="string">&quot;bash&quot;</span>     4 hours ago    Exited (130) 5 minutes ago             Redis</span><br></pre></td></tr></table></figure>

<ul>
<li>启动已存在的容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start Redis</span><br></pre></td></tr></table></figure>

<ul>
<li>连接已运行的容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it Redis bash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>SourceForge下载加速</title>
    <url>/2025/10/28/SourceForge%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>记录一个加速镜像网站“liquidtelecom”，以TCL</p>
<p>下载为例，原下载地址如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://jaist.dl.sourceforge.net/project/tcl/Tcl/8.6.11/tcl8.6.11-src.tar.gz</span><br></pre></td></tr></table></figure>

<p>替换后的下载地址：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://liquidtelecom.dl.sourceforge.net/project/tcl/Tcl/8.6.11/tcl8.6.11-src.tar.gz</span><br></pre></td></tr></table></figure>

<p>下载速度非常快。</p>
]]></content>
      <tags>
        <tag>SourceForge</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看服务器是否重启过的一种方法</title>
    <url>/2025/10/28/Linux%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%90%A6%E9%87%8D%E5%90%AF%E8%BF%87%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>使用 uptime 命令可以方便检查服务器是否发生了重启。uptime 命令手册中说：uptime会在一行中显示下列信息：当前时间、系统运行了多久时间、当前登录的用户有多少，以及前 1、5 和 15 分钟系统的平均负载。当然可以添加参数以不同的方式展示信息，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uptime</span></span><br><span class="line"> 17:30:22 up 23 min,  1 user,  load average: 0.55, 0.63, 0.46</span><br><span class="line">$ <span class="built_in">uptime</span> -p</span><br><span class="line">up 25 minutes</span><br><span class="line">$ <span class="built_in">uptime</span> -s</span><br><span class="line">2022-03-09 17:06:48</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>一次DataNode负载严重不均衡问题的排查过程</title>
    <url>/2025/10/28/%E4%B8%80%E6%AC%A1DataNode%E8%B4%9F%E8%BD%BD%E4%B8%A5%E9%87%8D%E4%B8%8D%E5%9D%87%E8%A1%A1%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>最近两天发现Hadoop集群中的Datanode存储严重不均衡，有一台DN存储增长非常快，远远超出了其他节点。即使启动了Balance进城也无法解决问题。</p>
<p>经过排查发现是因一个异常任务停留在reduce阶段，在不停的向HDFS写数据。而这个Reduce Task就是在存储增长非常快的节点上运行的。分析原因是Reduce Task会优先向运行在的节点本地写数据，副本会分布在其他节点上。所以，问题节点增长非常快，而其他节点并看不出明显异常。</p>
<p>以下是排查过程的图片：<br><img src="/images/202510/43.jpg"><br><img src="/images/202510/44.jpg"><br><img src="/images/202510/45.jpg"><br><img src="/images/202510/46.jpg"><br><img src="/images/202510/47.jpg"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式存储</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>在列表每行末尾追加字符串的命令</title>
    <url>/2025/10/28/%E5%9C%A8%E5%88%97%E8%A1%A8%E6%AF%8F%E8%A1%8C%E6%9C%AB%E5%B0%BE%E8%BF%BD%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>命令样例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">_config.next.yml  _config.yml  db.json  node_modules  package.json  package-lock.json  public  scaffolds  <span class="built_in">source</span>  themes</span><br><span class="line">$ <span class="built_in">ls</span> | grep json</span><br><span class="line">db.json</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line">$ <span class="built_in">ls</span> | grep json | sed</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;s:$: abc:&quot;</span></span><br><span class="line">db.json abc</span><br><span class="line">package.json abc</span><br><span class="line">package-lock.json abc</span><br></pre></td></tr></table></figure>

<p>以上命令是在末尾追加“ abc”。关键就是sed工具的使用，详细的可以查看sed使用手册。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Workbench CSV导入编码问题</title>
    <url>/2025/10/28/MySQL-Workbench-CSV%E5%AF%BC%E5%85%A5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>异常信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Unhandled exception: &#x27;gbk&#x27; codec can&#x27;t decode byte 0xa2 in position 43; illegal multibyte sequence</span><br></pre></td></tr></table></figure>

<p>如图：<br><img src="/images/202510/48.jpg"></p>
<p>因为Windows环境下Mysql Workbench编码器只有gbk，而csv文件是utf-8编码的，所以导致该问题。如图：<br><img src="/images/202510/49.jpg"></p>
<p>将csv编码改为gbk后再次导入成功。如图：<br><img src="/images/202510/50.jpg"></p>
<p>另外一种思路：为Mysql Workbench安装UTF-8编码器。这种方法没有实际进行尝试，感兴趣的话可以探索下^_^</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL-</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker修改已有容器的端口映射</title>
    <url>/2025/10/28/Docker%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%9C%89%E5%AE%B9%E5%99%A8%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<p>此文是在现在容器实例上修改端口映射，并不希望创建新的容器，这样可以保持原有容器中的数据。</p>
<p>方法是修改容器目录下 hostconfig.json 配置文件中的 PortBindings 配置项内容。如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;PortBindings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;8080/tcp&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;HostIp&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;HostPort&quot;</span><span class="punctuation">:</span><span class="string">&quot;8080&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>前一个数字是容器端口，后一个是宿主机端口。将宿主机的8080端口映射到容器的8080端口。如修改现有端口映射则把端口号改掉就OK。</p>
]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark SQL查询HBase表异常解决</title>
    <url>/2025/10/28/Spark-SQL%E6%9F%A5%E8%AF%A2HBase%E8%A1%A8%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="hbase-default-xml-file-seems-to-be-for-an-older-version"><a href="#hbase-default-xml-file-seems-to-be-for-an-older-version" class="headerlink" title="hbase-default.xml file seems to be for an older version"></a>hbase-default.xml file seems to be for an older version</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">spark-sql&gt;</span><span class="language-bash">SELECT FROM test.test_hbase_table LIMIT 100;</span></span><br><span class="line">java.lang.RuntimeException:java.lang.RuntimeException:hbase-default.xml file seems to be for an older version of HBase</span><br><span class="line"></span><br><span class="line"> (1.2.3),this version is 2.0.0.3.0.1.0.187</span><br><span class="line">        at org,apache.hadoop.hive.ql.metadata.Table.getStorageHandler(Table.java:292)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImplsSanon funSgetTableOptions1ssanon funSapplys7.apply(HiveClientImpl.scala:407)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImplsSanon funsgetTableOptions1ssanon funsapplys7.apply(HiveClientImpl.scala:374)</span><br><span class="line">        at scala.Option.map(Option.scala:146)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImplssanon funSgetTableOptions1.apply(HiveClientImpl.scala:374)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImplssanon funSgetTableOptions1.apply(HiveClientImpl.scala:372)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImplsSanonfunSwithHiveStates1.apply(HiveClientImpl.scala:281)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImpl.liftedTreels1(HiveClientImpl.scala:219)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImpl.retryLocked(HiveClientImpl.scala:218)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImpl.withHiveState(HiveClientImpl.scala:264)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImpl.getTableOption(HiveClientImpl.scala:372)</span><br><span class="line">        at org.apache.spark.sql.hive.client.Hiveclientsclass.getTable(Hiveclient.scala:81)</span><br><span class="line">        at org.apache.spark.sql.hive.client.HiveClientImpl.getTable(HiveClientImpl.scala:84)</span><br><span class="line">        at org.apache.spark.sql.hive.HiveExternalCatalog.getRawTable(HiveExternalCatalog.scala:118)</span><br><span class="line">        at org.apache.spark.sql.hive.HiveExternalCatalogssanon funSgetTables1.apply(HiveExternalCatalog.scala:700)</span><br><span class="line">        at org.apache.spark.sql.hive.HiveExternalCatalogssanon funSgetTables1.apply(HiveExternalCatalog.scala:700)</span><br><span class="line">        at org.apache.spark.sql.hive.HiveExternalCatalog.withClient(HiveExternalCatalog.scala:97)</span><br><span class="line">        at org.apache.spark.sql.hive.HiveExternalCatalog.getTable(HiveExternalCatalog.scala:699)</span><br></pre></td></tr></table></figure>

<p>解决方法是在hbase-site.xml文件中添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.defaults.for.version.skip<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">    Set to true to skip the &#x27;hbase.defaults.for.version&#x27; check. Setting this to true can be useful in contexts other than the other side of a maven generation; i.e. running in an ide. You&#x27;ll want to set this boolean to true to avoid seeing the RuntimException complaint: &quot;hbase-default.xml file seems to be for and old version of HBase (0.92.1), this version is X.X.X-SNAPSHOT&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，hbase-site.xml必须在SPARK_CLASSPATH中，简单方法是将该文件放到spark的conf目录下。</p>
<h1 id="unread-block-data"><a href="#unread-block-data" class="headerlink" title="unread block data"></a>unread block data</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">spark-sql&gt;</span><span class="language-bash">SELECT FROM test.test_hbase_table LIMIT 100;</span></span><br><span class="line">org.apache.spark.SparkException:Job aborted due to stage failure: Task 0 in stage 0.0 failed 4 times, most recent failure: Lost task 0.3 in stage 0.0 (TID 3, kde-test6, executor 1): Java.Lang.IllegalStateException: unread block data</span><br><span class="line">        at java.io.0bjectInputStreamsBlockDataInputStream.setBlockDataMode(ObjectInputStream.java:2783)</span><br><span class="line">        at java.io.ObjectInputStream.readobjecto(objectInputStream.java:1605)</span><br><span class="line">        at java.io.0bjectInputStream.defaultReadFields(ObjectInputstream.java:2287)</span><br><span class="line">        at java.io.ObjectInputStream,readSerialData(ObjectInputStream.java:2211)</span><br><span class="line">        at java.io..readordinaryobject(objectInputStream.java:2069)</span><br><span class="line">        at java.io.ObjectInputStream.readobjecte(objectInputstream.java:1573)</span><br><span class="line">        at java.io.objectInputstream,readobject(objectInputstream.java:431)</span><br><span class="line">        at org.apache.spark.serializer.JavaDeserializationstrean.readobject(JavaSerializer.scala:75)</span><br><span class="line">        at org.apache.spark.serializer.JavaSerializerInstance.deserialize(JavaSerializer.scala:114)</span><br><span class="line">        at org.apache.spark.executor.ExecutorsTaskRunner.run(Executor.scala:376)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runworker(ThreadPoolExecutor.java:1149)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutorsWorker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Driver stacktrace:</span><br><span class="line">        at org.apache.spark.scheduler.DAGScheduler.orgSapachessparksschedulerSDAGSchedulerssfailJobAndIndependentStages(DAGScheduler.scala:1891)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerssanonfunSabortStages1.apply(DAGScheduler.scala:1879)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerssanonfunSabortStages1.apply(DAGScheduler.scala:1878)</span><br><span class="line">        at scala.collection.mutable.ResizableArraysclass.foreach(ResizableArray.scala:59)</span><br><span class="line">        at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)</span><br><span class="line">        at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1878)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerssanonfunshandleTaskSetFaileds1.apply(DAGScheduler.scala:927)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerssanon funshandleTaskSetFaileds1.apply(DAGScheduler.scala:927)</span><br><span class="line">        at scala.Option.foreach(Option.scala:257)</span><br><span class="line">        at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:927)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2112)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2061)</span><br><span class="line">        at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2050)</span><br><span class="line">        at org.apache.spark.util.EventLoopssanons1.run(EventLoop.scala:49)</span><br><span class="line">        at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:738)</span><br><span class="line">        at org.apache.spark.SparkContext,runJob(SparkContext.scala:2061)</span><br></pre></td></tr></table></figure>

<h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h2><p>通过–jars参数指定需要的包，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spark-sql --jars /usr/hdp/3.0.1.0-187/hive/lib/hive-hbase-handler-3.1.0.3.0.1.0-187.jar,/usr/lib/ams-hbase/lib/hbase-client-2.0.0.3.0.0.0-1634.jar,/usr/lib/ams-hbase/lib/hbase-common-2.0.0.3.0.0.0-1634.jar,/usr/lib/ams-hbase/lib/hbase-server-2.0.0.3.0.0.0-1634.jar,/usr/lib/ams-hbase/lib/hbase-hadoop2-compat-2.0.0.3.0.0.0-1634.jar,/usr/lib/ams-hbase/lib/guava-11.0.2.jar,/usr/lib/ams-hbase/lib/guava-11.0.2.jar,/usr/lib/ams-hbase/lib/hbase-protocol-2.0.0.3.0.0.0-1634.jar,/usr/lib/ams-hbase/lib/htrace-core-3.2.0-incubating.jar,/usr/lib/ams-hbase/lib/protobuf-java-2.5.0.jar,/usr/lib/ams-hbase/lib/metrics-core-3.2.1.jar</span><br></pre></td></tr></table></figure>

<h2 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h2><p>更优的解决方案。在spark-defaults.conf中添加以下变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark.driver.extraClassPath    /usr/hdp/3.0.1.0-187/hive/lib/hive-hbase-handler-3.1.0.3.0.1.0-187.jar:/usr/lib/ams-hbase/lib/hbase-client-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/hbase-common-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/hbase-server-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/hbase-hadoop2-compat-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/guava-11.0.2.jar:/usr/lib/ams-hbase/lib/guava-11.0.2.jar:/usr/lib/ams-hbase/lib/hbase-protocol-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/htrace-core-3.2.0-incubating.jar:/usr/lib/ams-hbase/lib/protobuf-java-2.5.0.jar:/usr/lib/ams-hbase/lib/metrics-core-3.2.1.jar</span><br><span class="line">spark.executor.extraClassPath    /usr/hdp/3.0.1.0-187/hive/lib/hive-hbase-handler-3.1.0.3.0.1.0-187.jar:/usr/lib/ams-hbase/lib/hbase-client-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/hbase-common-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/hbase-server-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/hbase-hadoop2-compat-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/guava-11.0.2.jar:/usr/lib/ams-hbase/lib/guava-11.0.2.jar:/usr/lib/ams-hbase/lib/hbase-protocol-2.0.0.3.0.0.0-1634.jar:/usr/lib/ams-hbase/lib/htrace-core-3.2.0-incubating.jar:/usr/lib/ams-hbase/lib/protobuf-java-2.5.0.jar:/usr/lib/ams-hbase/lib/metrics-core-3.2.1.jar</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Spark</tag>
        <tag>HBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下^M处理</title>
    <url>/2025/10/28/Linux%E4%B8%8B-M%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>此处针对shell脚本运行时报^M引起的异常，但是通过vi查看未显示^M的情况下如何处理。针对这种情况可以使用sed命令进行替换，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/^M//g&#x27;</span> file1.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：^M其实是CTRL+V与CTRL+M的组合。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 3.1.0编译ldap-client-api-0.1-SNAPSHOT.jar问题解决</title>
    <url>/2025/10/28/Hive-3-1-0%E7%BC%96%E8%AF%91ldap-client-api-0-1-SNAPSHOT-jar%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>解决方法参见：<a href="https://link.zhihu.com/?target=https://issues.apache.org/jira/browse/HIVE-21777">HIVE-21777</a></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据仓库</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark架构</title>
    <url>/2025/10/28/Spark%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>Spark架构非常简洁。简洁的架构是良好开放性、兼容性的基础。<br><img src="/images/202510/51.jpg"></p>
<ul>
<li>驱动器（驱动进程）：运行main()函数，负责三件事。<ul>
<li>维护Spark应用程序相关信息</li>
<li>回应用户程序或输入</li>
<li>分析任务并分发给若干执行器处理</li>
</ul>
</li>
<li>执行器：执行驱动器分配的实际计算工作，负责两件事。<ul>
<li>执行驱动器分配的代码</li>
<li>报告执行器的计算状态给驱动器</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark宽依赖与窄依赖</title>
    <url>/2025/10/28/Spark%E5%AE%BD%E4%BE%9D%E8%B5%96%E4%B8%8E%E7%AA%84%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>Spark的宽依赖与窄依赖是跟数据分区关联的概念。</p>
<ul>
<li>窄依赖：每个输入分区仅决定一个输出分区。Spark窄依赖自动执行流水线处理，意味着多个过滤操作全部在内存中执行。</li>
<li>宽依赖：每个输入分区决定多个输出分区。具有宽依赖关系的转换就是经常说的洗牌（shuffle）操作。执行shuffle操作时，Spark会将结果写入磁盘。<br><img src="/images/202510/52.jpg"></li>
</ul>
<p>针对宽依赖的优化是讨论比较多的话题。这也引出了惰性评估的主题。惰性评估的意思就是等到绝对需要时才执行计算。惰性评估的好处是Spark可以优化整个从输入到输出端的数据流。一个很好的例子就是Dataframe的谓词下推。</p>
<p>其实，我们日常工作中会有很多惰性评估的场景，尤其是解决历史存量问题的时候。例如，我们经常会先收集某方面的存量问题，然后整体分析后提供完整的解决方案。这样更有助于从整体统筹考虑，从而提供更更高效、低成本的解决方案。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>数据发现开源工具调研</title>
    <url>/2025/10/28/%E6%95%B0%E6%8D%AE%E5%8F%91%E7%8E%B0%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h1><p>数据发现平台的目是帮助更好的发现、理解和使用数据。就是解决以下问题：数据存在哪里？如何使用这些数据？数据做什么？数据是如何创建的？数据是如何更新的？</p>
<p>通过 Amundsen，Lyft 将其数据团队的生产力提高了20%。同样，DataHub 帮助 LinkedIn 实现了数据大众化——每周有1,500 名员工访问 DataHub，以搜索、发现和使用数据来完成他们的工作。</p>
<h1 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h1><ul>
<li>Atlas（Apache，Cloudera）</li>
<li>Amundsen（LF AI &amp; Data，Lyft）</li>
<li>DataHub（Apache，Linkedin）</li>
</ul>
<h1 id="评估结论"><a href="#评估结论" class="headerlink" title="评估结论"></a>评估结论</h1><p>推荐Datahub。功能完整；开源社区相当活跃；开发语言Java、Python为主，比较适合团队现状。</p>
<p>Amundsen优势在数据发现，微服务架构及Python+TypeScript语言为主两个方面与团队现状不符。</p>
<p>Atlas纯Java为主开发语言与团队现状最符，但太偏技术化。</p>
<p>演示环境：</p>
<ul>
<li>DataHub：<a href="https://demo.datahubproject.io/">https://demo.datahubproject.io/</a></li>
</ul>
<table>
<thead>
<tr>
<th>工具</th>
<th>Atlas</th>
<th>Amundsen</th>
<th>DataHub</th>
</tr>
</thead>
<tbody><tr>
<td>开发者</td>
<td>Clouder</td>
<td>Lyft</td>
<td>LinkedIn</td>
</tr>
<tr>
<td>架构</td>
<td>元数据摄取的Hook</td>
<td>基于 ETL 的元数据摄取</td>
<td>基于插件的元数据摄取</td>
</tr>
<tr>
<td>特征</td>
<td>1. 搜索和发现</td>
<td>1. 易于设置、修改和部署</td>
<td>1. 搜索和发现</td>
</tr>
<tr>
<td></td>
<td>2. 使用 JanusGraph 作为元数据库和 Solr 进行搜索</td>
<td>2. 搜索和发现</td>
<td>2. 使用 Kafka 与流生态系统集成并支持 GraphQL</td>
</tr>
<tr>
<td></td>
<td>3. 专注于分类、数据治理和血缘（表和列）</td>
<td>3. 多后端支持</td>
<td>3. 数据血缘（基于列的血缘在路线图中）</td>
</tr>
<tr>
<td></td>
<td>4. 细粒度访问控制（Ranger）</td>
<td>4. 数据血缘（表和列）</td>
<td>4. 细粒度的访问控制</td>
</tr>
<tr>
<td></td>
<td>5. 数据分类和标记</td>
<td>5. 数据分类和标记</td>
<td>5. 数据分类和标记</td>
</tr>
<tr>
<td></td>
<td>6. 为 Hadoop 构建生态系统并使用 Hive 元数据与任何数据源一起工作</td>
<td></td>
<td></td>
</tr>
<tr>
<td>部署</td>
<td>没有官方部署建议</td>
<td>1. Kubernetes</td>
<td>1. Kubernetes</td>
</tr>
<tr>
<td></td>
<td></td>
<td>2. AWS ECS</td>
<td>2. 谷歌云 GKE（谷歌 Kubernetes 引擎）</td>
</tr>
<tr>
<td></td>
<td></td>
<td>3. 独立docker</td>
<td>3. 独立docker</td>
</tr>
<tr>
<td>认证</td>
<td>1. 文件</td>
<td>OAuth OIDC（OpenID 连接）</td>
<td>1. OAuth OIDC</td>
</tr>
<tr>
<td></td>
<td>2. Kerberos SSO</td>
<td></td>
<td>2. JaaS (Java Authentication and Authorization Service)</td>
</tr>
<tr>
<td></td>
<td>3. LDAP</td>
<td></td>
<td></td>
</tr>
<tr>
<td>鉴权</td>
<td>1. 基于 Ranger 的授权</td>
<td>在路线图中</td>
<td>平台和元数据策略</td>
</tr>
<tr>
<td></td>
<td>2. 数据屏蔽</td>
<td></td>
<td></td>
</tr>
<tr>
<td>路线图和更新</td>
<td>1. 一个公开的 JIRA 项目</td>
<td>1. Amundsen 路线图</td>
<td>1. DataHub 路线图</td>
</tr>
<tr>
<td></td>
<td>2. Medium 上社区的博客文章</td>
<td>2. Medium 和 Stemma 的更新</td>
<td>2. 媒体更新</td>
</tr>
<tr>
<td></td>
<td></td>
<td>3. GitHub（也可以让你贡献）</td>
<td></td>
</tr>
</tbody></table>
<h1 id="评估项"><a href="#评估项" class="headerlink" title="评估项"></a>评估项</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>Atlas：较少关注集成，而更多地关注：<ul>
<li>信息分类：用户可以使用词汇表添加特定于业务的上下文信息。</li>
<li>数据治理：治理团队可以更好地控制数据库实体的分类。此外，词汇表和分类可以相互关联以简化管理。</li>
<li>集成各种元数据源：使用 Hive，用户可以连接任意数量的元数据源，而无需自定义集成。此外，Atlas 默认完全支持所有基于 Hadoop 生态系统的数据源。</li>
</ul>
</li>
<li>Amundsen：易于使用，支持多种后端环境，并提供复杂的预览功能，帮助用户更好地了解他们的数据。</li>
<li>DataHub：的优势在于其数据治理能力。这些包括：<ul>
<li>更精细的访问控制：DataHub 支持列级和数据集级分类、PII 标记、自动数据删除（以帮助遵守 GDPR）等。</li>
<li>数据血缘：在其路线图中，DataHub 承诺列级血缘以及与 Great Expectations、dbt test 和 deequ 等测试框架的集成。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>工具</th>
<th>Atlas</th>
<th>Amundsen</th>
<th>DataHub</th>
</tr>
</thead>
<tbody><tr>
<td>搜索和发现</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>认证</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Airflow支持</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>DBT</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>多后端支持</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表血缘</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>列血缘</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>细粒度的访问控制</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>就开发语言来说Atlas最适合我们团队，Datahub次之，Amundsen匹配度最低。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>Atlas</th>
<th>Amundsen</th>
<th>DataHub</th>
</tr>
</thead>
<tbody><tr>
<td>语言</td>
<td>Java：60.2%</td>
<td>Python：67.8%</td>
<td>Java：45.5%</td>
</tr>
<tr>
<td></td>
<td>JavaScript：30.9%</td>
<td>TypeScript：29.7%</td>
<td>Python：34.4%</td>
</tr>
<tr>
<td></td>
<td>Python：2.9%</td>
<td>SCSS：2.1%</td>
<td>TypeScript：17.9%</td>
</tr>
<tr>
<td></td>
<td>HTML：2.8%</td>
<td>HTML：0.1%</td>
<td>Shell：0.7%</td>
</tr>
<tr>
<td></td>
<td>SCSS：2.1%</td>
<td>Makefile：0.1%</td>
<td>JavaScript：0.6%</td>
</tr>
<tr>
<td></td>
<td>Shell：0.8%</td>
<td>Scala：0.1%</td>
<td>Dockerfile：0.2%</td>
</tr>
<tr>
<td></td>
<td>Other：0.3%</td>
<td>Other：0.1%</td>
<td>Other：0.7%</td>
</tr>
</tbody></table>
<h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><ul>
<li>Apache Atlas 有一个公共 JIRA 项目，但没有明确定义的路线图。文档主要是官网。</li>
<li>Amundsen：定期更新，并拥有一个支持该项目的大型社区。官方文档及社区博文。</li>
<li>有一个公共路线图和广泛的社区支持。DataHub 也维护产品路线图并在 Medium 上分享频繁更新。</li>
</ul>
<table>
<thead>
<tr>
<th>工具</th>
<th>开源时间</th>
<th>Star</th>
<th>Fork</th>
<th>Watch</th>
<th>版本数</th>
<th>Contributors</th>
<th>Issues</th>
<th>PR</th>
<th>最新版本</th>
</tr>
</thead>
<tbody><tr>
<td>Atlas</td>
<td>2015年5月</td>
<td>1.3K</td>
<td>692</td>
<td>65</td>
<td>37</td>
<td>115</td>
<td>845，3714</td>
<td>78，101</td>
<td>2021-08-17</td>
</tr>
<tr>
<td>Amundsen</td>
<td>2019年10月</td>
<td>3.3K</td>
<td>836</td>
<td>245</td>
<td>95</td>
<td>205</td>
<td>103，507</td>
<td>21，1237</td>
<td>2022-05-17</td>
</tr>
<tr>
<td>DataHub</td>
<td>2020年2月</td>
<td>5.6K</td>
<td>1.5K</td>
<td>223</td>
<td>56</td>
<td>241</td>
<td>204，915</td>
<td>34，3982</td>
<td>2022-06-10</td>
</tr>
</tbody></table>
<blockquote>
<p>Issues、PR都是采用“Open数量 ，Closed数量”的数量展示。</p>
</blockquote>
<h2 id="底层架构"><a href="#底层架构" class="headerlink" title="底层架构"></a>底层架构</h2><table>
<thead>
<tr>
<th>工具</th>
<th>数据库</th>
<th>搜索</th>
<th>服务</th>
</tr>
</thead>
<tbody><tr>
<td>Atlas</td>
<td>JanusGraph</td>
<td>Solr</td>
<td>REST API、Kafka</td>
</tr>
<tr>
<td>Amundsen</td>
<td>neo4j</td>
<td>Elasticsearch</td>
<td>REST API</td>
</tr>
<tr>
<td>DataHub</td>
<td>neo4j</td>
<td>Elasticsearch</td>
<td>REST API、GraphQL、Kafka</td>
</tr>
</tbody></table>
<h2 id="应用公司或组织"><a href="#应用公司或组织" class="headerlink" title="应用公司或组织"></a>应用公司或组织</h2><table>
<thead>
<tr>
<th>工具</th>
<th>Atlas</th>
<th>Amundsen</th>
<th>DataHub</th>
</tr>
</thead>
<tbody><tr>
<td>公司或组织</td>
<td>Cloudera，其他无相关信息</td>
<td>Lyft、Databricks等38个公司或组织</td>
<td>LinkedIn、海博科技、上海华瑞银行等26个公司或组织</td>
</tr>
</tbody></table>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>Data Discovery Platforms and Their Open Source Solutions (eugeneyan.com)</li>
<li>Onebridge | Data Catalogs for Metadata Management</li>
<li>数据治理工具-元数据管理 (daimajiaoliu.com)</li>
<li>Data Catalogs, the Luxury of Choice | by Fadi Maali | Zendesk Engineering</li>
<li>2103.07532.pdf (arxiv.org)</li>
<li>How LinkedIn, Uber, Lyft, Airbnb and Netflix are Solving Data Management and Discovery for Machine Learning Solutions - KDnuggets</li>
<li>End-to-End Data Discovery, Observability, and Governance on AWS with LinkedIn’s Open-source DataHub | Programmatic Ponderings</li>
<li>数据治理方案技术调研 Atlas VS Datahub VS Amundsen - 云+社区 - 腾讯云 (tencent.com)</li>
<li>Apache Atlas Alternatives — Amundsen, DataHub, Metacat, Databook (atlan.com)</li>
<li>Github 1.9K Star的数据治理框架-Amundsen - 知乎 (zhihu.com)</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据发现</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>数据发现</tag>
        <tag>Atlas</tag>
        <tag>Amundsen</tag>
        <tag>DataHub</tag>
      </tags>
  </entry>
  <entry>
    <title>docker ps信息展示不全</title>
    <url>/2025/10/29/docker-ps%E4%BF%A1%E6%81%AF%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8/</url>
    <content><![CDATA[<p>命令添加以下选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps --no-trunc</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>DataHub编译问题</title>
    <url>/2025/10/29/DataHub%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h1><p>OS：Linux frin 5.15.0-41-generic #44~20.04.1-Ubuntu SMP Fri Jun 24 13:27:29 UTC 2022 x86_64 x86_64 x86_64 GNU&#x2F;Linux</p>
<h1 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h1><h2 id="sasl-sasl-h-没有那个文件或目录"><a href="#sasl-sasl-h-没有那个文件或目录" class="headerlink" title="sasl&#x2F;sasl.h: 没有那个文件或目录"></a>sasl&#x2F;sasl.h: 没有那个文件或目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt get install libsasl2-dev libsasl2-modules</span></span><br></pre></td></tr></table></figure>

<h2 id="lber-h-没有那个文件或目录"><a href="#lber-h-没有那个文件或目录" class="headerlink" title="lber.h: 没有那个文件或目录"></a>lber.h: 没有那个文件或目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python-dev libldap2-dev libssl-dev</span><br></pre></td></tr></table></figure>

<h2 id="Docker异常"><a href="#Docker异常" class="headerlink" title="Docker异常"></a>Docker异常</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Gradle suite &gt; Gradle test &gt; com.linkedin.metadata.systemmetadata.ElasticSearch SystemMetadataServiceTest &gt; setup FAILED</span><br><span class="line">    org.testcontainers.containers.ContainerFetchException: Can&#x27;t get Docker image: RemoteDockerImage(imageName=docker.elastic.co/elasticsearch/elasticsearch:7.9.3, imagePullPolicy=DefaultPullPolicy())</span><br><span class="line">        at org.testcontainers.containers.GenericContainer.getDockerImageName(GenericContainer.java:1286)</span><br><span class="line">        at org.testcontainers.containers.GenericContainer.logger(GenericContainer.java:615)</span><br><span class="line">        at org.testcontainers.elasticsearch.ElasticsearchContainer.&lt;init&gt;(ElasticsearchContainer.java:73)</span><br><span class="line">        at com.linkedin.metadata.ElasticTestUtils.getNewElasticsearchContainer(ElasticTestUtils.java:31)</span><br><span class="line">        at com.linkedin.metadata.systemmetadata.ElasticSearchSystemMetadataServiceTest.setup(ElasticSearchSystemMetadataServiceTest.java:37)</span><br><span class="line"></span><br><span class="line">        Caused by:</span><br><span class="line">        java.lang.IllegalStateException: Could not find a valid Docker environment. Please see logs and check configuration</span><br><span class="line">            at org.testcontainers.dockerclient.DockerClientProviderStrategy.lambda$getFirstValidStrategy$7(DockerClientProviderStrategy.java:215)</span><br><span class="line">            at java.util.Optional.orElseThrow(Optional.java:290)</span><br><span class="line">            at org.testcontainers.dockerclient.DockerClientProviderStrategy.getFirstValidStrategy(DockerClientProviderStrategy.java:207)</span><br><span class="line">            at org.testcontainers.DockerClientFactory.getOrInitializeStrategy(DockerClientFactory.java:136)</span><br><span class="line">            at org.testcontainers.DockerClientFactory.client(DockerClientFactory.java:178)</span><br><span class="line">            at org.testcontainers.LazyDockerClient.getDockerClient(LazyDockerClient.java:14)</span><br><span class="line">            at org.testcontainers.LazyDockerClient.listImagesCmd(LazyDockerClient.java:12)</span><br><span class="line">            at org.testcontainers.images.LocalImagesCache.maybeInitCache(LocalImagesCache.java:68)</span><br><span class="line">            at org.testcontainers.images.LocalImagesCache.get(LocalImagesCache.java:32)</span><br><span class="line">            at org.testcontainers.images.AbstractImagePullPolicy.shouldPull(AbstractImagePullPolicy.java:18)</span><br><span class="line">            at org.testcontainers.images.RemoteDockerImage.resolve(RemoteDockerImage.java:66)</span><br><span class="line">            at org.testcontainers.images.RemoteDockerImage.resolve(RemoteDockerImage.java:27)</span><br><span class="line">            at org.testcontainers.utility.LazyFuture.getResolvedValue(LazyFuture.java:17)</span><br><span class="line">            at org.testcontainers.utility.LazyFuture.get(LazyFuture.java:39)</span><br><span class="line">            at org.testcontainers.containers.GenericContainer.getDockerImageName(GenericContainer.java:1284)</span><br><span class="line">            ... 4 more</span><br><span class="line"></span><br><span class="line">Gradle suite &gt; Gradle test &gt; com.linkedin.metadata.search.LineageSearchServiceTest &gt; setup FAILED</span><br><span class="line">    org.testcontainers.containers.ContainerFetchException: Can&#x27;t get Docker image: RemoteDockerImage(imageName=docker.elastic.co/elasticsearch/elasticsearch:7.9.3, imagePullPolicy=DefaultPullPolicy())</span><br><span class="line">        at org.testcontainers.containers.GenericContainer.getDockerImageName(GenericContainer.java:1286)</span><br><span class="line">        at org.testcontainers.containers.GenericContainer.logger(GenericContainer.java:615)</span><br><span class="line">        at org.testcontainers.elasticsearch.ElasticsearchContainer.&lt;init&gt;(ElasticsearchContainer.java:73)</span><br><span class="line">        at com.linkedin.metadata.ElasticTestUtils.getNewElasticsearchContainer(ElasticTestUtils.java:31)</span><br><span class="line">        at com.linkedin.metadata.search.LineageSearchServiceTest.setup(LineageSearchServiceTest.java:77)</span><br><span class="line"></span><br><span class="line">        Caused by:</span><br><span class="line">        java.lang.IllegalStateException: Previous attempts to find a Docker environment failed. Will not retry. Please see logs and check configuration</span><br><span class="line">            at org.testcontainers.dockerclient.DockerClientProviderStrategy.getFirstValidStrategy(DockerClientProviderStrategy.java:109)</span><br><span class="line">            at org.testcontainers.DockerClientFactory.getOrInitializeStrategy(DockerClientFactory.java:136)</span><br><span class="line">            at org.testcontainers.DockerClientFactory.client(DockerClientFactory.java:178)</span><br><span class="line">            at org.testcontainers.LazyDockerClient.getDockerClient(LazyDockerClient.java:14)</span><br><span class="line">            at org.testcontainers.LazyDockerClient.inspectImageCmd(LazyDockerClient.java:12)</span><br><span class="line">            at org.testcontainers.images.LocalImagesCache.refreshCache(LocalImagesCache.java:42)</span><br><span class="line">            at org.testcontainers.images.AbstractImagePullPolicy.shouldPull(AbstractImagePullPolicy.java:24)</span><br><span class="line">            at org.testcontainers.images.RemoteDockerImage.resolve(RemoteDockerImage.java:66)</span><br><span class="line">            at org.testcontainers.images.RemoteDockerImage.resolve(RemoteDockerImage.java:27)</span><br><span class="line">            at org.testcontainers.utility.LazyFuture.getResolvedValue(LazyFuture.java:17)</span><br><span class="line">            at org.testcontainers.utility.LazyFuture.get(LazyFuture.java:39)</span><br><span class="line">            at org.testcontainers.containers.GenericContainer.getDockerImageName(GenericContainer.java:1284)</span><br><span class="line">            ... 4 more</span><br><span class="line"></span><br><span class="line">Gradle suite &gt; Gradle test &gt; com.linkedin.metadata.search.SearchServiceTest &gt; setup FAILED</span><br><span class="line">    org.testcontainers.containers.ContainerFetchException: Can&#x27;t get Docker image: RemoteDockerImage(imageName=docker.elastic.co/elasticsearch/elasticsearch:7.9.3, imagePullPolicy=DefaultPullPolicy())</span><br><span class="line">        at org.testcontainers.containers.GenericContainer.getDockerImageName(GenericContainer.java:1286)</span><br><span class="line">        at org.testcontainers.containers.GenericContainer.logger(GenericContainer.java:615)</span><br><span class="line">        at org.testcontainers.elasticsearch.ElasticsearchContainer.&lt;init&gt;(ElasticsearchContainer.java:73)</span><br><span class="line">        at com.linkedin.metadata.ElasticTestUtils.getNewElasticsearchContainer(ElasticTestUtils.java:31)</span><br><span class="line">        at com.linkedin.metadata.search.SearchServiceTest.setup(SearchServiceTest.java:56)</span><br><span class="line"></span><br><span class="line">        Caused by:</span><br><span class="line">        java.lang.IllegalStateException: Previous attempts to find a Docker environment failed. Will not retry. Please see logs and check configuration</span><br><span class="line">            at org.testcontainers.dockerclient.DockerClientProviderStrategy.getFirstValidStrategy(DockerClientProviderStrategy.java:109)</span><br><span class="line">            at org.testcontainers.DockerClientFactory.getOrInitializeStrategy(DockerClientFactory.java:136)</span><br><span class="line">            at org.testcontainers.DockerClientFactory.client(DockerClientFactory.java:178)</span><br><span class="line">            at org.testcontainers.LazyDockerClient.getDockerClient(LazyDockerClient.java:14)</span><br><span class="line">            at org.testcontainers.LazyDockerClient.inspectImageCmd(LazyDockerClient.java:12)</span><br><span class="line">            at org.testcontainers.images.LocalImagesCache.refreshCache(LocalImagesCache.java:42)</span><br><span class="line">            at org.testcontainers.images.AbstractImagePullPolicy.shouldPull(AbstractImagePullPolicy.java:24)</span><br><span class="line">            at org.testcontainers.images.RemoteDockerImage.resolve(RemoteDockerImage.java:66)</span><br><span class="line">            at org.testcontainers.images.RemoteDockerImage.resolve(RemoteDockerImage.java:27)</span><br><span class="line">            at org.testcontainers.utility.LazyFuture.getResolvedValue(LazyFuture.java:17)</span><br><span class="line">            at org.testcontainers.utility.LazyFuture.get(LazyFuture.java:39)</span><br><span class="line">            at org.testcontainers.containers.GenericContainer.getDockerImageName(GenericContainer.java:1284)</span><br><span class="line">            ... 4 more</span><br><span class="line"></span><br><span class="line">Gradle suite &gt; Gradle test &gt; com.linkedin.metadata.graph.dgraph.DgraphGraphServiceTest &gt; setup FAILED</span><br><span class="line">    java.lang.IllegalStateException: Could not find a valid Docker environment. Please see logs and check configuration</span><br><span class="line">        at org.testcontainers.dockerclient.DockerClientProviderStrategy.lambda$getFirstValidStrategy$7(DockerClientProviderStrategy.java:215)</span><br><span class="line">        at java.util.Optional.orElseThrow(Optional.java:290)</span><br><span class="line">        at org.testcontainers.dockerclient.DockerClientProviderStrategy.getFirstValidStrategy(DockerClientProviderStrategy.java:207)</span><br><span class="line">        at org.testcontainers.DockerClientFactory.getOrInitializeStrategy(DockerClientFactory.java:136)</span><br><span class="line">        at org.testcontainers.DockerClientFactory.client(DockerClientFactory.java:178)</span><br><span class="line">        at org.testcontainers.LazyDockerClient.getDockerClient(LazyDockerClient.java:14)</span><br><span class="line">        at org.testcontainers.LazyDockerClient.infoCmd(LazyDockerClient.java:12)</span><br><span class="line">        at com.linkedin.metadata.DockerTestUtils.checkContainerEngine(DockerTestUtils.java:10)</span><br><span class="line">        at com.linkedin.metadata.graph.dgraph.DgraphGraphServiceTest.setup(DgraphGraphServiceTest.java:61)</span><br></pre></td></tr></table></figure>

<p>需要注意两点：</p>
<ul>
<li>确保编译用户有Docker操作权限。非root用户运行Docker参见：<a href="https://www.zhangjc.com/2025/10/29/Deepin%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7Docker%E6%9D%83%E9%99%90/">Deepin普通用户Docker权限</a>。</li>
<li>最好停掉现有的Docker容器，避免冲突。</li>
</ul>
<h2 id="generateJsonSchema-sh"><a href="#generateJsonSchema-sh" class="headerlink" title="generateJsonSchema.sh"></a>generateJsonSchema.sh</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Execution failed for task ‘:docs-website:generateJsonSchema’.</span><br><span class="line">Process ‘command ‘./generateJsonSchema.sh’’ finished with non-zero exit value 1</span><br></pre></td></tr></table></figure>

<p>编译需要Python3，如果本地有多个Python版本，则可以修改“docs-website&#x2F;genJsonSchema&#x2F;gen_json_schema.py”中以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python gen_json_schema.py ../../docs/generated/ingestion/config_schemas/ $&#123;SCHEMA_ROOT_DIR&#125;/$&#123;SCHEMA_FILE_NAME&#125;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 gen_json_schema.py ../../docs/generated/ingestion/config_schemas/ $&#123;SCHEMA_ROOT_DIR&#125;/$&#123;SCHEMA_FILE_NAME&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h2><p>因测试用例运行比较慢，构建的时候可以选择跳过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew build -x <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="Task-datahub-web-react-yarnInstall"><a href="#Task-datahub-web-react-yarnInstall" class="headerlink" title="Task :datahub-web-react:yarnInstall"></a>Task :datahub-web-react:yarnInstall</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; Task :datahub-web-react:yarnInstall</span><br><span class="line">info There appears to be trouble with your network connection. Retrying...</span><br><span class="line">info If you think this is a bug, please open a bug report with the information provided in &quot;/home/zhangjc/github/datahub/datahub-web-react/yarn-error.log&quot;.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.</span><br><span class="line">error An unexpected error occurred: &quot;https://registry.yarnpkg.com/monaco-editor/-/monaco-editor-0.28.1.tgz: ESOCKETTIMEDOUT&quot;.</span><br></pre></td></tr></table></figure>

<p>设置yarn代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h2 id="Module-“boto3”-has-no-attribute-“Session”"><a href="#Module-“boto3”-has-no-attribute-“Session”" class="headerlink" title="Module “boto3” has no attribute “Session”"></a>Module “boto3” has no attribute “Session”</h2><p>参见：<a href="https://github.com/datahub-project/datahub/issues/5475">https://github.com/datahub-project/datahub/issues/5475</a></p>
<h2 id="Task-metadata-ingestion-testQuick-FAILED"><a href="#Task-metadata-ingestion-testQuick-FAILED" class="headerlink" title="Task :metadata-ingestion:testQuick FAILED"></a>Task :metadata-ingestion:testQuick FAILED</h2><p>参见：<a href="https://github.com/datahub-project/datahub/issues/5481">https://github.com/datahub-project/datahub/issues/5481</a></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>数据发现</category>
      </categories>
      <tags>
        <tag>数据发现</tag>
        <tag>DataHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux从用户组中删除用户</title>
    <url>/2025/10/29/Linux%E4%BB%8E%E7%94%A8%E6%88%B7%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<p>使用 gpasswd，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gpasswd -d <span class="built_in">test</span> docker</span><br></pre></td></tr></table></figure>

<p>将test用户从docker用户组中删除。其他用法参见gpasswd手册。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>运行yarn config异常：No such file or directory: &#39;config&#39;</title>
    <url>/2025/10/29/%E8%BF%90%E8%A1%8Cyarn-config%E5%BC%82%E5%B8%B8%EF%BC%9ANo-such-file-or-directory-config/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove cmdtest</span><br><span class="line"><span class="built_in">sudo</span> apt remove yarn</span><br><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/yarn.list</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install yarn -y</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>Yarn</category>
      </categories>
      <tags>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass</title>
    <url>/2025/10/29/Unable-to-make-protected-final-java-lang-Class-java-lang-ClassLoader-defineClass/</url>
    <content><![CDATA[<p>错误信息如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2022-08-28 00:29:37.447 ERROR 123200 --- [           main] o.s.boot.SpringApplication               : Application startup failed</span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: Cannot load configuration class: org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:403) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:249) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:281) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:125) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at com.frin.controller.HelloController.main(HelloController.java:17) ~[classes/:na]</span><br><span class="line">Caused by: java.lang.ExceptionInInitializerError: null</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassEnhancer.newEnhancer(ConfigurationClassEnhancer.java:122) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:110) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:393) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	... 12 common frames omitted</span><br><span class="line">Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InaccessibleObjectException--&gt;Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not &quot;opens java.lang&quot; to unnamed module @7a4ccb53</span><br><span class="line">	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:464) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:336) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]</span><br><span class="line">	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.KeyFactory$Generator.create(KeyFactory.java:221) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.KeyFactory.create(KeyFactory.java:174) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.KeyFactory.create(KeyFactory.java:153) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.proxy.Enhancer.&lt;clinit&gt;(Enhancer.java:73) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	... 15 common frames omitted</span><br><span class="line">Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not &quot;opens java.lang&quot; to unnamed module @7a4ccb53</span><br><span class="line">	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354) ~[na:na]</span><br><span class="line">	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) ~[na:na]</span><br><span class="line">	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199) ~[na:na]</span><br><span class="line">	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193) ~[na:na]</span><br><span class="line">	at org.springframework.cglib.core.ReflectUtils$1.run(ReflectUtils.java:61) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569) ~[na:na]</span><br><span class="line">	at org.springframework.cglib.core.ReflectUtils.&lt;clinit&gt;(ReflectUtils.java:52) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.KeyFactory$Generator.generateClass(KeyFactory.java:243) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	... 27 common frames omitted</span><br><span class="line"></span><br><span class="line">2022-08-28 00:29:37.448  INFO 123200 --- [           main] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@548a24a: startup date [Sun Aug 28 00:29:37 CST 2022]; root of context hierarchy</span><br><span class="line">2022-08-28 00:29:37.449  WARN 123200 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception thrown from LifecycleProcessor on context close</span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: LifecycleProcessor not initialized - call &#x27;refresh&#x27; before invoking lifecycle methods via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@548a24a: startup date [Sun Aug 28 00:29:37 CST 2022]; root of context hierarchy</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:427) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:999) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:958) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:750) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at com.frin.controller.HelloController.main(HelloController.java:17) ~[classes/:na]</span><br><span class="line"></span><br><span class="line">2022-08-28 00:29:37.449 ERROR 123200 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Destroy method on bean with name &#x27;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&#x27; threw an exception</span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call &#x27;refresh&#x27; before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@548a24a: startup date [Sun Aug 28 00:29:37 CST 2022]; root of context hierarchy</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.destroySingletons(FactoryBeanRegistrySupport.java:230) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1006) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:958) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:750) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE]</span><br><span class="line">	at com.frin.controller.HelloController.main(HelloController.java:17) ~[classes/:na]</span><br></pre></td></tr></table></figure>

<p>这是由于 JDK 8 中有关反射相关的功能自从 JDK 9 开始就被限制了，两种方法解决：</p>
<ul>
<li>为了兼容之前的版本，在运行项目时添加以下参数：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--add-opens java.base/java.lang=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<ul>
<li>升级至 JDK 9 以上版本。Maven 项目可以在 pom.xml 中添加以下配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive/Spark SQL数字格式化</title>
    <url>/2025/10/29/Hive-Spark-SQL%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>如果数字长度过大，则会以科学技术法的方式展现。通过一下例子可以复现，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (d <span class="type">decimal</span>(<span class="number">18</span>,<span class="number">8</span>)) stored <span class="keyword">as</span> orc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">0.00000001</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure>

<p>如果需要按照原始数值展示，则可以用使用format_number函数，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> format_number(d, <span class="number">8</span>) <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure>

<p>format_number的说明参见Hive官网：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-StringFunctions">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-StringFunctions</a>。该函数在Spark SQL下也可使用。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>分布式计算</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统中IPhone 6s照片路径</title>
    <url>/2025/10/29/Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%ADIPhone-6s%E7%85%A7%E7%89%87%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>IPone 6s接入Ubuntu后照片位置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /run/user/1000/gvfs/gphoto2:host=Apple_Inc._iPhone_314f6be727cfce5f1f77980808a6bfb62b87bf63</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">DCIM</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>移动端</category>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
        <tag>移动端</tag>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>数的分类</title>
    <url>/2025/10/29/%E6%95%B0%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><img src="/images/202510/53.jpg"></p>
<blockquote>
<p>自然数就是0和正整数。</p>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
        <category>数学基础</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>勾股定理</title>
    <url>/2025/10/29/%E5%8B%BE%E8%82%A1%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>在一个直角三角形里：斜边的平方等于其他两边的平方的和。</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul>
<li>知道直角三角形任意两边的长计算第三条边的长。</li>
<li>计算两点之间的距离，可以是二维、三维或更高维。</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
        <category>几何学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>几何学</tag>
      </tags>
  </entry>
  <entry>
    <title>正弦、余弦和正切</title>
    <url>/2025/10/29/%E6%AD%A3%E5%BC%A6%E3%80%81%E4%BD%99%E5%BC%A6%E5%92%8C%E6%AD%A3%E5%88%87/</url>
    <content><![CDATA[<p>正弦、余弦和正切是三角法里的主要函数，它们是基于一个直角三角形而建立的。在探索这些函数之前，我们先给三角形的每条边一个名字：<br><img src="/images/202510/54.jpg"></p>
<ul>
<li>“对边” 是在角 θ 的对面</li>
<li>“邻边” 是在角 θ 的旁边</li>
<li>“斜边” 是长的一边</li>
</ul>
<p>正弦（sine）、余弦（cosine）和正切（tangent）（英语符号简写为 sin, cos 和 tan）是直角三角形边长的比：<br><img src="/images/202510/55.jpg"></p>
]]></content>
      <categories>
        <category>数学</category>
        <category>几何学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>几何学</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2025/10/29/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>函数是一种映射，将变量间的关系形式化为数学描述。</p>
<h1 id="偶函数与奇函数"><a href="#偶函数与奇函数" class="headerlink" title="偶函数与奇函数"></a>偶函数与奇函数</h1><h2 id="偶函数"><a href="#偶函数" class="headerlink" title="偶函数"></a>偶函数</h2><p>如果函数是”偶函数”，则：f(x) &#x3D; f(−x) ，x 为任何值。函数的图像沿y轴对称：<br><img src="/images/202510/56.jpg"></p>
<h2 id="奇函数"><a href="#奇函数" class="headerlink" title="奇函数"></a>奇函数</h2><p>如果函数是”奇函数”，则：−f(x) &#x3D; f(−x)，x 为任何值。函数的图像原点对称：<br><img src="/images/202510/57.jpg"></p>
<h2 id="非奇也非偶"><a href="#非奇也非偶" class="headerlink" title="非奇也非偶"></a>非奇也非偶</h2><p>不要被“奇”和“偶”蒙了。。。它们只不过是名称。。。一个函数不一定是奇函数或偶函数。实际上，大部分函数都既不是奇函数或偶函数。例如：<br><img src="/images/202510/58.jpg"></p>
<h1 id="基本初等函数"><a href="#基本初等函数" class="headerlink" title="基本初等函数"></a>基本初等函数</h1><h2 id="幂函数"><a href="#幂函数" class="headerlink" title="幂函数"></a>幂函数</h2><p>幂函数是指形如 $y &#x3D; x^a$ (α为实数）的函数，其中x称为底数，也是幂函数的自变量，α称为指数。</p>
<h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><p>指数函数是重要的基本初等函数之一。一般地，$y &#x3D; a^x$ 函数(a为常数且以a&gt;0，a≠1)叫做指数函数，函数的定义域是 R 。注意，在指数函数的定义表达式中，在 $a^x$ 前的系数必须是数1，自变量x必须在指数的位置上，且不能是x的其他表达式，否则，就不是指数函数。</p>
<h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><p>如果 $a^x &#x3D; N$（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作 $x &#x3D; \log_a N$，读作以a为底N的对数，其中a叫做对数的底数，N叫做真数。</p>
<h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p>三角函数公式是数学中属于初等函数中的超越函数的一类函数公式。它们的本质是任意角的集合与一个比值的集合的变量之间的映射，通常的三角函数是在平面直角坐标系中定义的。</p>
<h2 id="反三角函数"><a href="#反三角函数" class="headerlink" title="反三角函数"></a>反三角函数</h2><p>在数学中，反三角函数(偶尔也称为弧函数，反严密函数或圈度量函数)是三角函数的反函数(具有适当限制的域)。具体而言，它们是正弦、余弦、正切、余切、正割和余割的逆函数，并用于从任何角度的三角比获得角度。</p>
<h2 id="常数函数"><a href="#常数函数" class="headerlink" title="常数函数"></a>常数函数</h2><p>在数学中，常数函数（也称常值函数）是指值不发生改变（即是常数）的函数。例如，我们有函数f(x)&#x3D;4，因为f映射任意的值到4，因此f是一个常数。更一般地，对一个函数f: A→B，如果对A内所有的x和y，都有f(x)&#x3D;f(y)，那么，f是一个常数函数。</p>
]]></content>
      <categories>
        <category>数学</category>
        <category>代数</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>代数</tag>
      </tags>
  </entry>
  <entry>
    <title>libmediainfo-dev问题</title>
    <url>/2025/10/29/libmediainfo-dev%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Ubuntu 20.04 在使用某软件的时候出现了以下异常信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">OSError: libmediainfo.so.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>这是因为缺少了libmediainfo-dev软件包，安装后问题解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update -y</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y libmediainfo-dev</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin中Python3.10导入gi模块异常</title>
    <url>/2025/10/29/Deepin%E4%B8%ADPython3-10%E5%AF%BC%E5%85%A5gi%E6%A8%A1%E5%9D%97%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>异常信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.10.9 (main, Mar  1 2023, 18:23:06) [GCC 11.2.0] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import gi</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/home/username/anaconda3/lib/python3.10/site-packages/gi/__init__.py&quot;</span>, line 40, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from . import _gi</span><br><span class="line">ImportError: /lib/x86_64-linux-gnu/libgirepository-1.0.so.1: undefined symbol: ffi_type_uint32, version LIBFFI_BASE_7.0</span><br></pre></td></tr></table></figure>

<p>修改链接库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libffi.so.7</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>ERROR Deployer not found: git</title>
    <url>/2025/10/29/ERROR-Deployer-not-found-git/</url>
    <content><![CDATA[<p>在执行Hexo一键部署时出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">INFO  Validating config</span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>原因是未安装hexo-deployer-git，通过以下命令安装后重新部署即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发框架</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin删除APT软件源</title>
    <url>/2025/10/29/Deepin%E5%88%A0%E9%99%A4APT%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
    <content><![CDATA[<p>在更新软件源时有些源会出现错误，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">命中:2 https://pro-driver-packages.uniontech.com eagle InRelease                                                                                                </span><br><span class="line">命中:1 https://app-store-files.uniontech.com/231017174131534/appstore deepin InRelease                                                                          </span><br><span class="line">忽略:3 https://download.docker.com/linux/ubuntu apricot InRelease                                                                                            </span><br><span class="line">错误:4 https://download.docker.com/linux/ubuntu apricot Release     </span><br><span class="line">  404  Not Found [IP: 54.230.21.56 443]</span><br><span class="line">命中:5 https://community-packages.deepin.com/deepin apricot InRelease</span><br><span class="line">命中:6 https://community-packages.deepin.com/driver driver InRelease</span><br><span class="line">命中:7 https://community-packages.deepin.com/printer eagle InRelease</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">E: 仓库 “https://download.docker.com/linux/ubuntu apricot Release” 没有 Release 文件。</span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br></pre></td></tr></table></figure>

<p>从上面的错误信息可以看出是docker的源出现错误。用以下命令删除docker源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/apt/sources.list.d</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">appstore.list  devicemanager.list  docker.list  driver.list  printer.list</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">rm</span> -rf docker.list</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin普通用户Docker权限</title>
    <url>/2025/10/29/Deepin%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7Docker%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>Deepin下安装完Docker后，非root用户执行命令时出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">Got permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get <span class="string">&quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json&quot;</span>: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure>

<p>执行以下命令将当前用户添加至docker用户组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gpasswd -a <span class="variable">$USER</span> docker <span class="comment"># 将普通用户username加入到docker组中</span></span><br><span class="line">$ newgrp docker <span class="comment"># 更新docker组</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云计算</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
        <tag>Docker</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin20.9安装PySide6后QtDesigner无法输入中文</title>
    <url>/2025/10/29/Deepin20-9%E5%AE%89%E8%A3%85PySide6%E5%90%8EQtDesigner%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<p>安装PySide6后，QtDesigner无法输入中文，需要手动编译fcitx-qt5时启用对QT6的支持。</p>
<p>安装编译需要的依赖包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git</span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake</span><br><span class="line"><span class="built_in">sudo</span> apt install fcitx-libs-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install extra-cmake-modules</span><br><span class="line"><span class="built_in">sudo</span> apt install libxkbcommon-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install qt6-remoteobjects-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install bison</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgl1-mesa-dev libglu1-mesa-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install qt6-base-private-dev</span><br></pre></td></tr></table></figure>

<p>下载fcitx-qt5源代码：<a href="https://link.zhihu.com/?target=https://github.com/fcitx/fcitx-qt5">GitHub - fcitx&#x2F;fcitx-qt5: Fcitx support for Qt5</a>。</p>
<p>修改编译配置支持QT6：</p>
<ul>
<li>进入源代码目录</li>
<li>编辑CMakeLists.txt文件内容，将以下内容：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">option(ENABLE_QT5 &quot;Enable Qt5&quot; On)</span><br><span class="line">option(ENABLE_QT6 &quot;Enable Qt6 im module&quot; Off)</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">option(ENABLE_QT5 &quot;Enable Qt5&quot; Off)</span><br><span class="line">option(ENABLE_QT6 &quot;Enable Qt6 im module&quot; On)</span><br></pre></td></tr></table></figure>

<ul>
<li>通过以下步骤编译：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ../</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<ul>
<li>编译好的文件：build&#x2F;qt6&#x2F;platforminputcontext&#x2F;libfcitxplatforminputcontextplugin-qt6.so</li>
<li>将编译好的文件拷贝至PySide6对应目录下：{PYTHON_HOME}&#x2F;lib&#x2F;python3.12&#x2F;site-packages&#x2F;PySide6&#x2F;Qt&#x2F;plugins&#x2F;platforminputcontexts&#x2F;</li>
</ul>
]]></content>
      <categories>
        <category>开发框架</category>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
        <tag>Qt</tag>
        <tag>PySide</tag>
        <tag>QtDesigner</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux编译安装Python启用SQLite模块</title>
    <url>/2025/10/29/Linux%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Python%E5%90%AF%E7%94%A8SQLite%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>SQLite是一个轻量级的基于文件的数据库，开发、测试和迁移都很方便。在通过源码编译安装Python时可通过下面的方式启用SQLite模块。</p>
<p>首先需要安装SQLite及开发库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install sqlite3 libsqlite3-dev</span><br></pre></td></tr></table></figure>

<p>编译Python时启用SQLite模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --enable-optimizations --enable-loadable-sqlite-extensions --prefix=/opt/Python-3.12.0</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>ORA-12543: TNS: 无法连接目标主机</title>
    <url>/2025/10/29/ORA-12543-TNS-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<p>安装完成Oracle后，通过sqlplus使用system用户访问提示“ORA-12543: TNS: 无法连接目标主机”错误，经过排查发现是由于密码中包含@符号导致。</p>
<p>解决方法如下：</p>
<ul>
<li>打开 cmd，输入：sqlplus &#x2F;nolog，无用户名登录。</li>
<li>输入 conn &#x2F;as sysdba，连接到数据库。</li>
<li>重新设置 system 用户密码：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">system</span> identified <span class="keyword">by</span> password;</span><br></pre></td></tr></table></figure>

<p>注意修改为自己的密码。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>重置MySQL8.0 Root密码</title>
    <url>/2025/10/29/%E9%87%8D%E7%BD%AEMySQL8-0-Root%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>在本地安装了MySQL8.0，但忘记了root密码，通过以下方式重置root密码。</p>
<ol>
<li>停止MySQL服务。</li>
<li>跳过权限检查启动MySQL服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用root账号登录MySQL：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>更新Root密码：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如不先执行“flush privileges;”，则可能会提示以下错误信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>刷新权限：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>重启MySQL服务。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin Linux sudoer文件语法错误修复</title>
    <url>/2025/10/29/Deepin-Linux-sudoer%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p>不小心将sudoer文件内容修改错了，导致无法sudo获取root权限进行修正，可以用以下方法修复。</p>
<p>执行以下命令修改sudoer文件的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkttyagent -p $(<span class="built_in">echo</span> $$) | pkexec <span class="built_in">chmod</span> 7777 /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>修复完语法错误后将sudoer文件的权限复原：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkttyagent -p $(<span class="built_in">echo</span> $$) | pkexec <span class="built_in">chmod</span> 0400 /etc/sudoers</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
</search>
